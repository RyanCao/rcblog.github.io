<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chester.Cao Blog</title>
  
  <subtitle>Devlopper in C#</subtitle>
  <link href="http://blog.rcant.com/atom.xml" rel="self"/>
  
  <link href="http://blog.rcant.com/"/>
  <updated>2020-10-20T03:27:20.424Z</updated>
  <id>http://blog.rcant.com/</id>
  
  <author>
    <name>Chester.C</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo 插件添加</title>
    <link href="http://blog.rcant.com/2020/10/21/hexo/hexo-plugins/"/>
    <id>http://blog.rcant.com/2020/10/21/hexo/hexo-plugins/</id>
    <published>2020-10-21T03:39:17.000Z</published>
    <updated>2020-10-20T03:27:20.424Z</updated>
    
    <content type="html"><![CDATA[<p>不断搜集Hexo插件添加上来</p><a id="more"></a><h2 id="水印插件-更新于2020-10-20"><a href="#水印插件-更新于2020-10-20" class="headerlink" title="水印插件 (更新于2020/10/20)"></a>水印插件 (更新于2020/10/20)</h2><p><a href="https://github.com/SpiritLingPub/hexo-images-watermark" target="_blank" rel="noopener">GitHub</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>使用 npm 安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-images-watermark</span><br></pre></td></tr></table></figure><p>使用 yarn 安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add hexo-images-watermark</span><br></pre></td></tr></table></figure><h3 id="修改站点配置"><a href="#修改站点配置" class="headerlink" title="修改站点配置"></a>修改站点配置</h3><p>添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">watermark:</span><br><span class="line">    enable: true</span><br><span class="line">    textEnable: true</span><br><span class="line">    rotate: -45</span><br><span class="line">    gravity: centre</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;不断搜集Hexo插件添加上来&lt;/p&gt;</summary>
    
    
    
    <category term="hexo" scheme="http://blog.rcant.com/categories/hexo/"/>
    
    
    <category term="hexo" scheme="http://blog.rcant.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ 使用</title>
    <link href="http://blog.rcant.com/2020/10/20/mq/rabbitmq-use/"/>
    <id>http://blog.rcant.com/2020/10/20/mq/rabbitmq-use/</id>
    <published>2020-10-20T01:39:17.000Z</published>
    <updated>2020-10-20T06:19:56.391Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>学习下如何使用rabbitMQ</p><a id="more"></a><h2 id="MQ-即-Message-Quene-消息队列"><a href="#MQ-即-Message-Quene-消息队列" class="headerlink" title="MQ 即 (Message Quene),消息队列"></a>MQ 即 (Message Quene),消息队列</h2><p>在计算机科学中，消息队列（英语：Message queue）是一种进程间通信或同一进程的不同线程间的通信方式，软件的贮列用来处理一系列的输入，通常是来自用户。消息队列提供了异步的通信协议，每一个贮列中的纪录包含详细说明的数据，包含发生的时间，输入设备的种类，以及特定的输入参数，也就是说：消息的发送者和接收者不需要同时与消息队列交互。消息会保存在队列中，直到接收者取回它。</p><p>实际上，消息队列常常保存在链表结构中。拥有权限的进程可以向消息队列中写入或读取消息。<br>目前，有很多消息队列有很多开源的实现，包括JBoss Messaging、JORAM、Apache ActiveMQ、Sun Open Message Queue、RabbitMQ、IBM MQ、Apache Qpid和HTTPSQS。</p><h2 id="RabbitMQ简介"><a href="#RabbitMQ简介" class="headerlink" title="RabbitMQ简介"></a>RabbitMQ简介</h2><p>RabbitMQ是实现了高级消息队列协议（AMQP）的开源消息代理软件（亦称面向消息的中间件）。RabbitMQ服务器是用Erlang语言编写的，而群集和故障转移是构建在开放电信平台框架上的。所有主要的编程语言均有与代理接口通讯的客户端库。</p><p>RabbitMQ支持以下操作系统：</p><pre><code>- Windows- Linux/Unix- MAC OS X</code></pre><p>RabbitMQ支持下列编程语言：</p><pre><code>- C# (using .net/c# client)- clojure (using Langohr)- erlang (using erlang client)- java (using java client)- javascript/node.js (using amqp.node)- perl (using Net::RabbitFoot)- python (using pika)- python-puka (using puka)- ruby (using Bunny)- ruby (using amqp gem)</code></pre><p><a href="http://www.rabbitmq.com/" target="_blank" rel="noopener">RabbitMQ官网</a></p><h2 id="安装-RabbitMQ"><a href="#安装-RabbitMQ" class="headerlink" title="安装 RabbitMQ"></a>安装 RabbitMQ</h2><p>docker需要先装好</p><p>使用 <strong>docker-compose</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# mkdir rabbitmq</span><br><span class="line">[root@localhost ~]# cd rabbitmq&#x2F;</span><br><span class="line">[root@localhost rabbitmq]# mkdir data</span><br><span class="line">[root@localhost rabbitmq]# mkdir log</span><br><span class="line">[root@localhost rabbitmq]# vi docker-compose.yml</span><br></pre></td></tr></table></figure><p>docker-compose.yml 内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">version: &#39;2&#39;</span><br><span class="line">services:</span><br><span class="line">    rabbitmq:</span><br><span class="line">       hostname: rabbitmq</span><br><span class="line">       environment:</span><br><span class="line">         RABBITMQ_DEFAULT_VHOST: &quot;xxx&quot;</span><br><span class="line">         RABBITMQ_DEFAULT_USER: &quot;admin&quot;</span><br><span class="line">         RABBITMQ_DEFAULT_PASS: &quot;admin&quot;</span><br><span class="line">       image: &quot;rabbitmq:3-management&quot;</span><br><span class="line">       restart: always</span><br><span class="line">       volumes:</span><br><span class="line">         - &quot;.&#x2F;data:&#x2F;var&#x2F;lib&#x2F;rabbitmq&quot;</span><br><span class="line">         - &quot;.&#x2F;log:&#x2F;var&#x2F;log&#x2F;rabbitmq&#x2F;log&quot;</span><br><span class="line">       ports:</span><br><span class="line">         - &quot;4369:4369&quot;</span><br><span class="line">         - &quot;5672:5672&quot;</span><br><span class="line">         - &quot;15672:15672&quot;</span><br><span class="line">         - &quot;25672:25672&quot;</span><br></pre></td></tr></table></figure><p>启动 <strong>docker</strong> 容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure></p><ul><li>5672:默认的客户端连接的端口</li><li>15672：默认的web管理界面的端口</li></ul><p>访问15672端口出现下面界面代表RabbitMQ安装成功</p><img src="/2020/10/20/mq/rabbitmq-use/rabbit-startup.png" class="" title="RabbitMQ启动"> <p>账号密码为 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RABBITMQ_DEFAULT_USER: &quot;admin&quot;</span><br><span class="line">RABBITMQ_DEFAULT_PASS: &quot;admin&quot;</span><br></pre></td></tr></table></figure><img src="/2020/10/20/mq/rabbitmq-use/rabbit-overview.png" class="" title="RabbitMQ概述"> <h2 id="RabbitMQ-使用"><a href="#RabbitMQ-使用" class="headerlink" title="RabbitMQ 使用"></a>RabbitMQ 使用</h2><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><ul><li>Message: 消息，消息是不具名的，它由消息头和消息体组成。消息体是不透明的，而消息头则由一系列的可选属性组成，这些属性包括routing-key（路由键）、 priority（相对于其他消息的优先权）、 delivery-mode（指出<br>该消息可能需要持久性存储）等。</li><li>Publisher: 消息的生产者，也是一个向交换器发布消息的客户端应用程序</li><li>Exchange: 交换器，用来接收生产者发送的消息并将这些消息路由给服务器中的队列。Exchange有4种类型： direct(默认)， fanout, topic, 和headers，不同类型的Exchange转发消息的策略有所区别</li><li>Queue：消息队列，用来保存消息直到发送给消费者。它是消息的容器，也是消息的终点。一个消息可投入一个或多个队列。消息一直在队列里面，等待消费者连接到这个队列将其取走。</li><li>Binding：绑定，用于消息队列和交换器之间的关联。一个绑定就是基于路由键将交换器和消息队列连<br>接起来的路由规则，所以可以将交换器理解成一个由绑定构成的路由表。Exchange 和Queue的绑定可以是多对多的关系。</li><li>Connection：网络连接，比如一个TCP连接。</li><li>Channel：信道，多路复用连接中的一条独立的双向数据流通道。信道是建立在真实的TCP连接内的虚拟连接， AMQP 命令都是通过信道发出去的，不管是发布消息、订阅队列还是接收消息，这些动作都是通过信道完成。因为对于操作系统来说建立和销毁 TCP 都是非常昂贵的开销，所以引入了信道的概念，以复用一条 TCP 连接。</li><li>Consumer：消息的消费者，表示一个从消息队列中取得消息的客户端应用程序。<br>Virtual Host：虚拟主机，表示一批交换器、消息队列和相关对象。虚拟主机是共享相同的身份认证和加密环境的独立服务器域。每个 vhost 本质上就是一个 mini 版的 RabbitMQ 服务器，拥有自己的队列、交换器、绑定和权限机制。 vhost 是 AMQP 概念的基础，必须在连接时指定，RabbitMQ 默认的 vhost 是 / 。</li></ul><h3 id="几种消息模型"><a href="#几种消息模型" class="headerlink" title="几种消息模型"></a>几种消息模型</h3><img src="/2020/10/20/mq/rabbitmq-use/rabbit-mq-model1.png" class="" title="RabbitMQ消息模型"> <img src="/2020/10/20/mq/rabbitmq-use/rabbit-mq-model2.png" class="" title="RabbitMQ消息模型"> <h4 id="简单模式"><a href="#简单模式" class="headerlink" title="简单模式"></a>简单模式</h4>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;&lt;p&gt;学习下如何使用rabbitMQ&lt;/p&gt;</summary>
    
    
    
    <category term="MQ" scheme="http://blog.rcant.com/categories/MQ/"/>
    
    
    <category term="rabbitmq" scheme="http://blog.rcant.com/tags/rabbitmq/"/>
    
  </entry>
  
  <entry>
    <title>GDB 调试</title>
    <link href="http://blog.rcant.com/2020/10/17/cpp/cpp-gdb/"/>
    <id>http://blog.rcant.com/2020/10/17/cpp/cpp-gdb/</id>
    <published>2020-10-17T03:39:17.000Z</published>
    <updated>2020-10-16T02:24:02.033Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>GDB 调试程序</p><a id="more"></a><h2 id="给个例子程序"><a href="#给个例子程序" class="headerlink" title="给个例子程序"></a>给个例子程序</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include&quot;stdio.h&quot;</span><br><span class="line">int add(int x,int y)</span><br><span class="line">&#123;</span><br><span class="line">        return x+y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">        int p &#x3D; add(6,5);</span><br><span class="line">        printf(&quot;%d\n&quot;,p);</span><br><span class="line">        return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编译-gcc"><a href="#编译-gcc" class="headerlink" title="编译 gcc"></a>编译 gcc</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost cpp]# gcc add.cpp -o add.o</span><br><span class="line">[root@localhost cpp]# ll -al</span><br><span class="line">total 20</span><br><span class="line">drwxr-xr-x. 2 root root    34 Oct 15 02:14 .</span><br><span class="line">drwxr-xr-x. 4 root root    39 Oct 15 00:41 ..</span><br><span class="line">-rw-r--r--. 1 root root   121 Oct 15 00:43 add.cpp</span><br><span class="line">-rwxr-xr-x. 1 root root 12776 Oct 15 02:14 add.o</span><br><span class="line">[root@localhost cpp]#</span><br></pre></td></tr></table></figure><h2 id="进入gdb调试"><a href="#进入gdb调试" class="headerlink" title="进入gdb调试"></a>进入gdb调试</h2><h3 id="1-方法一"><a href="#1-方法一" class="headerlink" title="1. 方法一"></a>1. 方法一</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb $file</span><br></pre></td></tr></table></figure><p>如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost cpp]# gdb add.o</span><br><span class="line">GNU gdb (GDB) Red Hat Enterprise Linux 8.2-11.el8</span><br><span class="line">Copyright (C) 2018 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http:&#x2F;&#x2F;gnu.org&#x2F;licenses&#x2F;gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line">Type &quot;show copying&quot; and &quot;show warranty&quot; for details.</span><br><span class="line">This GDB was configured as &quot;x86_64-redhat-linux-gnu&quot;.</span><br><span class="line">Type &quot;show configuration&quot; for configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;gdb&#x2F;bugs&#x2F;&gt;.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">    &lt;http:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;gdb&#x2F;documentation&#x2F;&gt;.</span><br><span class="line"></span><br><span class="line">For help, type &quot;help&quot;.</span><br><span class="line">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;...</span><br><span class="line">Reading symbols from add.o...(no debugging symbols found)...done.</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure><h3 id="2-方法二"><a href="#2-方法二" class="headerlink" title="2. 方法二"></a>2. 方法二</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gdb </span><br><span class="line">file $file</span><br></pre></td></tr></table></figure><p>先进入 <strong>gdb</strong> 程序，然后调用 <strong>file</strong> 打开文件</p><p>如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost cpp]# gdb</span><br><span class="line">GNU gdb (GDB) Red Hat Enterprise Linux 8.2-11.el8</span><br><span class="line">Copyright (C) 2018 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http:&#x2F;&#x2F;gnu.org&#x2F;licenses&#x2F;gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line">Type &quot;show copying&quot; and &quot;show warranty&quot; for details.</span><br><span class="line">This GDB was configured as &quot;x86_64-redhat-linux-gnu&quot;.</span><br><span class="line">Type &quot;show configuration&quot; for configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;gdb&#x2F;bugs&#x2F;&gt;.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">    &lt;http:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;gdb&#x2F;documentation&#x2F;&gt;.</span><br><span class="line"></span><br><span class="line">For help, type &quot;help&quot;.</span><br><span class="line">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;.</span><br><span class="line">(gdb) file add.o</span><br><span class="line">Reading symbols from add.o...(no debugging symbols found)...done.</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure><p>使用gdb打开文件后 ，使用 <strong>run</strong> 或者 <strong>r</strong> 开始程序的执行，<br>也可以使用 <strong>run parameter</strong> 将参数传递给该程序 </p><h2 id="GDB-命令列表"><a href="#GDB-命令列表" class="headerlink" title="GDB 命令列表"></a>GDB 命令列表</h2><div class="table-container"><table><thead><tr><th>命令</th><th>缩写</th><th>命令说明</th></tr></thead><tbody><tr><td>list</td><td>l</td><td>显示多行源代码 编译选项需要 gcc -g</td></tr><tr><td>break</td><td>b</td><td>设置断点 b main</td></tr><tr><td>info</td><td>i</td><td>描述程序的状态</td></tr><tr><td>run</td><td>r</td><td>开始运行程序</td></tr><tr><td>display</td><td>disp</td><td>跟踪查看某个变量，每次停下来都显示它的值</td></tr><tr><td>step</td><td>s</td><td>执行下一条语句，如果该语句为函数调用，则进入函数执行第一条语句s;相当于其它调试器中的“Step Into (单步跟踪进入)”</td></tr><tr><td>next</td><td>n</td><td>执行下一条语句，如果该语句为函数调用，不会进入函数内部执行(即不会一步步调试函数内部语句);相当于其它调试器中的“Step Over (单步跟踪)”</td></tr><tr><td>print</td><td>p</td><td>打印内部变量值</td></tr><tr><td>continue</td><td>c</td><td>继续程序的运行，直到遇到下一个断点</td></tr><tr><td>set var name =v</td><td></td><td>设置变量值</td></tr><tr><td>start</td><td>st</td><td>开始执行程序,在main函数的第一条语句前停下来</td></tr><tr><td>file</td><td></td><td>装载需要调试的程序</td></tr><tr><td>kill</td><td>k</td><td>终止正在调试的程序</td></tr><tr><td>watch</td><td></td><td>监视变量值的变化</td></tr><tr><td>backtrace</td><td>bt</td><td>查看函数调用的信息(堆栈)</td></tr><tr><td>frame</td><td>f</td><td>查看栈帧</td></tr><tr><td>quit</td><td>q</td><td>退出gdb环境</td></tr></tbody></table></div><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>注意：显示多行源代码 编译选项需要 <strong>gcc -g</strong> </p><p>不要忘了 -g 选项或其它相应的选项，才能将调试信息加到你要调试的程序中</p><p>使用 <strong>gcc -o</strong> 编译 <strong>add.cpp</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost cpp]# gcc -o add.o add.cpp</span><br><span class="line">[root@localhost cpp]# gdb add.o</span><br><span class="line">GNU gdb (GDB) Red Hat Enterprise Linux 8.2-11.el8</span><br><span class="line">Copyright (C) 2018 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http:&#x2F;&#x2F;gnu.org&#x2F;licenses&#x2F;gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line">Type &quot;show copying&quot; and &quot;show warranty&quot; for details.</span><br><span class="line">This GDB was configured as &quot;x86_64-redhat-linux-gnu&quot;.</span><br><span class="line">Type &quot;show configuration&quot; for configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;gdb&#x2F;bugs&#x2F;&gt;.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">    &lt;http:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;gdb&#x2F;documentation&#x2F;&gt;.</span><br><span class="line"></span><br><span class="line">For help, type &quot;help&quot;.</span><br><span class="line">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;...</span><br><span class="line">Reading symbols from add.o...(no debugging symbols found)...done.</span><br><span class="line">(gdb) list</span><br><span class="line">No symbol table is loaded.  Use the &quot;file&quot; command.</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure></p><p>使用 <strong>gcc -g</strong> 编译<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost cpp]# gcc -g -o add.o add.cpp</span><br><span class="line">[root@localhost cpp]# gdb add.o</span><br><span class="line">GNU gdb (GDB) Red Hat Enterprise Linux 8.2-11.el8</span><br><span class="line">Copyright (C) 2018 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http:&#x2F;&#x2F;gnu.org&#x2F;licenses&#x2F;gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line">Type &quot;show copying&quot; and &quot;show warranty&quot; for details.</span><br><span class="line">This GDB was configured as &quot;x86_64-redhat-linux-gnu&quot;.</span><br><span class="line">Type &quot;show configuration&quot; for configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;gdb&#x2F;bugs&#x2F;&gt;.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">    &lt;http:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;gdb&#x2F;documentation&#x2F;&gt;.</span><br><span class="line"></span><br><span class="line">For help, type &quot;help&quot;.</span><br><span class="line">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;...</span><br><span class="line">Reading symbols from add.o...done.</span><br><span class="line">(gdb) l</span><br><span class="line">1       #include&quot;stdio.h&quot;</span><br><span class="line">2       int add(int x,int y)</span><br><span class="line">3       &#123;</span><br><span class="line">4               return x+y;</span><br><span class="line">5       &#125;</span><br><span class="line">6</span><br><span class="line">7       int main()</span><br><span class="line">8       &#123;</span><br><span class="line">9               int p &#x3D; add(6,5);</span><br><span class="line">10              printf(&quot;%d\n&quot;,p);</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure></p><h4 id="list-n"><a href="#list-n" class="headerlink" title="list n"></a><strong>list n</strong></h4><p>显示已第n行为中心的10行代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">(gdb) list 6</span><br><span class="line">1       #include&quot;stdio.h&quot;</span><br><span class="line">2       int add(int x,int y)</span><br><span class="line">3       &#123;</span><br><span class="line">4               return x+y;</span><br><span class="line">5       &#125;</span><br><span class="line">6</span><br><span class="line">7       int main()</span><br><span class="line">8       &#123;</span><br><span class="line">9               int p &#x3D; add(6,5);</span><br><span class="line">10              printf(&quot;%d\n&quot;,p);</span><br><span class="line">(gdb) list 7</span><br><span class="line">2       int add(int x,int y)</span><br><span class="line">3       &#123;</span><br><span class="line">4               return x+y;</span><br><span class="line">5       &#125;</span><br><span class="line">6</span><br><span class="line">7       int main()</span><br><span class="line">8       &#123;</span><br><span class="line">9               int p &#x3D; add(6,5);</span><br><span class="line">10              printf(&quot;%d\n&quot;,p);</span><br><span class="line">11              return 0;</span><br><span class="line">(gdb) list 8</span><br><span class="line">3       &#123;</span><br><span class="line">4               return x+y;</span><br><span class="line">5       &#125;</span><br><span class="line">6</span><br><span class="line">7       int main()</span><br><span class="line">8       &#123;</span><br><span class="line">9               int p &#x3D; add(6,5);</span><br><span class="line">10              printf(&quot;%d\n&quot;,p);</span><br><span class="line">11              return 0;</span><br><span class="line">12      &#125;</span><br><span class="line"></span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure><h4 id="list-functionname"><a href="#list-functionname" class="headerlink" title="list functionname"></a><strong>list functionname</strong></h4><p>显示以functionname的函数为中心的10行代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">(gdb) list main</span><br><span class="line">3       &#123;</span><br><span class="line">4               return x+y;</span><br><span class="line">5       &#125;</span><br><span class="line">6</span><br><span class="line">7       int main()</span><br><span class="line">8       &#123;</span><br><span class="line">9               int p &#x3D; add(6,5);</span><br><span class="line">10              printf(&quot;%d\n&quot;,p);</span><br><span class="line">11              return 0;</span><br><span class="line">12      &#125;</span><br><span class="line">(gdb) list add</span><br><span class="line">1       #include&quot;stdio.h&quot;</span><br><span class="line">2       int add(int x,int y)</span><br><span class="line">3       &#123;</span><br><span class="line">4               return x+y;</span><br><span class="line">5       &#125;</span><br><span class="line">6</span><br><span class="line">7       int main()</span><br><span class="line">8       &#123;</span><br><span class="line">9               int p &#x3D; add(6,5);</span><br><span class="line">10              printf(&quot;%d\n&quot;,p);</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure><h4 id="list-1"><a href="#list-1" class="headerlink" title="list -"></a><strong>list -</strong></h4><p>显示刚才打印过的源代码之前的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(gdb) list main</span><br><span class="line">3       &#123;</span><br><span class="line">4               return x+y;</span><br><span class="line">5       &#125;</span><br><span class="line">6</span><br><span class="line">7       int main()</span><br><span class="line">8       &#123;</span><br><span class="line">9               int p &#x3D; add(6,5);</span><br><span class="line">10              printf(&quot;%d\n&quot;,p);</span><br><span class="line">11              return 0;</span><br><span class="line">12      &#125;</span><br><span class="line">(gdb) list -</span><br><span class="line">1       #include&quot;stdio.h&quot;</span><br><span class="line">2       int add(int x,int y)</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure><h4 id="list-2"><a href="#list-2" class="headerlink" title="list"></a><strong>list</strong></h4><p>在刚才打印过的源代码之后打印10条代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(gdb) list -</span><br><span class="line">1       #include&quot;stdio.h&quot;</span><br><span class="line">2       int add(int x,int y)</span><br><span class="line">(gdb) list</span><br><span class="line">3       &#123;</span><br><span class="line">4               return x+y;</span><br><span class="line">5       &#125;</span><br><span class="line">6</span><br><span class="line">7       int main()</span><br><span class="line">8       &#123;</span><br><span class="line">9               int p &#x3D; add(6,5);</span><br><span class="line">10              printf(&quot;%d\n&quot;,p);</span><br><span class="line">11              return 0;</span><br><span class="line">12      &#125;</span><br><span class="line">(gdb) list</span><br><span class="line">Line number 13 out of range; add.cpp has 12 lines.</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure><h3 id="断点break-b"><a href="#断点break-b" class="headerlink" title="断点break/b"></a>断点break/b</h3><h4 id="break-location"><a href="#break-location" class="headerlink" title="break location"></a>break location</h4><p>location 位置可以为某一行,某函数名或者其它结构的地址</p><p>gdb 会在执行该位置代码之前停下来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">(gdb) list</span><br><span class="line">3       &#123;</span><br><span class="line">4               return x+y;</span><br><span class="line">5       &#125;</span><br><span class="line">6</span><br><span class="line">7       int main()</span><br><span class="line">8       &#123;</span><br><span class="line">9               int p &#x3D; add(6,5);</span><br><span class="line">10              printf(&quot;%d\n&quot;,p);</span><br><span class="line">11              return 0;</span><br><span class="line">12      &#125;</span><br><span class="line">(gdb) b 10</span><br><span class="line">Breakpoint 1 at 0x4005c4: file add.cpp, line 10.</span><br><span class="line">(gdb) r</span><br><span class="line">Starting program: &#x2F;root&#x2F;projects&#x2F;cpp&#x2F;add.o</span><br><span class="line">Missing separate debuginfos, use: yum debuginfo-install glibc-2.28-101.el8.x86_64</span><br><span class="line"></span><br><span class="line">Breakpoint 1, main () at add.cpp:10</span><br><span class="line">10              printf(&quot;%d\n&quot;,p);</span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line">11</span><br><span class="line">[Inferior 1 (process 1957) exited normally]</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure><p>使用 <strong>delete breakpoints</strong> 断点号 删除断点<br>这里的断点号表示的是第几个断点,刚才执行 <strong>break 10</strong> 返回 <strong>Breakpoint 1 at 0x4005c4: file add.cpp, line 10.</strong><br>中的1表示该断点的标号，因此使用 <strong>delete breakpoints 1</strong> 表示删除第10行所定义的断点<br><strong>clear n</strong> 表示清除第n行的断点,因此 <strong>clear 10</strong> 等同于 <strong>delete breakpoints 1</strong><br><strong>disable/enable n</strong> 表示使得编号为n的断点暂时失效或有效</p><h4 id="info-breakpoints-查看断点相关的信息"><a href="#info-breakpoints-查看断点相关的信息" class="headerlink" title="info breakpoints 查看断点相关的信息"></a>info breakpoints 查看断点相关的信息</h4><div class="table-container"><table><thead><tr><th>属性</th><th>含义</th></tr></thead><tbody><tr><td>Num</td><td>断点编号</td></tr><tr><td>Disp</td><td>断点执行一次之后是否有效 kep：有效 dis：无效</td></tr><tr><td>Enb</td><td>当前断点是否有效 y：有效 n：无效</td></tr><tr><td>Address</td><td>内存地址</td></tr><tr><td>What</td><td>位置</td></tr></tbody></table></div><p>如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(gdb) info breakpoints</span><br><span class="line">Num     Type           Disp Enb Address            What</span><br><span class="line">1       breakpoint     keep y   0x00000000004005c4 in main() at add.cpp:10</span><br><span class="line">        breakpoint already hit 1 time</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure><h3 id="display-disp-查看参数值"><a href="#display-disp-查看参数值" class="headerlink" title="display /disp 查看参数值"></a>display /disp 查看参数值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(gdb) b 10</span><br><span class="line">Breakpoint 1 at 0x4005c4: file add.cpp, line 10.</span><br><span class="line">(gdb) r</span><br><span class="line">Starting program: &#x2F;root&#x2F;projects&#x2F;cpp&#x2F;add.o</span><br><span class="line">Missing separate debuginfos, use: yum debuginfo-install glibc-2.28-101.el8.x86_64</span><br><span class="line"></span><br><span class="line">Breakpoint 1, main () at add.cpp:10</span><br><span class="line">10              printf(&quot;%d\n&quot;,p);</span><br><span class="line">(gdb) display p</span><br><span class="line">1: p &#x3D; 11</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure><p>也可以使用 <strong>disable,enable,delete,info</strong> 命令修改及查看其状态,用法与对断点的一样</p><p>也可以使用 undisplay </p><h3 id="step-next-命令"><a href="#step-next-命令" class="headerlink" title="step/next 命令"></a>step/next 命令</h3><h4 id="step-命令"><a href="#step-命令" class="headerlink" title="step 命令"></a>step 命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">(gdb) b main</span><br><span class="line">Breakpoint 2 at 0x4005b2: file add.cpp, line 9.</span><br><span class="line">(gdb) r</span><br><span class="line">The program being debugged has been started already.</span><br><span class="line">Start it from the beginning? (y or n) y</span><br><span class="line">Starting program: &#x2F;root&#x2F;projects&#x2F;cpp&#x2F;add.o</span><br><span class="line"></span><br><span class="line">Breakpoint 2, main () at add.cpp:9</span><br><span class="line">9               int p &#x3D; add(6,5);</span><br><span class="line">1: p &#x3D; 0</span><br><span class="line">(gdb) s</span><br><span class="line">add (x&#x3D;6, y&#x3D;5) at add.cpp:4</span><br><span class="line">4               return x+y;</span><br><span class="line">(gdb) s</span><br><span class="line">5       &#125;</span><br><span class="line">(gdb) s</span><br><span class="line"></span><br><span class="line">Breakpoint 1, main () at add.cpp:10</span><br><span class="line">10              printf(&quot;%d\n&quot;,p);</span><br><span class="line">1: p &#x3D; 11</span><br><span class="line">(gdb) s</span><br><span class="line">11</span><br><span class="line">11              return 0;</span><br><span class="line">1: p &#x3D; 11</span><br><span class="line">(gdb) s</span><br><span class="line">12      &#125;</span><br><span class="line">1: p &#x3D; 11</span><br><span class="line">(gdb) s</span><br><span class="line">0x00007ffff7a356a3 in __libc_start_main () from &#x2F;lib64&#x2F;libc.so.6</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure><h4 id="next-命令"><a href="#next-命令" class="headerlink" title="next 命令"></a>next 命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">(gdb) r</span><br><span class="line">Starting program: &#x2F;root&#x2F;projects&#x2F;cpp&#x2F;add.o</span><br><span class="line"></span><br><span class="line">Breakpoint 2, main () at add.cpp:9</span><br><span class="line">9               int p &#x3D; add(6,5);</span><br><span class="line">1: p &#x3D; 0</span><br><span class="line">(gdb) n</span><br><span class="line"></span><br><span class="line">Breakpoint 1, main () at add.cpp:10</span><br><span class="line">10              printf(&quot;%d\n&quot;,p);</span><br><span class="line">1: p &#x3D; 11</span><br><span class="line">(gdb) n</span><br><span class="line">11</span><br><span class="line">11              return 0;</span><br><span class="line">1: p &#x3D; 11</span><br><span class="line">(gdb) n</span><br><span class="line">12      &#125;</span><br><span class="line">1: p &#x3D; 11</span><br><span class="line">(gdb) n</span><br><span class="line">0x00007ffff7a356a3 in __libc_start_main () from &#x2F;lib64&#x2F;libc.so.6</span><br></pre></td></tr></table></figure><h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><p>可以设置观察点，使得当某表达式发生变化时程序暂停执行。</p><p>执行该命令前保证程序已经运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">(gdb) l</span><br><span class="line">1       #include&quot;stdio.h&quot;</span><br><span class="line">2       int add(int x,int y)</span><br><span class="line">3       &#123;</span><br><span class="line">4               return x+y;</span><br><span class="line">5       &#125;</span><br><span class="line">6</span><br><span class="line">7       int main()</span><br><span class="line">8       &#123;</span><br><span class="line">9               int p &#x3D; add(6,5);</span><br><span class="line">10              printf(&quot;%d\n&quot;,p);</span><br><span class="line">(gdb) l</span><br><span class="line">11              return 0;</span><br><span class="line">12      &#125;</span><br><span class="line">(gdb) b main</span><br><span class="line">Breakpoint 1 at 0x4005b2: file add.cpp, line 9.</span><br><span class="line">(gdb) r</span><br><span class="line">Starting program: &#x2F;root&#x2F;projects&#x2F;cpp&#x2F;add.o</span><br><span class="line">Missing separate debuginfos, use: yum debuginfo-install glibc-2.28-101.el8.x86_64</span><br><span class="line"></span><br><span class="line">Breakpoint 1, main () at add.cpp:9</span><br><span class="line">9               int p &#x3D; add(6,5);</span><br><span class="line">(gdb) watch p</span><br><span class="line">Hardware watchpoint 2: p</span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Hardware watchpoint 2: p</span><br><span class="line"></span><br><span class="line">Old value &#x3D; 0</span><br><span class="line">New value &#x3D; 11</span><br><span class="line">main () at add.cpp:10</span><br><span class="line">10              printf(&quot;%d\n&quot;,p);</span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line">11</span><br><span class="line"></span><br><span class="line">Watchpoint 2 deleted because the program has left the block in</span><br><span class="line">which its expression is valid.</span><br><span class="line">0x00007ffff7a356a3 in __libc_start_main () from &#x2F;lib64&#x2F;libc.so.6</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure></p><h3 id="print命令-whatis命令"><a href="#print命令-whatis命令" class="headerlink" title="print命令 whatis命令"></a>print命令 whatis命令</h3><p>print 表达式：简记为 p ，其中“表达式”可以是任何当前正在被测试程序的有效表达式，比如当前正在调试C语言的程序，那么“表达式”可以是任何C语言的有效表达式，包括数字，变量甚至是函数调用。<br>print a：将显示整数 a 的值<br>print ++a：将把 a 中的值加1,并显示出来<br>print name：将显示字符串 name 的值<br>print gdb_test(22)：将以整数22作为参数调用 gdb_test() 函数<br>print gdb_test(a)：将以变量 a 作为参数调用 gdb_test() 函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">(gdb) l</span><br><span class="line">1       #include&quot;stdio.h&quot;</span><br><span class="line">2       int add(int x,int y)</span><br><span class="line">3       &#123;</span><br><span class="line">4               return x+y;</span><br><span class="line">5       &#125;</span><br><span class="line">6</span><br><span class="line">7       int main()</span><br><span class="line">8       &#123;</span><br><span class="line">9               int p &#x3D; add(6,5);</span><br><span class="line">10              printf(&quot;%d\n&quot;,p);</span><br><span class="line">(gdb)</span><br><span class="line">11              return 0;</span><br><span class="line">12      &#125;</span><br><span class="line">(gdb) break 10</span><br><span class="line">Breakpoint 1 at 0x4005c4: file add.cpp, line 10.</span><br><span class="line">(gdb) r</span><br><span class="line">Starting program: &#x2F;root&#x2F;projects&#x2F;cpp&#x2F;add.o</span><br><span class="line">Missing separate debuginfos, use: yum debuginfo-install glibc-2.28-101.el8.x86_64</span><br><span class="line"></span><br><span class="line">Breakpoint 1, main () at add.cpp:10</span><br><span class="line">10              printf(&quot;%d\n&quot;,p);</span><br><span class="line">(gdb) p p</span><br><span class="line">$1 &#x3D; 11</span><br><span class="line">(gdb) whatis p</span><br><span class="line">type &#x3D; int</span><br><span class="line">(gdb)</span><br><span class="line">&#96;&#96;&#96; </span><br><span class="line"></span><br><span class="line">### set var name&#x3D;value</span><br><span class="line"></span><br><span class="line">在程序运行中动态改变变量的值</span><br></pre></td></tr></table></figure><p>(gdb) p p<br>$4 = 11<br>(gdb) set var p=100<br>(gdb) p p<br>$5 = 100<br>(gdb) set var p=10<br>(gdb) c<br>Continuing.<br>10<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### backtrace</span><br><span class="line"></span><br><span class="line">可使用frame 查看堆栈中某一帧的信息</span><br></pre></td></tr></table></figure><br>Reading symbols from add.o…done.<br>(gdb) b main<br>Breakpoint 1 at 0x4005b2: file add.cpp, line 9.<br>(gdb) r<br>Starting program: /root/projects/cpp/add.o<br>Missing separate debuginfos, use: yum debuginfo-install glibc-2.28-101.el8.x86_64</p><p>Breakpoint 1, main () at add.cpp:9<br>9               int p = add(6,5);<br>(gdb) bt</p><h1 id="0-main-at-add-cpp-9"><a href="#0-main-at-add-cpp-9" class="headerlink" title="0  main () at add.cpp:9"></a>0  main () at add.cpp:9</h1><p>(gdb) s<br>add (x=6, y=5) at add.cpp:4<br>4               return x+y;<br>(gdb) bt</p><h1 id="0-add-x-6-y-5-at-add-cpp-4"><a href="#0-add-x-6-y-5-at-add-cpp-4" class="headerlink" title="0  add (x=6, y=5) at add.cpp:4"></a>0  add (x=6, y=5) at add.cpp:4</h1><h1 id="1-0x00000000004005c1-in-main-at-add-cpp-9"><a href="#1-0x00000000004005c1-in-main-at-add-cpp-9" class="headerlink" title="1  0x00000000004005c1 in main () at add.cpp:9"></a>1  0x00000000004005c1 in main () at add.cpp:9</h1><p>(gdb) s<br>5       }<br>(gdb) s<br>main () at add.cpp:10<br>10              printf(“%d\n”,p);<br>(gdb) s<br>11<br>11              return 0;<br>(gdb) s<br>12      }<br>(gdb) s<br>0x00007ffff7a356a3 in __libc_start_main () from /lib64/libc.so.6<br>(gdb) bt</p><h1 id="0-0x00007ffff7a356a3-in-libc-start-main-from-lib64-libc-so-6"><a href="#0-0x00007ffff7a356a3-in-libc-start-main-from-lib64-libc-so-6" class="headerlink" title="0  0x00007ffff7a356a3 in __libc_start_main () from /lib64/libc.so.6"></a>0  0x00007ffff7a356a3 in __libc_start_main () from /lib64/libc.so.6</h1><h1 id="1-0x00000000004004de-in-start"><a href="#1-0x00000000004004de-in-start" class="headerlink" title="1  0x00000000004004de in _start ()"></a>1  0x00000000004004de in _start ()</h1><p>(gdb) s<br>Single stepping until exit from function __libc_start_main,<br>which has no line number information.<br>[Inferior 1 (process 2029) exited normally]<br>(gdb) bt<br>No stack.<br>(gdb)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## GDB 高级用法</span><br><span class="line"></span><br><span class="line">|命令|缩写|命令说明|</span><br><span class="line">|-|-|-|</span><br><span class="line">|disassemble|disass|反汇编|</span><br><span class="line">|examine|x|查看内存|</span><br><span class="line">|stepi|si|汇编级别的断点定位,会进入汇编和C函数内部;当要进入没有调试信息的库函数调试的时候，用si是唯一的方法|</span><br><span class="line">|finish||si运行到一个函数结束(跳出帧)|</span><br><span class="line">|nexti|ni|汇编级别的断点定位,不会进入汇编和C函数内部|</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### examine&#x2F;x 查看内存</span><br><span class="line"></span><br><span class="line">格式:</span><br></pre></td></tr></table></figure><br>x /nfu <addr><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">其中:</span><br><span class="line"></span><br><span class="line">**n** 表示要显示的内存单元的个数</span><br><span class="line"></span><br><span class="line">**f** 表示显示方式, 可取如下值</span><br><span class="line"></span><br><span class="line">    - x 按十六进制格式显示变量。</span><br><span class="line">    - d 按十进制格式显示变量。</span><br><span class="line">    - t 按二进制格式显示变量。</span><br><span class="line">    - o 按八进制格式显示变量。</span><br><span class="line">    - a 按十六进制格式显示变量。</span><br><span class="line">    - u 按十进制格式显示无符号整型。</span><br><span class="line">    - i 指令地址格式</span><br><span class="line">    - c 按字符格式显示变量。</span><br><span class="line">    - f 按浮点数格式显示变量。</span><br><span class="line"></span><br><span class="line">**u** 表示一个地址单元的长度</span><br><span class="line"></span><br><span class="line">    - b表示单字节，</span><br><span class="line">    - h表示双字节，</span><br><span class="line">    - w表示四字节，</span><br><span class="line">    - g表示八字节</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line"></span><br><span class="line">x&#x2F;20xw 显示20个单元，16进制，4字节每单元</span><br></pre></td></tr></table></figure><br>Reading symbols from add.o…done.<br>(gdb) b main<br>Breakpoint 1 at 0x4005b2: file add.cpp, line 9.<br>(gdb) r<br>Starting program: /root/projects/cpp/add.o<br>Missing separate debuginfos, use: yum debuginfo-install glibc-2.28-101.el8.x86_64</p><p>Breakpoint 1, main () at add.cpp:9<br>9               int p = add(6,5);<br>(gdb) n<br>10              printf(“%d\n”,p);<br>(gdb) x/4xb p<br>0xb:    Cannot access memory at address 0xb<br>(gdb) x/4xb &amp;p<br>0x7fffffffe41c: 0x0b    0x00    0x00    0x00<br>(gdb) x/1xw &amp;p<br>0x7fffffffe41c: 0x0000000b<br>(gdb) x/1dw &amp;p<br>0x7fffffffe41c: 11<br>(gdb) x/9i $pc<br>=&gt; 0x4005c4 <main()+26>:        mov    -0x4(%rbp),%eax<br>   0x4005c7 <main()+29>:        mov    %eax,%esi<br>   0x4005c9 <main()+31>:        mov    $0x400678,%edi<br>   0x4005ce <main()+36>:        mov    $0x0,%eax<br>   0x4005d3 <main()+41>:        callq  0x4004a0 <a href="&#x6d;&#97;&#105;&#x6c;&#x74;&#x6f;&#58;&#x70;&#x72;&#105;&#x6e;&#116;&#x66;&#x40;&#x70;&#x6c;&#116;">&#x70;&#x72;&#105;&#x6e;&#116;&#x66;&#x40;&#x70;&#x6c;&#116;</a><br>   0x4005d8 <main()+46>:        mov    $0x0,%eax<br>   0x4005dd <main()+51>:        leaveq<br>   0x4005de <main()+52>:        retq<br>   0x4005df:    nop<br>(gdb)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### disassemble&#x2F;disass 命令</span><br><span class="line"></span><br><span class="line">#### disass func_name</span><br><span class="line"></span><br><span class="line">反汇编一个函数</span><br></pre></td></tr></table></figure><p>Reading symbols from add.o…done.<br>(gdb) l<br>1       #include”stdio.h”<br>2       int add(int x,int y)<br>3       {<br>4               return x+y;<br>5       }<br>6<br>7       int main()<br>8       {<br>9               int p = add(6,5);<br>10              printf(“%d\n”,p);<br>(gdb) l<br>11              return 0;<br>12      }<br>(gdb) disass add<br>Dump of assembler code for function add(int, int):<br>   0x0000000000400596 &lt;+0&gt;:     push   %rbp<br>   0x0000000000400597 &lt;+1&gt;:     mov    %rsp,%rbp<br>   0x000000000040059a &lt;+4&gt;:     mov    %edi,-0x4(%rbp)<br>   0x000000000040059d &lt;+7&gt;:     mov    %esi,-0x8(%rbp)<br>   0x00000000004005a0 &lt;+10&gt;:    mov    -0x4(%rbp),%edx<br>   0x00000000004005a3 &lt;+13&gt;:    mov    -0x8(%rbp),%eax<br>   0x00000000004005a6 &lt;+16&gt;:    add    %edx,%eax<br>   0x00000000004005a8 &lt;+18&gt;:    pop    %rbp<br>   0x00000000004005a9 &lt;+19&gt;:    retq<br>End of assembler dump.<br>(gdb)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#### disass 不带参数</span><br><span class="line"></span><br><span class="line">disassemble 不带参数，默认的反汇编范围是 所选择帧的pc附近的函数</span><br><span class="line">单个参数, 就是pc, 当然也可以是函数名，因为函数名 也是一个 地址; 这样范围就是该pc附近的函数</span><br><span class="line">两个参数，就是内存地址范围</span><br></pre></td></tr></table></figure><br>(gdb) disass<br>Dump of assembler code for function main():<br>   0x00000000004005aa &lt;+0&gt;:     push   %rbp<br>   0x00000000004005ab &lt;+1&gt;:     mov    %rsp,%rbp<br>   0x00000000004005ae &lt;+4&gt;:     sub    $0x10,%rsp<br>   0x00000000004005b2 &lt;+8&gt;:     mov    $0x5,%esi<br>   0x00000000004005b7 &lt;+13&gt;:    mov    $0x6,%edi<br>   0x00000000004005bc &lt;+18&gt;:    callq  0x400596 <add(int, int)><br>   0x00000000004005c1 &lt;+23&gt;:    mov    %eax,-0x4(%rbp)<br>=&gt; 0x00000000004005c4 &lt;+26&gt;:    mov    -0x4(%rbp),%eax<br>   0x00000000004005c7 &lt;+29&gt;:    mov    %eax,%esi<br>   0x00000000004005c9 &lt;+31&gt;:    mov    $0x400678,%edi<br>   0x00000000004005ce &lt;+36&gt;:    mov    $0x0,%eax<br>   0x00000000004005d3 &lt;+41&gt;:    callq  0x4004a0 <a href="&#109;&#x61;&#105;&#108;&#x74;&#x6f;&#58;&#x70;&#x72;&#105;&#110;&#116;&#x66;&#64;&#x70;&#108;&#x74;">&#x70;&#x72;&#105;&#110;&#116;&#x66;&#64;&#x70;&#108;&#x74;</a><br>   0x00000000004005d8 &lt;+46&gt;:    mov    $0x0,%eax<br>   0x00000000004005dd &lt;+51&gt;:    leaveq<br>   0x00000000004005de &lt;+52&gt;:    retq<br>End of assembler dump.<br>(gdb)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### disassemble 0×0, 0×10</span><br></pre></td></tr></table></figure><br>(gdb) disass $pc,$pc+10<br>Dump of assembler code from 0x40059a to 0x4005a4:<br>=&gt; 0x000000000040059a <add(int, int)+4>:        mov    %edi,-0x4(%rbp)<br>   0x000000000040059d <add(int, int)+7>:        mov    %esi,-0x8(%rbp)<br>   0x00000000004005a0 <add(int, int)+10>:       mov    -0x4(%rbp),%edx<br>   0x00000000004005a3 <add(int, int)+13>:       mov    -0x8(%rbp),%eax<br>End of assembler dump.<br>(gdb)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>(gdb) disass $pc,+10<br>Dump of assembler code from 0x40059a to 0x4005a4:<br>=&gt; 0x000000000040059a <add(int, int)+4>:        mov    %edi,-0x4(%rbp)<br>   0x000000000040059d <add(int, int)+7>:        mov    %esi,-0x8(%rbp)<br>   0x00000000004005a0 <add(int, int)+10>:       mov    -0x4(%rbp),%edx<br>   0x00000000004005a3 <add(int, int)+13>:       mov    -0x8(%rbp),%eax<br>End of assembler dump.<br>(gdb)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">反汇编一段内存地址, 第1个参数是起始地址，第2个是终止地址</span><br><span class="line"></span><br><span class="line">#### 查看内存中的汇编代码</span><br></pre></td></tr></table></figure><br>(gdb) info line main<br>Line 8 of “add.cpp” starts at address 0x4005aa <main()> and ends at 0x4005b2 <main()+8>.<br>(gdb) info line add<br>Line 3 of “add.cpp” starts at address 0x400596 <add(int, int)> and ends at 0x4005a0 <add(int, int)+10>.<br>(gdb) x/30i 0x400596<br>   0x400596 <add(int, int)>:    push   %rbp<br>   0x400597 <add(int, int)+1>:  mov    %rsp,%rbp<br>   0x40059a <add(int, int)+4>:  mov    %edi,-0x4(%rbp)<br>   0x40059d <add(int, int)+7>:  mov    %esi,-0x8(%rbp)<br>   0x4005a0 <add(int, int)+10>: mov    -0x4(%rbp),%edx<br>   0x4005a3 <add(int, int)+13>: mov    -0x8(%rbp),%eax<br>   0x4005a6 <add(int, int)+16>: add    %edx,%eax<br>   0x4005a8 <add(int, int)+18>: pop    %rbp<br>   0x4005a9 <add(int, int)+19>: retq<br>   0x4005aa <main()>:   push   %rbp<br>   0x4005ab <main()+1>: mov    %rsp,%rbp<br>   0x4005ae <main()+4>: sub    $0x10,%rsp<br>   0x4005b2 <main()+8>: mov    $0x5,%esi<br>   0x4005b7 <main()+13>:        mov    $0x6,%edi<br>   0x4005bc <main()+18>:        callq  0x400596 <add(int, int)><br>   0x4005c1 <main()+23>:        mov    %eax,-0x4(%rbp)<br>=&gt; 0x4005c4 <main()+26>:        mov    -0x4(%rbp),%eax<br>   0x4005c7 <main()+29>:        mov    %eax,%esi<br>   0x4005c9 <main()+31>:        mov    $0x400678,%edi<br>   0x4005ce <main()+36>:        mov    $0x0,%eax<br>   0x4005d3 <main()+41>:        callq  0x4004a0 <a href="&#109;&#x61;&#105;&#108;&#116;&#x6f;&#58;&#112;&#114;&#x69;&#x6e;&#116;&#x66;&#x40;&#112;&#108;&#x74;">&#112;&#114;&#x69;&#x6e;&#116;&#x66;&#x40;&#112;&#108;&#x74;</a><br>   0x4005d8 <main()+46>:        mov    $0x0,%eax<br>   0x4005dd <main()+51>:        leaveq<br>   0x4005de <main()+52>:        retq<br>   0x4005df:    nop<br>   0x4005e0 <__libc_csu_init>:  endbr64<br>   0x4005e4 <__libc_csu_init+4>:        push   %r15<br>   0x4005e6 <__libc_csu_init+6>:        mov    %rdx,%r15<br>   0x4005e9 <__libc_csu_init+9>:        push   %r14<br>   0x4005eb <__libc_csu_init+11>:       mov    %rsi,%r14<br>(gdb)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#### 使用 disassemble &#x2F;m func_name</span><br><span class="line"></span><br><span class="line">&#x2F;m 源码和汇编一起排列</span><br></pre></td></tr></table></figure><br>(gdb) disassemble /m main<br>Dump of assembler code for function main():<br>8       {<br>   0x00000000004005aa &lt;+0&gt;:     push   %rbp<br>   0x00000000004005ab &lt;+1&gt;:     mov    %rsp,%rbp<br>   0x00000000004005ae &lt;+4&gt;:     sub    $0x10,%rsp</p><p>9               int p = add(6,5);<br>   0x00000000004005b2 &lt;+8&gt;:     mov    $0x5,%esi<br>   0x00000000004005b7 &lt;+13&gt;:    mov    $0x6,%edi<br>   0x00000000004005bc &lt;+18&gt;:    callq  0x400596 <add(int, int)><br>   0x00000000004005c1 &lt;+23&gt;:    mov    %eax,-0x4(%rbp)</p><p>10              printf(“%d\n”,p);<br>   0x00000000004005c4 &lt;+26&gt;:    mov    -0x4(%rbp),%eax<br>   0x00000000004005c7 &lt;+29&gt;:    mov    %eax,%esi<br>   0x00000000004005c9 &lt;+31&gt;:    mov    $0x400678,%edi<br>   0x00000000004005ce &lt;+36&gt;:    mov    $0x0,%eax<br>   0x00000000004005d3 &lt;+41&gt;:    callq  0x4004a0 <a href="&#109;&#x61;&#x69;&#x6c;&#116;&#x6f;&#x3a;&#112;&#x72;&#105;&#110;&#x74;&#x66;&#64;&#112;&#108;&#x74;">&#112;&#x72;&#105;&#110;&#x74;&#x66;&#64;&#112;&#108;&#x74;</a></p><p>11              return 0;<br>   0x00000000004005d8 &lt;+46&gt;:    mov    $0x0,%eax</p><p>12      }<br>   0x00000000004005dd &lt;+51&gt;:    leaveq<br>   0x00000000004005de &lt;+52&gt;:    retq</p><p>End of assembler dump.<br>(gdb) disassemble /m add<br>Dump of assembler code for function add(int, int):<br>3       {<br>   0x0000000000400596 &lt;+0&gt;:     push   %rbp<br>   0x0000000000400597 &lt;+1&gt;:     mov    %rsp,%rbp<br>=&gt; 0x000000000040059a &lt;+4&gt;:     mov    %edi,-0x4(%rbp)<br>   0x000000000040059d &lt;+7&gt;:     mov    %esi,-0x8(%rbp)</p><p>4               return x+y;<br>   0x00000000004005a0 &lt;+10&gt;:    mov    -0x4(%rbp),%edx<br>   0x00000000004005a3 &lt;+13&gt;:    mov    -0x8(%rbp),%eax<br>   0x00000000004005a6 &lt;+16&gt;:    add    %edx,%eax</p><p>5       }<br>   0x00000000004005a8 &lt;+18&gt;:    pop    %rbp<br>   0x00000000004005a9 &lt;+19&gt;:    retq</p><p>End of assembler dump.<br>(gdb)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 使用 disassemble &#x2F;r func_name</span><br><span class="line"></span><br><span class="line">&#x2F;r 还可以看到16进制代码</span><br></pre></td></tr></table></figure><p>(gdb) disassemble /r main<br>Dump of assembler code for function main():<br>   0x00000000004005aa &lt;+0&gt;:     55      push   %rbp<br>   0x00000000004005ab &lt;+1&gt;:     48 89 e5        mov    %rsp,%rbp<br>   0x00000000004005ae &lt;+4&gt;:     48 83 ec 10     sub    $0x10,%rsp<br>   0x00000000004005b2 &lt;+8&gt;:     be 05 00 00 00  mov    $0x5,%esi<br>   0x00000000004005b7 &lt;+13&gt;:    bf 06 00 00 00  mov    $0x6,%edi<br>   0x00000000004005bc &lt;+18&gt;:    e8 d5 ff ff ff  callq  0x400596 <add(int, int)><br>   0x00000000004005c1 &lt;+23&gt;:    89 45 fc        mov    %eax,-0x4(%rbp)<br>   0x00000000004005c4 &lt;+26&gt;:    8b 45 fc        mov    -0x4(%rbp),%eax<br>   0x00000000004005c7 &lt;+29&gt;:    89 c6   mov    %eax,%esi<br>   0x00000000004005c9 &lt;+31&gt;:    bf 78 06 40 00  mov    $0x400678,%edi<br>   0x00000000004005ce &lt;+36&gt;:    b8 00 00 00 00  mov    $0x0,%eax<br>   0x00000000004005d3 &lt;+41&gt;:    e8 c8 fe ff ff  callq  0x4004a0 <a href="&#109;&#x61;&#105;&#108;&#116;&#111;&#x3a;&#112;&#x72;&#x69;&#x6e;&#x74;&#102;&#64;&#112;&#x6c;&#116;">&#112;&#x72;&#x69;&#x6e;&#x74;&#102;&#64;&#112;&#x6c;&#116;</a><br>   0x00000000004005d8 &lt;+46&gt;:    b8 00 00 00 00  mov    $0x0,%eax<br>   0x00000000004005dd &lt;+51&gt;:    c9      leaveq<br>   0x00000000004005de &lt;+52&gt;:    c3      retq<br>End of assembler dump.<br>(gdb) disassemble /r add<br>Dump of assembler code for function add(int, int):<br>   0x0000000000400596 &lt;+0&gt;:     55      push   %rbp<br>   0x0000000000400597 &lt;+1&gt;:     48 89 e5        mov    %rsp,%rbp<br>=&gt; 0x000000000040059a &lt;+4&gt;:     89 7d fc        mov    %edi,-0x4(%rbp)<br>   0x000000000040059d &lt;+7&gt;:     89 75 f8        mov    %esi,-0x8(%rbp)<br>   0x00000000004005a0 &lt;+10&gt;:    8b 55 fc        mov    -0x4(%rbp),%edx<br>   0x00000000004005a3 &lt;+13&gt;:    8b 45 f8        mov    -0x8(%rbp),%eax<br>   0x00000000004005a6 &lt;+16&gt;:    01 d0   add    %edx,%eax<br>   0x00000000004005a8 &lt;+18&gt;:    5d      pop    %rbp<br>   0x00000000004005a9 &lt;+19&gt;:    c3      retq<br>End of assembler dump.<br>(gdb)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 可以在汇编指令上加断点 </span><br><span class="line"></span><br><span class="line">比如</span><br></pre></td></tr></table></figure><p>Reading symbols from add.o…done.<br>(gdb) disass /m main<br>Dump of assembler code for function main():<br>8       {<br>   0x00000000004005aa &lt;+0&gt;:     push   %rbp<br>   0x00000000004005ab &lt;+1&gt;:     mov    %rsp,%rbp<br>   0x00000000004005ae &lt;+4&gt;:     sub    $0x10,%rsp</p><p>9               int p = add(6,5);<br>   0x00000000004005b2 &lt;+8&gt;:     mov    $0x5,%esi<br>   0x00000000004005b7 &lt;+13&gt;:    mov    $0x6,%edi<br>   0x00000000004005bc &lt;+18&gt;:    callq  0x400596 <add(int, int)><br>   0x00000000004005c1 &lt;+23&gt;:    mov    %eax,-0x4(%rbp)</p><p>10              printf(“%d\n”,p);<br>   0x00000000004005c4 &lt;+26&gt;:    mov    -0x4(%rbp),%eax<br>   0x00000000004005c7 &lt;+29&gt;:    mov    %eax,%esi<br>   0x00000000004005c9 &lt;+31&gt;:    mov    $0x400678,%edi<br>   0x00000000004005ce &lt;+36&gt;:    mov    $0x0,%eax<br>   0x00000000004005d3 &lt;+41&gt;:    callq  0x4004a0 <a href="&#x6d;&#x61;&#105;&#x6c;&#x74;&#x6f;&#x3a;&#112;&#x72;&#105;&#x6e;&#x74;&#x66;&#x40;&#112;&#x6c;&#x74;">&#112;&#x72;&#105;&#x6e;&#x74;&#x66;&#x40;&#112;&#x6c;&#x74;</a></p><p>11              return 0;<br>   0x00000000004005d8 &lt;+46&gt;:    mov    $0x0,%eax</p><p>12      }<br>   0x00000000004005dd &lt;+51&gt;:    leaveq<br>   0x00000000004005de &lt;+52&gt;:    retq</p><p>End of assembler dump.<br>(gdb) b *0x00000000004005ab<br>Breakpoint 1 at 0x4005ab: file add.cpp, line 8.<br>(gdb) r<br>Starting program: /root/projects/cpp/add.o<br>Missing separate debuginfos, use: yum debuginfo-install glibc-2.28-101.el8.x86_64</p><p>Breakpoint 1, 0x00000000004005ab in main () at add.cpp:8<br>8       {<br>(gdb) p $rbp<br>$1 = (void <em>) 0x4005e0 <__libc_csu_init><br>(gdb) p $rsp<br>$2 = (void </em>) 0x7fffffffe420<br>(gdb) si<br>0x00000000004005ae      8       {<br>(gdb) disass main<br>Dump of assembler code for function main():<br>   0x00000000004005aa &lt;+0&gt;:     push   %rbp<br>   0x00000000004005ab &lt;+1&gt;:     mov    %rsp,%rbp<br>=&gt; 0x00000000004005ae &lt;+4&gt;:     sub    $0x10,%rsp<br>   0x00000000004005b2 &lt;+8&gt;:     mov    $0x5,%esi<br>   0x00000000004005b7 &lt;+13&gt;:    mov    $0x6,%edi<br>   0x00000000004005bc &lt;+18&gt;:    callq  0x400596 <add(int, int)><br>   0x00000000004005c1 &lt;+23&gt;:    mov    %eax,-0x4(%rbp)<br>   0x00000000004005c4 &lt;+26&gt;:    mov    -0x4(%rbp),%eax<br>   0x00000000004005c7 &lt;+29&gt;:    mov    %eax,%esi<br>   0x00000000004005c9 &lt;+31&gt;:    mov    $0x400678,%edi<br>   0x00000000004005ce &lt;+36&gt;:    mov    $0x0,%eax<br>   0x00000000004005d3 &lt;+41&gt;:    callq  0x4004a0 <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#112;&#114;&#105;&#x6e;&#116;&#102;&#x40;&#112;&#x6c;&#116;">&#112;&#114;&#105;&#x6e;&#116;&#102;&#x40;&#112;&#x6c;&#116;</a><br>   0x00000000004005d8 &lt;+46&gt;:    mov    $0x0,%eax<br>   0x00000000004005dd &lt;+51&gt;:    leaveq<br>   0x00000000004005de &lt;+52&gt;:    retq<br>End of assembler dump.<br>(gdb) p $rbp<br>$4 = (void <em>) 0x7fffffffe420<br>(gdb) si<br>9               int p = add(6,5);<br>(gdb) p $rsp<br>$5 = (void </em>) 0x7fffffffe410<br>(gdb)<br>```</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;&lt;p&gt;GDB 调试程序&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="http://blog.rcant.com/categories/C/"/>
    
    
    <category term="gdb" scheme="http://blog.rcant.com/tags/gdb/"/>
    
    <category term="c++" scheme="http://blog.rcant.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>汇编程序寄存器的理解</title>
    <link href="http://blog.rcant.com/2020/10/14/asm/asm-register/"/>
    <id>http://blog.rcant.com/2020/10/14/asm/asm-register/</id>
    <published>2020-10-14T03:39:17.000Z</published>
    <updated>2020-10-16T09:16:27.255Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>汇编不属性，现在拿来复习下</p><a id="more"></a><h2 id="寄存器的分类"><a href="#寄存器的分类" class="headerlink" title="寄存器的分类"></a>寄存器的分类</h2><p>通用寄存器</p><div class="table-container"><table><thead><tr><th>寄存器</th><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>AX</td><td></td><td>通常用来保存函数的返回值</td></tr><tr><td>CX</td><td>计数器</td><td>用作计数器</td></tr><tr><td>DX</td><td></td><td></td></tr><tr><td>BX</td><td></td><td></td></tr><tr><td>SP</td><td>栈顶指针寄存器</td><td>保存栈顶地址</td></tr><tr><td>BP</td><td>栈底指针寄存器</td><td>保存栈底地址</td></tr><tr><td>SI</td><td>源变址寄存器</td><td>MOVS 或 STOS等指令</td></tr><tr><td>DI</td><td>目的变址寄存器</td></tr></tbody></table></div><p>16位寄存器：(14个)</p><ul><li>4个数据寄存器(AX,BX,CX,DX)               </li><li>2个变址和指针寄存器(SI,DI)</li><li>2个指针寄存器(SP,BP)</li><li>4个段寄存器(ES,CS,DS,SS)</li><li>1个指令指针寄存器(IP)</li><li>1个标志寄存器(Flags)</li></ul><p>32位寄存器：(16个)</p><ul><li>4个数据寄存器(EAX,EBX,ECX,EDX)     </li><li>2个变址和指针寄存器(ESI,EDI)        </li><li>2个指针寄存器(ESP,EBP)</li><li>6个段寄存器(ES、CS、SS、DS、FS、GS)    </li><li>1个指令指针寄存器(EIP)      </li><li>1个标志寄存器(EFlags)</li></ul><p>64位寄存器</p><ul><li>64位有16个寄存器，32位只有8个。但是32位前8个都有不同的命名，分别是e <em> ，而64位前8个使用了r代替e，也就是r </em>。e开头的寄存器命名依然可以直接运用于相应寄存器的低32位。而剩下的寄存器名则是从r8 - r15，其低位分别用d，w,b指定长度。</li><li>32位使用栈帧来作为传递的参数的保存位置，而64位使用寄存器，分别用rdi,rsi,rdx,rcx,r8,r9作为第1-6个参数。rax作为返回值</li><li>64位没有栈帧的指针，32位用ebp作为栈帧指针，64位取消了这个设定，rbp作为通用寄存器使用</li><li>64位支持一些形式的以PC相关的寻址，而32位只有在jmp的时候才会用到这种寻址方式。</li></ul>  <h2 id="ESP-EBP-寄存器"><a href="#ESP-EBP-寄存器" class="headerlink" title="ESP EBP 寄存器"></a>ESP EBP 寄存器</h2><p>使用IDA 反汇编的时候经常能看到ESP，EBP这种字眼；<br>但是不明所以</p><p>新建一个程序cpp 程序片段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include&quot;stdio.h&quot;</span><br><span class="line">int add(int x,int y)</span><br><span class="line">&#123;</span><br><span class="line">        return x+y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">        int p &#x3D; add(6,5);</span><br><span class="line">        printf(&quot;%d\n&quot;,p);</span><br><span class="line">        return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个程序很简单，就是求两个数的值，然后输出即可。所以首先把它用gcc编译链接成a.out，进入gdb进行调试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost cpp]# gcc add.cpp -o add.o</span><br><span class="line">[root@localhost cpp]# ll -al</span><br><span class="line">total 20</span><br><span class="line">drwxr-xr-x. 2 root root    34 Oct 15 02:14 .</span><br><span class="line">drwxr-xr-x. 4 root root    39 Oct 15 00:41 ..</span><br><span class="line">-rw-r--r--. 1 root root   121 Oct 15 00:43 add.cpp</span><br><span class="line">-rwxr-xr-x. 1 root root 12776 Oct 15 02:14 add.o</span><br><span class="line">[root@localhost cpp]#</span><br></pre></td></tr></table></figure><p>反汇编 disassemble main</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost cpp]# gdb -q add.o</span><br><span class="line">Reading symbols from add.o...(no debugging symbols found)...done.</span><br><span class="line">(gdb) disassemble main</span><br><span class="line">Dump of assembler code for function main:</span><br><span class="line">   0x00000000004005aa &lt;+0&gt;:     push   %rbp</span><br><span class="line">   0x00000000004005ab &lt;+1&gt;:     mov    %rsp,%rbp</span><br><span class="line">   0x00000000004005ae &lt;+4&gt;:     sub    $0x10,%rsp</span><br><span class="line">   0x00000000004005b2 &lt;+8&gt;:     mov    $0x5,%esi</span><br><span class="line">   0x00000000004005b7 &lt;+13&gt;:    mov    $0x6,%edi</span><br><span class="line">   0x00000000004005bc &lt;+18&gt;:    callq  0x400596 &lt;_Z3addii&gt;</span><br><span class="line">   0x00000000004005c1 &lt;+23&gt;:    mov    %eax,-0x4(%rbp)</span><br><span class="line">   0x00000000004005c4 &lt;+26&gt;:    mov    -0x4(%rbp),%eax</span><br><span class="line">   0x00000000004005c7 &lt;+29&gt;:    mov    %eax,%esi</span><br><span class="line">   0x00000000004005c9 &lt;+31&gt;:    mov    $0x400678,%edi</span><br><span class="line">   0x00000000004005ce &lt;+36&gt;:    mov    $0x0,%eax</span><br><span class="line">   0x00000000004005d3 &lt;+41&gt;:    callq  0x4004a0 &lt;printf@plt&gt;</span><br><span class="line">   0x00000000004005d8 &lt;+46&gt;:    mov    $0x0,%eax</span><br><span class="line">   0x00000000004005dd &lt;+51&gt;:    leaveq</span><br><span class="line">   0x00000000004005de &lt;+52&gt;:    retq</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure><p>反汇编 disassemble add</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(gdb) disassemble add</span><br><span class="line">Dump of assembler code for function _Z3addii:</span><br><span class="line">   0x0000000000400596 &lt;+0&gt;:     push   %rbp</span><br><span class="line">   0x0000000000400597 &lt;+1&gt;:     mov    %rsp,%rbp</span><br><span class="line">   0x000000000040059a &lt;+4&gt;:     mov    %edi,-0x4(%rbp)</span><br><span class="line">   0x000000000040059d &lt;+7&gt;:     mov    %esi,-0x8(%rbp)</span><br><span class="line">   0x00000000004005a0 &lt;+10&gt;:    mov    -0x4(%rbp),%edx</span><br><span class="line">   0x00000000004005a3 &lt;+13&gt;:    mov    -0x8(%rbp),%eax</span><br><span class="line">   0x00000000004005a6 &lt;+16&gt;:    add    %edx,%eax</span><br><span class="line">   0x00000000004005a8 &lt;+18&gt;:    pop    %rbp</span><br><span class="line">   0x00000000004005a9 &lt;+19&gt;:    retq</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure><p>这里可以看到Add函数和Main函数反汇编出来的代码</p><p>现在来看下rbp 和rsp 内容的变化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(gdb) b main</span><br><span class="line">Breakpoint 1 at 0x4005ae</span><br><span class="line">(gdb) b add</span><br><span class="line">Breakpoint 2 at 0x40059a</span><br><span class="line">(gdb) r</span><br><span class="line">Starting program: &#x2F;root&#x2F;projects&#x2F;cpp&#x2F;add.o</span><br><span class="line">Missing separate debuginfos, use: yum debuginfo-install glibc-2.28-101.el8.x86_64</span><br><span class="line"></span><br><span class="line">Breakpoint 1, 0x00000000004005ae in main ()</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure><p>BP 为基址寄存器，一般在函数中用来保存进入函数时SP的栈顶基址<br>SP 时栈顶指针，每次指向栈顶</p><p>在函数进入时：<br>push bp  //保存bp指针<br>mov sp,bp //将sp指针传给bp，此时bp指向sp的基地址。这个时候，如果该函数有参数，则[bp-4]则是该子函数的第一个参数，[bp-8]则是该子函数的第二个参数，以此类推，有多少个参数则[bp-4^n]。<br>…..<br>…..<br>函数结束时：<br>pop bp  //恢复原bp的值。<br>ret  //退出子函数</p><h3 id="看这个函数"><a href="#看这个函数" class="headerlink" title="看这个函数"></a>看这个函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">Reading symbols from add.o...done.</span><br><span class="line">(gdb) b main</span><br><span class="line">Breakpoint 1 at 0x4005b2: file add.cpp, line 9.</span><br><span class="line">(gdb) l</span><br><span class="line">1       #include&quot;stdio.h&quot;</span><br><span class="line">2       int add(int x,int y)</span><br><span class="line">3       &#123;</span><br><span class="line">4               return x+y;</span><br><span class="line">5       &#125;</span><br><span class="line">6</span><br><span class="line">7       int main()</span><br><span class="line">8       &#123;</span><br><span class="line">9               int p &#x3D; 4;</span><br><span class="line">10              int i;</span><br><span class="line">(gdb)</span><br><span class="line">11              for(i &#x3D; 1;i&lt;3;i++)</span><br><span class="line">12              &#123;</span><br><span class="line">13                      p &#x3D; add(i,p);</span><br><span class="line">14              &#125;</span><br><span class="line">15              printf(&quot;%d\n&quot;,p);</span><br><span class="line">16              return 0;</span><br><span class="line">17      &#125;</span><br><span class="line">(gdb) p p</span><br><span class="line">No symbol &quot;p&quot; in current context.</span><br><span class="line">(gdb) r</span><br><span class="line">Starting program: &#x2F;root&#x2F;projects&#x2F;cpp&#x2F;add.o</span><br><span class="line">Missing separate debuginfos, use: yum debuginfo-install glibc-2.28-101.el8.x86_64</span><br><span class="line"></span><br><span class="line">Breakpoint 1, main () at add.cpp:9</span><br><span class="line">9               int p &#x3D; 4;</span><br><span class="line">(gdb) p p</span><br><span class="line">$1 &#x3D; 0</span><br><span class="line">(gdb) si</span><br><span class="line">11              for(i &#x3D; 1;i&lt;3;i++)</span><br><span class="line">(gdb) disass main</span><br><span class="line">Dump of assembler code for function main():</span><br><span class="line">   0x00000000004005aa &lt;+0&gt;:     push   %rbp</span><br><span class="line">   0x00000000004005ab &lt;+1&gt;:     mov    %rsp,%rbp</span><br><span class="line">   0x00000000004005ae &lt;+4&gt;:     sub    $0x10,%rsp</span><br><span class="line">   0x00000000004005b2 &lt;+8&gt;:     movl   $0x4,-0x4(%rbp)</span><br><span class="line">&#x3D;&gt; 0x00000000004005b9 &lt;+15&gt;:    movl   $0x1,-0x8(%rbp)</span><br><span class="line">   0x00000000004005c0 &lt;+22&gt;:    cmpl   $0x2,-0x8(%rbp)</span><br><span class="line">   0x00000000004005c4 &lt;+26&gt;:    jg     0x4005de &lt;main()+52&gt;</span><br><span class="line">   0x00000000004005c6 &lt;+28&gt;:    mov    -0x4(%rbp),%edx</span><br><span class="line">   0x00000000004005c9 &lt;+31&gt;:    mov    -0x8(%rbp),%eax</span><br><span class="line">   0x00000000004005cc &lt;+34&gt;:    mov    %edx,%esi</span><br><span class="line">   0x00000000004005ce &lt;+36&gt;:    mov    %eax,%edi</span><br><span class="line">   0x00000000004005d0 &lt;+38&gt;:    callq  0x400596 &lt;add(int, int)&gt;</span><br><span class="line">   0x00000000004005d5 &lt;+43&gt;:    mov    %eax,-0x4(%rbp)</span><br><span class="line">   0x00000000004005d8 &lt;+46&gt;:    addl   $0x1,-0x8(%rbp)</span><br><span class="line">   0x00000000004005dc &lt;+50&gt;:    jmp    0x4005c0 &lt;main()+22&gt;</span><br><span class="line">   0x00000000004005de &lt;+52&gt;:    mov    -0x4(%rbp),%eax</span><br><span class="line">   0x00000000004005e1 &lt;+55&gt;:    mov    %eax,%esi</span><br><span class="line">   0x00000000004005e3 &lt;+57&gt;:    mov    $0x400698,%edi</span><br><span class="line">   0x00000000004005e8 &lt;+62&gt;:    mov    $0x0,%eax</span><br><span class="line">   0x00000000004005ed &lt;+67&gt;:    callq  0x4004a0 &lt;printf@plt&gt;</span><br><span class="line">   0x00000000004005f2 &lt;+72&gt;:    mov    $0x0,%eax</span><br><span class="line">   0x00000000004005f7 &lt;+77&gt;:    leaveq</span><br><span class="line">   0x00000000004005f8 &lt;+78&gt;:    retq</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb) p $p</span><br><span class="line">$2 &#x3D; void</span><br><span class="line">(gdb) p p</span><br><span class="line">$3 &#x3D; 4</span><br><span class="line">(gdb) p &amp;p</span><br><span class="line">$4 &#x3D; (int *) 0x7fffffffe41c</span><br><span class="line">(gdb) p $rbp</span><br><span class="line">$5 &#x3D; (void *) 0x7fffffffe420</span><br><span class="line">(gdb) p &amp;i</span><br><span class="line">$6 &#x3D; (int *) 0x7fffffffe418</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure><p>可以看出 在 Main 函数执行的时候</p><p>先将 $rbp 寄存器的值放入栈中保存起来，防止后续被破坏，因为后面会使用 bp 寄存器</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;&lt;p&gt;汇编不属性，现在拿来复习下&lt;/p&gt;</summary>
    
    
    
    <category term="ASM" scheme="http://blog.rcant.com/categories/ASM/"/>
    
    
    <category term="ASM" scheme="http://blog.rcant.com/tags/ASM/"/>
    
    <category term="寄存器" scheme="http://blog.rcant.com/tags/%E5%AF%84%E5%AD%98%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>汇编调试</title>
    <link href="http://blog.rcant.com/2020/09/27/asm/asm-debug/"/>
    <id>http://blog.rcant.com/2020/09/27/asm/asm-debug/</id>
    <published>2020-09-27T03:39:17.000Z</published>
    <updated>2020-09-27T11:19:53.906Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>汇编</p><a id="more"></a><p>汇编应该如何调试程序</p><p>从哪里入手</p><p>一般看什么</p><p>有哪些调试工具可以使用</p>  <h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><a href="AsyncTest.zip" title="源码下载">点击下载</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;&lt;p&gt;汇编&lt;/p&gt;</summary>
    
    
    
    <category term="ASM" scheme="http://blog.rcant.com/categories/ASM/"/>
    
    
    <category term="ASM" scheme="http://blog.rcant.com/tags/ASM/"/>
    
  </entry>
  
  <entry>
    <title>第一个汇编程序 HelloWorld</title>
    <link href="http://blog.rcant.com/2020/09/25/asm/asm-helloworld/"/>
    <id>http://blog.rcant.com/2020/09/25/asm/asm-helloworld/</id>
    <published>2020-09-25T14:39:17.000Z</published>
    <updated>2020-09-27T11:55:57.911Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>汇编程序的逻辑</p><a id="more"></a><p>简单的汇编程序的结构</p><p>简单的模块</p><p>简单的汇编指令</p><p>一个HelloWorld例子</p><p>如何编译，运行</p><p>```</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;&lt;p&gt;汇编程序的逻辑&lt;/p&gt;</summary>
    
    
    
    <category term="ASM" scheme="http://blog.rcant.com/categories/ASM/"/>
    
    
    <category term="ASM" scheme="http://blog.rcant.com/tags/ASM/"/>
    
  </entry>
  
  <entry>
    <title>Mermaid 使用指南</title>
    <link href="http://blog.rcant.com/2020/09/24/hexo/hexo-mermaid/"/>
    <id>http://blog.rcant.com/2020/09/24/hexo/hexo-mermaid/</id>
    <published>2020-09-24T12:39:17.000Z</published>
    <updated>2020-09-24T12:36:43.525Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>在 MarkDown 中 使用 Mermaid 画流程图很方便，但是需要有一定规则, 做个记录</p><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><ul><li>Node v12.18</li><li>Hexo v4.2.1</li><li>Mermaid(hexo-filter-mermaid-diagrams) v1.0.5</li></ul><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-filter-mermaid-diagrams</span><br></pre></td></tr></table></figure><p>修改配置 site/themes/next/_config.yml</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Mermaid tag</span></span><br><span class="line">mermaid:</span><br><span class="line">  enable: true</span><br><span class="line">  # Available themes: default | dark | forest | neutral</span><br><span class="line">  theme: forest</span><br></pre></td></tr></table></figure><h2 id="使用声明"><a href="#使用声明" class="headerlink" title="使用声明"></a>使用声明</h2><p>在markdown中使用 需要将代码声明在 <strong>mermaid</strong> 代码块中</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="code">```</span>)mermaid</span><br><span class="line">code</span><br><span class="line">(<span class="code">```</span>)</span><br></pre></td></tr></table></figure><blockquote><p>请忽略括号，这里是为了防止转义</p></blockquote><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><h3 id="基础Graph"><a href="#基础Graph" class="headerlink" title="基础Graph"></a>基础Graph</h3><p>graph 需要有声明</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">graph $Ori</span><br></pre></td></tr></table></figure><h4 id="流程图方向"><a href="#流程图方向" class="headerlink" title="流程图方向"></a>流程图方向</h4><div class="table-container"><table><thead><tr><th>代码</th><th>方向</th><th>说明</th></tr></thead><tbody><tr><td>TB/TD</td><td>top to bottom</td><td></td></tr><tr><td>BT</td><td>bottom to top</td><td></td></tr><tr><td>LR</td><td>left to right</td><td></td></tr><tr><td>RL</td><td>right to left</td></tr></tbody></table></div><h5 id="1-示例-TD"><a href="#1-示例-TD" class="headerlink" title="1. 示例 TD"></a>1. 示例 TD</h5>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph TD;</span><br><span class="line"><span class="code">    Start --&gt; Stop</span></span><br></pre></td></tr></table></figure>  <pre class="mermaid">  graph TD;      Start --> Stop</pre><h5 id="2-示例-LR"><a href="#2-示例-LR" class="headerlink" title="2. 示例 LR"></a>2. 示例 LR</h5>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR;</span><br><span class="line"><span class="code">    Start --&gt; Stop</span></span><br></pre></td></tr></table></figure>  <pre class="mermaid">  graph LR;      Start --> Stop</pre><h4 id="节点-图形"><a href="#节点-图形" class="headerlink" title="节点/图形"></a>节点/图形</h4><h5 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR;</span><br><span class="line"><span class="code">    id;</span></span><br></pre></td></tr></table></figure><pre class="mermaid">graph LR;    id;</pre><h5 id="带文本的Node"><a href="#带文本的Node" class="headerlink" title="带文本的Node"></a>带文本的Node</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR;</span><br><span class="line"><span class="code">    id1[This is the text in the box];</span></span><br></pre></td></tr></table></figure><pre class="mermaid">graph LR;    id1[This is the text in the box];</pre><h5 id="圆角Node"><a href="#圆角Node" class="headerlink" title="圆角Node"></a>圆角Node</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR;</span><br><span class="line"><span class="code">    id1(This is the text in the box);</span></span><br></pre></td></tr></table></figure><pre class="mermaid">graph LR;    id1(This is the text in the box);</pre><h5 id="体育场式圆角Node"><a href="#体育场式圆角Node" class="headerlink" title="体育场式圆角Node"></a>体育场式圆角Node</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR;</span><br><span class="line"><span class="code">    id1([This is the text in the box]);</span></span><br></pre></td></tr></table></figure><pre class="mermaid">graph LR;    id1([This is the text in the box]);</pre><h5 id="子程序Node"><a href="#子程序Node" class="headerlink" title="子程序Node"></a>子程序Node</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR;</span><br><span class="line"><span class="code">    id1[[This is the text in the box]];</span></span><br></pre></td></tr></table></figure><pre class="mermaid">graph LR;    id1[[This is the text in the box]];</pre><h5 id="圆柱Node"><a href="#圆柱Node" class="headerlink" title="圆柱Node"></a>圆柱Node</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR;</span><br><span class="line"><span class="code">    id1[(This is the text in the box)];</span></span><br></pre></td></tr></table></figure><pre class="mermaid">graph LR;    id1[(This is the text in the box)];</pre><h5 id="圆Node"><a href="#圆Node" class="headerlink" title="圆Node"></a>圆Node</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR;</span><br><span class="line"><span class="code">    id1((This is the text in the box));</span></span><br></pre></td></tr></table></figure><pre class="mermaid">graph LR;    id1((This is the text in the box));</pre><h5 id="不对称Node-现在只有这一种形式"><a href="#不对称Node-现在只有这一种形式" class="headerlink" title="不对称Node (现在只有这一种形式)"></a>不对称Node (现在只有这一种形式)</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR;</span><br><span class="line"><span class="code">    id1&gt;This is the text in the box];</span></span><br></pre></td></tr></table></figure><pre class="mermaid">graph LR;    id1>This is the text in the box];</pre><h5 id="菱形Node"><a href="#菱形Node" class="headerlink" title="菱形Node"></a>菱形Node</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR;</span><br><span class="line"><span class="code">    id1&#123;This is the text in the box&#125;;</span></span><br></pre></td></tr></table></figure><pre class="mermaid">graph LR;    id1{This is the text in the box};</pre><h5 id="六角形Node"><a href="#六角形Node" class="headerlink" title="六角形Node"></a>六角形Node</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR;</span><br><span class="line"><span class="code">    id1&#123;&#123;This is the text in the box&#125;&#125;;</span></span><br></pre></td></tr></table></figure><p>我的博客不容许我显示这个效果！</p><h5 id="平行四边形Node"><a href="#平行四边形Node" class="headerlink" title="平行四边形Node"></a>平行四边形Node</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR;</span><br><span class="line"><span class="code">    id1[/This is the text in the box/];</span></span><br></pre></td></tr></table></figure><pre class="mermaid">graph LR;    id1[/This is the text in the box/];</pre><h5 id="梯形Node"><a href="#梯形Node" class="headerlink" title="梯形Node"></a>梯形Node</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">graph LR;</span><br><span class="line"><span class="code">    id1[/This is the text in the box\];</span></span><br><span class="line"><span class="code">    id2[\This is the text in the box/];</span></span><br></pre></td></tr></table></figure><pre class="mermaid">graph LR;    id1[/This is the text in the box\];    id2[\This is the text in the box/];</pre><h4 id="节点关系（连线）"><a href="#节点关系（连线）" class="headerlink" title="节点关系（连线）"></a>节点关系（连线）</h4><h4 id="线的长度"><a href="#线的长度" class="headerlink" title="线的长度"></a>线的长度</h4><div class="table-container"><table><thead><tr><th>Length</th><th>1</th><th>2</th><th>3</th></tr></thead><tbody><tr><td>Normal</td><td>—-</td><td>——</td><td>——-</td></tr><tr><td>Normal with arrow</td><td>—&gt;</td><td>—-&gt;</td><td>——&gt;</td></tr><tr><td>Thick</td><td>===</td><td>====</td><td>=====</td></tr><tr><td>Thick with arrow</td><td>==&gt;</td><td>===&gt;</td><td>====&gt;</td></tr><tr><td>Dotted</td><td>-.-</td><td>-..-</td><td>-…-</td></tr><tr><td>Dotted with arrow</td><td>-.-&gt;</td><td>-..-&gt;</td><td>-…-&gt;</td></tr></tbody></table></div><h4 id="线的类型"><a href="#线的类型" class="headerlink" title="线的类型"></a>线的类型</h4><div class="table-container"><table><thead><tr><th>代码</th><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>—-</td><td>普通线段</td><td></td></tr><tr><td>—&gt;</td><td>带箭头</td><td></td></tr><tr><td>===</td><td>粗线</td><td></td></tr><tr><td>==&gt;</td><td>粗线带箭头</td><td></td></tr><tr><td>-.-</td><td>虚线</td><td></td></tr><tr><td>-.-&gt;</td><td>虚线带箭头</td></tr></tbody></table></div><h5 id="普通箭头"><a href="#普通箭头" class="headerlink" title="普通箭头"></a>普通箭头</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line"><span class="code">    A--&gt;B</span></span><br></pre></td></tr></table></figure><pre class="mermaid">graph LR    A-->B</pre><h5 id="直接连线"><a href="#直接连线" class="headerlink" title="直接连线"></a>直接连线</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line"><span class="code">    A --- B</span></span><br></pre></td></tr></table></figure><pre class="mermaid">graph LR    A --- B</pre><h5 id="带文字的连线"><a href="#带文字的连线" class="headerlink" title="带文字的连线"></a>带文字的连线</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line"><span class="code">    A-- This is the text! ---B</span></span><br><span class="line"><span class="code">    C---|This is the text|D</span></span><br></pre></td></tr></table></figure><pre class="mermaid">graph LR    A-- This is the text! ---B    C---|This is the text|D</pre><h5 id="带文字带箭头的连线"><a href="#带文字带箭头的连线" class="headerlink" title="带文字带箭头的连线"></a>带文字带箭头的连线</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line"><span class="code">    A -- text --&gt; B</span></span><br><span class="line"><span class="code">    C --&gt;| text |D</span></span><br></pre></td></tr></table></figure><pre class="mermaid">graph LR    A -- text --> B    C -->| text |D</pre><h5 id="虚线"><a href="#虚线" class="headerlink" title="虚线"></a>虚线</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">   A-.-B;</span><br><span class="line">   C-.-&gt;D;</span><br><span class="line">   E-. text .-&gt; F</span><br><span class="line">   H-.-&gt;|text|G</span><br></pre></td></tr></table></figure><pre class="mermaid">graph LR;   A-.-B;   C-.->D;   E-.text.-> F   H-.->|text|G</pre><h5 id="厚线"><a href="#厚线" class="headerlink" title="厚线"></a>厚线</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">   A===B;</span><br><span class="line">   C==&gt;D;</span><br><span class="line">   E==text==&gt; F</span><br><span class="line">   H==&gt;|text|G</span><br></pre></td></tr></table></figure><pre class="mermaid">graph LR;   A===B;   C==>D;   E==text==> F   H==>|text|G</pre><h5 id="串联"><a href="#串联" class="headerlink" title="串联"></a>串联</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">   A -- text --&gt; B -- text2 --&gt; C</span><br><span class="line">   a --&gt; b &amp; c--&gt; d</span><br></pre></td></tr></table></figure><pre class="mermaid">graph LR   A -- text --> B -- text2 --> C   a --> b & c--> d</pre><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line"><span class="code">    A &amp; B--&gt; C &amp; D</span></span><br></pre></td></tr></table></figure><pre class="mermaid">graph TB    A & B--> C & D</pre><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line"><span class="code">    A --&gt; C</span></span><br><span class="line"><span class="code">    A --&gt; D</span></span><br><span class="line"><span class="code">    B --&gt; C</span></span><br><span class="line"><span class="code">    B --&gt; D</span></span><br></pre></td></tr></table></figure><pre class="mermaid">graph TB    A --> C    A --> D    B --> C    B --> D</pre><h4 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line"><span class="code">    id1["This is the (text) in the box"]</span></span><br></pre></td></tr></table></figure><pre class="mermaid">graph LR    id1["This is the (text) in the box"]</pre><h4 id="子图"><a href="#子图" class="headerlink" title="子图"></a>子图</h4><p>定义</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">subgraph title</span><br><span class="line"><span class="code">    graph definition</span></span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line"><span class="code">    c1--&gt;a2</span></span><br><span class="line"><span class="code">    subgraph one</span></span><br><span class="line"><span class="code">    a1--&gt;a2</span></span><br><span class="line"><span class="code">    end</span></span><br><span class="line"><span class="code">    subgraph two</span></span><br><span class="line"><span class="code">    b1--&gt;b2</span></span><br><span class="line"><span class="code">    end</span></span><br><span class="line"><span class="code">    subgraph three</span></span><br><span class="line"><span class="code">    c1--&gt;c2</span></span><br><span class="line"><span class="code">    end</span></span><br></pre></td></tr></table></figure><pre class="mermaid">graph TB    c1-->a2    subgraph one    a1-->a2    end    subgraph two    b1-->b2    end    subgraph three    c1-->c2    end</pre><p>也可以这样</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line"><span class="code">    c1--&gt;a2</span></span><br><span class="line"><span class="code">    subgraph ide1 [one]</span></span><br><span class="line"><span class="code">    a1--&gt;a2</span></span><br><span class="line"><span class="code">    end</span></span><br></pre></td></tr></table></figure><pre class="mermaid">graph TB    c1-->a2    subgraph ide1 [one]    a1-->a2    end</pre><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>注释以%% 开头</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">%% this is a comment A -- text --&gt; B&#123;node&#125;</span><br><span class="line">   A -- text --&gt; B -- text2 --&gt; C</span><br></pre></td></tr></table></figure><pre class="mermaid">graph LR%% this is a comment A -- text --> B{node}   A -- text --> B -- text2 --> C</pre><h3 id="最后给个例子"><a href="#最后给个例子" class="headerlink" title="最后给个例子"></a>最后给个例子</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line"><span class="code">    A[Hard edge] --&gt;|Link text| B(Round edge)</span></span><br><span class="line"><span class="code">    B --&gt; C&#123;Decision&#125;</span></span><br><span class="line"><span class="code">    C --&gt;|One| D[Result one]</span></span><br><span class="line"><span class="code">    C --&gt;|Two| E[Result two]</span></span><br></pre></td></tr></table></figure><pre class="mermaid">graph LR    A[Hard edge] -->|Link text| B(Round edge)    B --> C{Decision}    C -->|One| D[Result one]    C -->|Two| E[Result two]</pre><p>换个写法</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line"><span class="code">    A[Hard edge];</span></span><br><span class="line"><span class="code">    B(Round edge);</span></span><br><span class="line"><span class="code">    C&#123;Decision&#125;;</span></span><br><span class="line"><span class="code">    D[Result one];</span></span><br><span class="line"><span class="code">    E[Result two];</span></span><br><span class="line"></span><br><span class="line"><span class="code">    A--&gt;|Link text|B;</span></span><br><span class="line"><span class="code">    B--&gt;C;</span></span><br><span class="line"><span class="code">    C--&gt;|One|D;</span></span><br><span class="line"><span class="code">    C--&gt;|Two|E;</span></span><br></pre></td></tr></table></figure><pre class="mermaid">graph TD    A[Hard edge];    B(Round edge);    C{Decision};    D[Result one];    E[Result two];    A-->|Link text|B;    B-->C;    C-->|One|D;    C-->|Two|E;</pre><h2 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h2><ul><li><a href="https://mermaid-js.github.io/mermaid/#/" target="_blank" rel="noopener">Mermaid官网</a></li></ul><h2 id="Hexo博客系列"><a href="#Hexo博客系列" class="headerlink" title="Hexo博客系列"></a>Hexo博客系列</h2><ul><li><a href="/2017/03/01/hexo/hexo-firstblog/" title="Hexo博客搭建">Hexo博客搭建</a>  </li><li><a href="/2017/03/01/hexo/hexo-secordblog/" title="Hexo更换博客样式">Hexo更换博客样式</a>  </li><li><a href="/2020/06/01/hexo/hexo-updatenode/" title="Hexo升级Node版本">Hexo升级Node版本</a>  </li><li><a href="/2020/09/20/hexo/hexo-amp-enable/" title="Hexo AMP 支持">Hexo AMP 支持</a>  </li><li><a href="/2017/03/03/others/markdown-first/" title="MarkDown语法">MarkDown语法</a>  </li><li><a href="/2020/09/24/hexo/hexo-markdown-extends/" title="Hexo-MarkDown扩展">Hexo-MarkDown扩展</a>  </li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;在 MarkDown 中 使用 Mermaid 画流程图很方便，但是需要有一定规则, 做个记录&lt;/p&gt;
&lt;h2 id=&quot;配置环境&quot;&gt;&lt;a href=&quot;#配置环境&quot; class=&quot;headerlink&quot; title=&quot;配置环境&quot;&gt;&lt;/a&gt;配置环境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Node v12.18&lt;/li&gt;
&lt;li&gt;Hexo v4.2.1&lt;/li&gt;
&lt;li&gt;Mermaid(hexo-filter-mermaid-diagrams) v1.0.5&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="hexo" scheme="http://blog.rcant.com/categories/hexo/"/>
    
    
    <category term="mermaid" scheme="http://blog.rcant.com/tags/mermaid/"/>
    
    <category term="markdown" scheme="http://blog.rcant.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hexo MarkDown 扩展</title>
    <link href="http://blog.rcant.com/2020/09/24/hexo/hexo-markdown-extends/"/>
    <id>http://blog.rcant.com/2020/09/24/hexo/hexo-markdown-extends/</id>
    <published>2020-09-24T02:39:17.000Z</published>
    <updated>2020-09-24T12:37:55.895Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>将MarkDown扩展 适应更多编辑的需要</p><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><ul><li>Node</li><li>Git</li></ul><a id="more"></a><h3 id="数学符号"><a href="#数学符号" class="headerlink" title="数学符号"></a>数学符号</h3><h4 id="插件-mathjax"><a href="#插件-mathjax" class="headerlink" title="插件 mathjax"></a>插件 mathjax</h4><h4 id="1-安装插件"><a href="#1-安装插件" class="headerlink" title="1. 安装插件"></a>1. 安装插件</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm un hexo-renderer-marked  // 删除默认markdown渲染模板</span><br><span class="line">npm i hexo-renderer-pandoc  // 使用 pandoc 模板</span><br></pre></td></tr></table></figure><p>我使用pandoc 模板渲染有问题，估计是pandoc和我的next,hexo 版本不兼容</p><p>使用kramed 没问题</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm un hexo-renderer-marked  // 删除默认markdown渲染模板</span><br><span class="line">npm i hexo-renderer-kramed  // 使用 kramed 模板</span><br></pre></td></tr></table></figure><h4 id="2-修改-主题配置-site-themes-next-config-yml"><a href="#2-修改-主题配置-site-themes-next-config-yml" class="headerlink" title="2. 修改 主题配置 site/themes/next/_config.yml"></a>2. 修改 主题配置 <strong>site/themes/next/_config.yml</strong></h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Math Formulas Render Support</span></span><br><span class="line">math:</span><br><span class="line">  # Default (true) will load mathjax / katex script on demand.</span><br><span class="line">  # That is it only render those page which has <span class="code">`mathjax: true`</span> in Front-matter.</span><br><span class="line">  # If you set it to false, it will load mathjax / katex srcipt EVERY PAGE.</span><br><span class="line">  per_page: true</span><br><span class="line"></span><br><span class="line">  # hexo-renderer-pandoc (or hexo-renderer-kramed) required for full MathJax support.</span><br><span class="line">  mathjax:</span><br><span class="line"><span class="code">    enable: true</span></span><br><span class="line"><span class="code">    # See: https://mhchem.github.io/MathJax-mhchem/</span></span><br><span class="line"><span class="code">    mhchem: false</span></span><br><span class="line"></span><br><span class="line">  # hexo-renderer-markdown-it-plus (or hexo-renderer-markdown-it with markdown-it-katex plugin) required for full Katex support.</span><br><span class="line">  katex:</span><br><span class="line"><span class="code">    enable: false</span></span><br><span class="line"><span class="code">    # See: https://github.com/KaTeX/KaTeX/tree/master/contrib/copy-tex</span></span><br><span class="line"><span class="code">    copy_tex: false</span></span><br></pre></td></tr></table></figure><h4 id="3-Post中声明使用-mathjax"><a href="#3-Post中声明使用-mathjax" class="headerlink" title="3. Post中声明使用 mathjax"></a>3. Post中声明使用 mathjax</h4><p>如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: On the Electrodynamics of Moving Bodies</span><br><span class="line">categories: Physics</span><br><span class="line">date: 1905-06-30 12:00:00</span><br><span class="line">mathjax: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h4 id="4-书写规范-示例"><a href="#4-书写规范-示例" class="headerlink" title="4. 书写规范 示例"></a>4. 书写规范 示例</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">i\hbar\frac&#123;\partial&#125;&#123;\partial t&#125;\psi=-\frac&#123;\hbar^2&#125;&#123;2m&#125;\nabla^2\psi+V\psi</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">\begin&#123;eqnarray\*&#125;</span><br><span class="line">\nabla\cdot\vec&#123;E&#125;&amp;=&amp;\frac&#123;\rho&#125;&#123;\epsilon_0&#125;\\\\</span><br><span class="line">\nabla\cdot\vec&#123;B&#125;&amp;=&amp;0\\\\</span><br><span class="line">\nabla\times\vec&#123;E&#125;&amp;=&amp;-\frac&#123;\partial B&#125;&#123;\partial t&#125;\\\\</span><br><span class="line">\nabla\times\vec&#123;B&#125;&amp;=&amp;\mu<span class="emphasis">_0\left(\vec&#123;J&#125;+\epsilon_</span>0\frac&#123;\partial E&#125;&#123;\partial t&#125;\right)\\\\</span><br><span class="line">\end&#123;eqnarray\*&#125;</span><br></pre></td></tr></table></figure><script type="math/tex; mode=display">i\hbar\frac{\partial}{\partial t}\psi=-\frac{\hbar^2}{2m}\nabla^2\psi+V\psi</script><p>\begin{eqnarray*}<br>\nabla\cdot\vec{E}&amp;=&amp;\frac{\rho}{\epsilon_0}\\<br>\nabla\cdot\vec{B}&amp;=&amp;0\\<br>\nabla\times\vec{E}&amp;=&amp;-\frac{\partial B}{\partial t}\\<br>\nabla\times\vec{B}&amp;=&amp;\mu_0\left(\vec{J}+\epsilon_0\frac{\partial E}{\partial t}\right)\\<br>\end{eqnarray*}</p><h4 id="插件KaTeX（未尝试）"><a href="#插件KaTeX（未尝试）" class="headerlink" title="插件KaTeX（未尝试）"></a>插件KaTeX（未尝试）</h4><p>据说比 MathJax 效率高，但支持度不如MathJax</p><h4 id="1-安装插件-1"><a href="#1-安装插件-1" class="headerlink" title="1.  安装插件"></a>1.  安装插件</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm un hexo-renderer-marked --save  // 删除默认markdown渲染模板</span><br><span class="line">npm i hexo-renderer-markdown-it-plus --save // 使用markdown-it-plus 渲染</span><br></pre></td></tr></table></figure><h4 id="2-修改主题配置文件-next-config-yml"><a href="#2-修改主题配置文件-next-config-yml" class="headerlink" title="2. 修改主题配置文件 next/_config.yml"></a>2. 修改主题配置文件 next/_config.yml</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Math Formulas Render Support</span></span><br><span class="line">math:</span><br><span class="line">  enable: true</span><br><span class="line">  # Default (true) will load mathjax / katex script on demand.</span><br><span class="line">  # That is it only render those page which has <span class="code">`mathjax: true`</span> in Front-matter.</span><br><span class="line">  # If you set it to false, it will load mathjax / katex srcipt EVERY PAGE.</span><br><span class="line">  per_page: true #如果这个选项是false，那么每一个网页都会引入公式渲染，这是很浪费的，只需要在需要公式渲染功能的博文md文件的头部，添加一行<span class="code">`mathjax: true`</span>(使用Katex引擎渲染也是在文件头部标记<span class="code">`mathjax: true`</span>，表示支持公式)</span><br><span class="line">  engine: Katex</span><br><span class="line">  #engine: mathjax</span><br><span class="line">  # hexo-renderer-pandoc (or hexo-renderer-kramed) required for full MathJax support.</span><br><span class="line">  mathjax:</span><br><span class="line"><span class="code">    enable: false</span></span><br><span class="line"><span class="code">    # See: https://mhchem.github.io/MathJax-mhchem/</span></span><br><span class="line"><span class="code">    mhchem: false</span></span><br><span class="line"></span><br><span class="line">  # hexo-renderer-markdown-it-plus (or hexo-renderer-markdown-it with markdown-it-katex plugin) required for full Katex support.</span><br><span class="line">  katex:</span><br><span class="line"><span class="code">    enable: true</span></span><br><span class="line"><span class="code">    # See: https://github.com/KaTeX/KaTeX/tree/master/contrib/copy-tex</span></span><br><span class="line"><span class="code">    copy_tex: false</span></span><br></pre></td></tr></table></figure><h3 id="流程图-flow-charts"><a href="#流程图-flow-charts" class="headerlink" title="流程图 flow charts"></a>流程图 flow charts</h3><h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-filter-flowchart</span><br></pre></td></tr></table></figure><h4 id="2-修改配置文件-sitre-config-yml"><a href="#2-修改配置文件-sitre-config-yml" class="headerlink" title="2. 修改配置文件 sitre/_config.yml"></a>2. 修改配置文件 sitre/_config.yml</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">flowchart:</span><br><span class="line">  # raphael:   # optional, the source url of raphael.js</span><br><span class="line">  # flowchart: # optional, the source url of flowchart.js</span><br><span class="line">  options: # options used for <span class="code">`drawSVG`</span></span><br></pre></td></tr></table></figure><h4 id="3-使用声明"><a href="#3-使用声明" class="headerlink" title="3. 使用声明"></a>3. 使用声明</h4><p>在markdown中使用 需要将代码声明在 <strong>flow</strong> 代码块中</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="code">```</span>)flow</span><br><span class="line">code</span><br><span class="line">(<span class="code">```</span>)</span><br></pre></td></tr></table></figure><blockquote><p>请忽略括号，这里是为了防止转义</p></blockquote><h4 id="4-使用示例"><a href="#4-使用示例" class="headerlink" title="4. 使用示例"></a>4. 使用示例</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: Start|past:&gt;http://www.google.com[blank]</span><br><span class="line">e=&gt;end: End:&gt;http://www.google.com</span><br><span class="line">op1=&gt;operation: My Operation|past</span><br><span class="line">op2=&gt;operation: Stuff|current</span><br><span class="line">sub1=&gt;subroutine: My Subroutine|invalid</span><br><span class="line">cond=&gt;condition: Yes</span><br><span class="line">or No?|approved:&gt;http://www.google.com</span><br><span class="line">c2=&gt;condition: Good idea|rejected</span><br><span class="line">io=&gt;inputoutput: catch something...|request</span><br><span class="line"></span><br><span class="line">st-&gt;op1(right)-&gt;cond</span><br><span class="line">cond(yes, right)-&gt;c2</span><br><span class="line">cond(no)-&gt;sub1(left)-&gt;op1</span><br><span class="line">c2(yes)-&gt;io-&gt;e</span><br><span class="line">c2(no)-&gt;op2-&gt;e</span><br></pre></td></tr></table></figure><p>效果</p><div id="flowchart-0" class="flow-chart"></div><h3 id="Sequence-Diagrams（未尝试）"><a href="#Sequence-Diagrams（未尝试）" class="headerlink" title="Sequence Diagrams（未尝试）"></a>Sequence Diagrams（未尝试）</h3><h4 id="1-安装-1"><a href="#1-安装-1" class="headerlink" title="1.  安装"></a>1.  安装</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-filter-sequence</span><br></pre></td></tr></table></figure><h4 id="2-修改配置-site-config-yml"><a href="#2-修改配置-site-config-yml" class="headerlink" title="2. 修改配置 site/_config.yml"></a>2. 修改配置 site/_config.yml</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sequence:</span><br><span class="line">  # webfont:     # optional, the source url of webfontloader.js</span><br><span class="line">  # snap:        # optional, the source url of snap.svg.js</span><br><span class="line">  # underscore:  # optional, the source url of underscore.js</span><br><span class="line">  # sequence:    # optional, the source url of sequence-diagram.js</span><br><span class="line">  # css: # optional, the url for css, such as hand drawn theme </span><br><span class="line">  options: </span><br><span class="line"><span class="code">    theme: </span></span><br><span class="line"><span class="code">    css_class:</span></span><br></pre></td></tr></table></figure><h4 id="3-Sequence声明"><a href="#3-Sequence声明" class="headerlink" title="3. Sequence声明"></a>3. Sequence声明</h4><p>在markdown中使用 需要将代码声明在 <strong>sequence</strong> 代码块中</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="code">```</span>)sequence</span><br><span class="line">code</span><br><span class="line">(<span class="code">```</span>)</span><br></pre></td></tr></table></figure><blockquote><p>请忽略括号，这里是为了防止转义</p></blockquote><h4 id="4-代码示例"><a href="#4-代码示例" class="headerlink" title="4. 代码示例"></a>4. 代码示例</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class="line">Note right of Bob: Bob thinks</span><br><span class="line">Bob--&gt;Alice: I am good thanks!</span><br></pre></td></tr></table></figure><p>效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class="line">Note right of Bob: Bob thinks</span><br><span class="line">Bob--&gt;Alice: I am good thanks!</span><br></pre></td></tr></table></figure><h3 id="流程图时序图-Mermaid"><a href="#流程图时序图-Mermaid" class="headerlink" title="流程图时序图 Mermaid"></a>流程图时序图 Mermaid</h3><h4 id="1-安装-2"><a href="#1-安装-2" class="headerlink" title="1.   安装"></a>1.   安装</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-filter-mermaid-diagrams</span><br></pre></td></tr></table></figure><h4 id="2-修改配置-site-themes-next-config-yml"><a href="#2-修改配置-site-themes-next-config-yml" class="headerlink" title="2. 修改配置 site/themes/next/_config.yml"></a>2. 修改配置 site/themes/next/_config.yml</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Mermaid tag</span></span><br><span class="line">mermaid:</span><br><span class="line">  enable: true</span><br><span class="line">  # Available themes: default | dark | forest | neutral</span><br><span class="line">  theme: forest</span><br></pre></td></tr></table></figure><h4 id="3-Mermaid声明"><a href="#3-Mermaid声明" class="headerlink" title="3. Mermaid声明"></a>3. Mermaid声明</h4><p>在markdown中使用 需要将代码声明在 <strong>mermaid</strong> 代码块中</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="code">```</span>)mermaid</span><br><span class="line">code</span><br><span class="line">(<span class="code">```</span>)</span><br></pre></td></tr></table></figure><blockquote><p>请忽略括号，这里是为了防止转义</p></blockquote><h4 id="4-示例"><a href="#4-示例" class="headerlink" title="4. 示例"></a>4. 示例</h4><h5 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph TD;</span><br><span class="line"><span class="code">    A--&gt;B;</span></span><br><span class="line"><span class="code">    A--&gt;C;</span></span><br><span class="line"><span class="code">    B--&gt;D;</span></span><br><span class="line"><span class="code">    C--&gt;D;</span></span><br></pre></td></tr></table></figure><p>效果图</p><pre class="mermaid">graph TD;    A-->B;    A-->C;    B-->D;    C-->D;</pre><h5 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line"><span class="code">    participant Alice</span></span><br><span class="line"><span class="code">    participant Bob</span></span><br><span class="line"><span class="code">    Alice-&gt;&gt;John: Hello John, how are you?</span></span><br><span class="line"><span class="code">    loop Healthcheck</span></span><br><span class="line"><span class="code">        John-&gt;&gt;John: Fight against hypochondria</span></span><br><span class="line"><span class="code">    end</span></span><br><span class="line"><span class="code">    Note right of John: Rational thoughts &lt;br/&gt;prevail...</span></span><br><span class="line"><span class="code">    John--&gt;&gt;Alice: Great!</span></span><br><span class="line"><span class="code">    John-&gt;&gt;Bob: How about you?</span></span><br><span class="line"><span class="code">    Bob--&gt;&gt;John: Jolly good!</span></span><br></pre></td></tr></table></figure><p>效果图</p><pre class="mermaid">sequenceDiagram    participant Alice    participant Bob    Alice->>John: Hello John, how are you?    loop Healthcheck        John->>John: Fight against hypochondria    end    Note right of John: Rational thoughts <br/>prevail...    John-->>Alice: Great!    John->>Bob: How about you?    Bob-->>John: Jolly good!</pre><h5 id="甘特图"><a href="#甘特图" class="headerlink" title="甘特图"></a>甘特图</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">gantt</span><br><span class="line">dateFormat  YYYY-MM-DD</span><br><span class="line">title Adding GANTT diagram to mermaid</span><br><span class="line"></span><br><span class="line">section A section</span><br><span class="line">Completed task            :done,    des1, 2014-01-06,2014-01-08</span><br><span class="line">Active task               :active,  des2, 2014-01-09, 3d</span><br><span class="line">Future task               :         des3, after des2, 5d</span><br><span class="line">Future task2               :         des4, after des3, 5d</span><br></pre></td></tr></table></figure><p>效果图</p><pre class="mermaid">ganttdateFormat  YYYY-MM-DDtitle Adding GANTT diagram to mermaidsection A sectionCompleted task            :done,    des1, 2014-01-06,2014-01-08Active task               :active,  des2, 2014-01-09, 3dFuture task               :         des3, after des2, 5dFuture task2               :         des4, after des3, 5d</pre><h5 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">Class01 <span class="xml"><span class="tag">&lt;<span class="name">|--</span> <span class="attr">AveryLongClass</span> <span class="attr">:</span> <span class="attr">Cool</span></span></span></span><br><span class="line"><span class="xml">Class03 *-- Class04</span></span><br><span class="line"><span class="xml">Class05 o-- Class06</span></span><br><span class="line"><span class="xml">Class07 .. Class08</span></span><br><span class="line"><span class="xml">Class09 --&gt;</span> C2 : Where am i?</span><br><span class="line">Class09 --* C3</span><br><span class="line">Class09 --|&gt; Class07</span><br><span class="line">Class07 : equals()</span><br><span class="line">Class07 : Object[] elementData</span><br><span class="line">Class01 : size()</span><br><span class="line">Class01 : int chimp</span><br><span class="line">Class01 : int gorilla</span><br><span class="line">Class08 <span class="xml"><span class="tag">&lt;<span class="name">--</span>&gt;</span></span> C2: Cool label</span><br></pre></td></tr></table></figure><p>效果</p><pre class="mermaid">classDiagramClass01 <|-- AveryLongClass : CoolClass03 *-- Class04Class05 o-- Class06Class07 .. Class08Class09 --> C2 : Where am i?Class09 --* C3Class09 --|> Class07Class07 : equals()Class07 : Object[] elementDataClass01 : size()Class01 : int chimpClass01 : int gorillaClass08 <--> C2: Cool label</pre><h5 id="git-图形"><a href="#git-图形" class="headerlink" title="git 图形"></a>git 图形</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">gitGraph:</span><br><span class="line">options</span><br><span class="line">&#123;</span><br><span class="line"><span class="code">    "nodeSpacing": 150,</span></span><br><span class="line"><span class="code">    "nodeRadius": 10</span></span><br><span class="line">&#125;</span><br><span class="line">end</span><br><span class="line">commit</span><br><span class="line">branch newbranch</span><br><span class="line">checkout newbranch</span><br><span class="line">commit</span><br><span class="line">commit</span><br><span class="line">checkout master</span><br><span class="line">commit</span><br><span class="line">commit</span><br><span class="line">merge newbranch</span><br></pre></td></tr></table></figure><p>效果</p><pre class="mermaid">gitGraph:options{    "nodeSpacing": 150,    "nodeRadius": 10}endcommitbranch newbranchcheckout newbranchcommitcommitcheckout mastercommitcommitmerge newbranch</pre><p><a href="https://github.com/webappdevelp/hexo-filter-mermaid-diagrams" target="_blank" rel="noopener">参考</a></p><h3 id="PlantUML"><a href="#PlantUML" class="headerlink" title="PlantUML"></a>PlantUML</h3><h2 id="Hexo博客系列"><a href="#Hexo博客系列" class="headerlink" title="Hexo博客系列"></a>Hexo博客系列</h2><ul><li><a href="/2017/03/01/hexo/hexo-firstblog/" title="Hexo博客搭建">Hexo博客搭建</a>  </li><li><a href="/2017/03/01/hexo/hexo-secordblog/" title="Hexo更换博客样式">Hexo更换博客样式</a>  </li><li><a href="/2020/06/01/hexo/hexo-updatenode/" title="Hexo升级Node版本">Hexo升级Node版本</a>  </li><li><a href="/2020/09/20/hexo/hexo-amp-enable/" title="Hexo AMP 支持">Hexo AMP 支持</a>  </li><li><a href="/2017/03/03/others/markdown-first/" title="MarkDown语法">MarkDown语法</a>  </li><li><a href="/2020/09/24/hexo/hexo-markdown-extends/" title="Hexo-MarkDown扩展">Hexo-MarkDown扩展</a>  <script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: Start|past:>http://www.google.com[blank]e=>end: End:>http://www.google.comop1=>operation: My Operation|pastop2=>operation: Stuff|currentsub1=>subroutine: My Subroutine|invalidcond=>condition: Yesor No?|approved:>http://www.google.comc2=>condition: Good idea|rejectedio=>inputoutput: catch something...|requestst->op1(right)->condcond(yes, right)->c2cond(no)->sub1(left)->op1c2(yes)->io->ec2(no)->op2->e</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;将MarkDown扩展 适应更多编辑的需要&lt;/p&gt;
&lt;h2 id=&quot;配置环境&quot;&gt;&lt;a href=&quot;#配置环境&quot; class=&quot;headerlink&quot; title=&quot;配置环境&quot;&gt;&lt;/a&gt;配置环境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Node&lt;/li&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="hexo" scheme="http://blog.rcant.com/categories/hexo/"/>
    
    
    <category term="hexo" scheme="http://blog.rcant.com/tags/hexo/"/>
    
    <category term="markdown" scheme="http://blog.rcant.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Amp 支持</title>
    <link href="http://blog.rcant.com/2020/09/20/hexo/hexo-amp-enable/"/>
    <id>http://blog.rcant.com/2020/09/20/hexo/hexo-amp-enable/</id>
    <published>2020-09-20T02:39:17.000Z</published>
    <updated>2020-09-24T09:53:46.549Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>Google 的 AMP，能够显著加快网站的移动访问。</p><a id="more"></a><h2 id="AMP-简介"><a href="#AMP-简介" class="headerlink" title="AMP 简介"></a>AMP 简介</h2><blockquote><p>Accelerated Mobile Pages（简称 AMP，意为 “加速移动页面”）是 Google 带领开发的开源项目，目的是为提升移动设备对网站的访问速度。AMP 也可指其派生的标准和库等项目成果。AMP 在 HTML 等广泛使用的网络技术基础上进行改良，它的核心称作 AMP HTML，是 HTML 的一种。服务于技术预览期结束后的 2016 年 2 月正式发布。</p></blockquote><h2 id="Hexo-博客启用方式"><a href="#Hexo-博客启用方式" class="headerlink" title="Hexo 博客启用方式"></a>Hexo 博客启用方式</h2><p>本站采用 NexT 主题，就以此作为演示。</p><h3 id="安装-hexo-generator-amp-插件"><a href="#安装-hexo-generator-amp-插件" class="headerlink" title="安装 hexo-generator-amp 插件"></a>安装 hexo-generator-amp 插件</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-amp --save</span><br></pre></td></tr></table></figure><p>如果不成功，加个 sudo 再试一下。</p><h3 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h3><p>本文使用的是 NexT 主题 v7.8.0。</p><p>打开 <strong>themes/next/layout/_partials/head/</strong> 文件夹中的 <strong>head.swig</strong> 文件。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi themes/next/layout/_partials/head/head.swig</span><br></pre></td></tr></table></figure><p>在文件中添加如下内容。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;%- if is<span class="emphasis">_post() and config.generator_</span>amp %&#125;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"amphtml"</span> <span class="attr">href</span>=<span class="string">"./amp/"</span> /&gt;</span></span></span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure><h4 id="注意-这个版本中有个bug"><a href="#注意-这个版本中有个bug" class="headerlink" title="注意 这个版本中有个bug"></a>注意 这个版本中有个bug</h4><p>利用 <strong>hexo s</strong> 本地测试的时候， <strong>is_post()</strong> 判断没问题，只有在 <strong>Post</strong> <strong>Render</strong> 的时候才会返回True</p><p>但是 <strong>hexo g</strong> 或者 <strong>hexo d</strong> ，所有情况返回的都是 <strong>False</strong></p><p><strong>Bug</strong> 是由于 <strong>Next Theme</strong>  对 <strong>Head</strong> 使用了缓存机制. 只会生成一次 <strong>Head</strong> 后面所有的文章重用这个缓存，导致所有情况返回的都是 <strong>False</strong></p><ul><li><a href="https://github.com/hexojs/hexo/issues/2503" target="_blank" rel="noopener">参考1</a>  </li><li><a href="https://github.com/hexojs/hexo/issues/3483" target="_blank" rel="noopener">参考2</a></li></ul><p>修改方法</p><p>打开 <strong>themes/next/layout/_layout.swig</strong> 文件。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi themes/next/layout/_layout.swig</span><br></pre></td></tr></table></figure><p>将这段修改掉</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; partial('_partials/head/head.swig', &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><br></pre></td></tr></table></figure><p>修改为下面这段 不容许生成缓存</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; partial('_partials/head/head.swig', &#123;&#125;) &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="修改站点配置"><a href="#修改站点配置" class="headerlink" title="修改站点配置"></a>修改站点配置</h3><p>打开站点配置文件 <strong>_config.yml</strong> ，加入以下内容。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">generator_amp:</span><br><span class="line">  templateDir:  amp-template</span><br><span class="line">  assetDistDir: amp-dist</span><br><span class="line">  logo:</span><br><span class="line"><span class="code">    path:   sample/sample-logo.png</span></span><br><span class="line"><span class="code">    width:  600</span></span><br><span class="line"><span class="code">    height: 60</span></span><br><span class="line">  substituteTitleImage:</span><br><span class="line"><span class="code">    path:   sample/sample-substituteTitleImage.png</span></span><br><span class="line"><span class="code">    width:  1024</span></span><br><span class="line"><span class="code">    height: 800</span></span><br><span class="line">  warningLog: false   # To display warning, please set true.</span><br></pre></td></tr></table></figure><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><h3 id="查看效果"><a href="#查看效果" class="headerlink" title="查看效果"></a>查看效果</h3><p>在我的每篇文章地址后加上./amp/ 即可看到效果，以本文为例。</p><img src="/2020/09/20/hexo/hexo-amp-enable/1.png" class="" title="amp页面">  <h3 id="Google-的-AMP-测试"><a href="#Google-的-AMP-测试" class="headerlink" title="Google 的 AMP 测试"></a>Google 的 AMP 测试</h3><blockquote><p>可以使用 Google 的 AMP 测试来测试你的 AMP 网页的有效性。然后你就能放心地将网页提交给 Google 和百度了。</p></blockquote><p>Hexo 页面上显示有Amp链接</p><img src="/2020/09/20/hexo/hexo-amp-enable/2.png" class="" title="amp测试页面">  <p>Amp页面</p><img src="/2020/09/20/hexo/hexo-amp-enable/3.png" class="" title="amp测试页面">  <h2 id="AMP-提交搜索引擎"><a href="#AMP-提交搜索引擎" class="headerlink" title="AMP 提交搜索引擎"></a>AMP 提交搜索引擎</h2><h3 id="AMP-SiteMap"><a href="#AMP-SiteMap" class="headerlink" title="AMP SiteMap"></a>AMP SiteMap</h3><p>SiteMap 支持AMP</p><h3 id="提交给百度"><a href="#提交给百度" class="headerlink" title="提交给百度"></a>提交给百度</h3><ul><li>进入<a href="https://ziyuan.baidu.com/site/index#/" target="_blank" rel="noopener">百度资源搜索平台</a></li><li>管理站点</li><li>移动适配 填写适配规则</li></ul><h3 id="提交给谷歌"><a href="#提交给谷歌" class="headerlink" title="提交给谷歌"></a>提交给谷歌</h3><ul><li>进入<a href="https://search.google.com/search-console/" target="_blank" rel="noopener">谷歌搜索平台</a></li><li>管理站点</li></ul><h3 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h3><p><a href="https://www.iszy.cc/2018/08/26/hexo-enable-amp/" target="_blank" rel="noopener">本站已全面启用 AMP</a></p><h2 id="Hexo博客系列"><a href="#Hexo博客系列" class="headerlink" title="Hexo博客系列"></a>Hexo博客系列</h2><ul><li><a href="/2017/03/01/hexo/hexo-firstblog/" title="Hexo博客搭建">Hexo博客搭建</a>  </li><li><a href="/2017/03/01/hexo/hexo-secordblog/" title="Hexo更换博客样式">Hexo更换博客样式</a>  </li><li><a href="/2020/06/01/hexo/hexo-updatenode/" title="Hexo升级Node版本">Hexo升级Node版本</a>  </li><li><a href="/2020/09/20/hexo/hexo-amp-enable/" title="Hexo AMP 支持">Hexo AMP 支持</a>  </li><li><a href="/2017/03/03/others/markdown-first/" title="MarkDown语法">MarkDown语法</a>  </li><li><a href="/2020/09/24/hexo/hexo-markdown-extends/" title="Hexo-MarkDown扩展">Hexo-MarkDown扩展</a>  </li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;Google 的 AMP，能够显著加快网站的移动访问。&lt;/p&gt;</summary>
    
    
    
    <category term="hexo" scheme="http://blog.rcant.com/categories/hexo/"/>
    
    
    <category term="hexo" scheme="http://blog.rcant.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Unity 编辑器扩展</title>
    <link href="http://blog.rcant.com/2020/09/18/unity/unity-extends/"/>
    <id>http://blog.rcant.com/2020/09/18/unity/unity-extends/</id>
    <published>2020-09-18T03:39:17.000Z</published>
    <updated>2020-09-19T09:35:47.278Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><a id="more"></a><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>文章基于Unity 引擎<br>版本为 v2017.4</p><h2 id="Unity-可扩展编辑区域"><a href="#Unity-可扩展编辑区域" class="headerlink" title="Unity 可扩展编辑区域"></a>Unity 可扩展编辑区域</h2><h3 id="1-Inspector-属性视图"><a href="#1-Inspector-属性视图" class="headerlink" title="1. Inspector (属性视图)"></a>1. <strong>Inspector</strong> (属性视图)</h3><img src="/2020/09/18/unity/unity-extends/extend-inspector.png" class="" title="属性视图">  <h3 id="2-Menu-菜单"><a href="#2-Menu-菜单" class="headerlink" title="2. Menu (菜单)"></a>2. <strong>Menu</strong> (菜单)</h3><p>eg :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[MenuItem(&quot;Duan %g&quot;, false, 101)]</span><br><span class="line">public static void Duan()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/09/18/unity/unity-extends/extend-menu.png" class="" title="菜单">  <h3 id="3-Menu-右键菜单"><a href="#3-Menu-右键菜单" class="headerlink" title="3. Menu(右键菜单)"></a>3. <strong>Menu</strong>(右键菜单)</h3><p>是Menu的一种，需要在Menu之前加上Assets/</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[MenuItem(&quot;Assets&#x2F;导入资源&quot;)]</span><br><span class="line">public static void ImportAssets()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/09/18/unity/unity-extends/extend-rightmenu.png" class="" title="右键菜单">  <h3 id="4-ContextMenu-脚本菜单"><a href="#4-ContextMenu-脚本菜单" class="headerlink" title="4. ContextMenu 脚本菜单"></a>4. <strong>ContextMenu</strong> 脚本菜单</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[ContextMenu(&quot;ContextMenu Test&quot;)]</span><br><span class="line">public void mContextMenu()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/09/18/unity/unity-extends/extend-contextmenu.png" class="" title="右键菜单">  <h2 id="Inspector视图操作"><a href="#Inspector视图操作" class="headerlink" title="Inspector视图操作"></a><strong>Inspector</strong>视图操作</h2><p><strong>Inspector</strong> 对应每个<strong>Mono</strong>脚本</p><p>假设现在有个脚本 <strong>Actor.cs</strong>,<br>这个脚本控制角色行为</p><h3 id="Inspector-修改方式有两种"><a href="#Inspector-修改方式有两种" class="headerlink" title="Inspector 修改方式有两种"></a><strong>Inspector</strong> 修改方式有两种</h3><ol><li><p>修改其对应的 <strong>Actor.cs</strong> </p></li><li><p>自定义<strong>Inspector</strong></p></li></ol><ul><li>创建一个新的Editor类 <strong>ActorEditor</strong> 继承 <strong>Editor</strong></li><li>添加<code>[CustomEditor(typeof(Actor))]</code>注解，告诉编辑器这个类是扩展<strong>Actor</strong>的Inspector。</li><li>覆写<strong>OnInspectorGUI</strong>方法，实现自定义的扩展。</li></ul><h3 id="修改-Actor-cs-调整-Inspector"><a href="#修改-Actor-cs-调整-Inspector" class="headerlink" title="修改 Actor.cs 调整 Inspector"></a>修改 <strong>Actor.cs</strong> 调整 <strong>Inspector</strong></h3><p>假定我们的 <strong>Actor.cs</strong> 如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class Actor : MonoBehaviour &#123;</span><br><span class="line"></span><br><span class="line">    public int actorId;</span><br><span class="line">    public string actorName;</span><br><span class="line">    public int weapon1Id, weapon2Id;</span><br><span class="line">    public int health;</span><br><span class="line">    void Start () &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/09/18/unity/unity-extends/inspector-1.png" class="" title="显示"><h3 id="第一次修改"><a href="#第一次修改" class="headerlink" title="第一次修改"></a>第一次修改</h3><ul><li>actorId和actorName 不想要显示，添加 <strong>[HideInInspector]</strong></li><li>weapon1Id,weapon2Id,health 添加 <strong>[Header(“XXX”)]</strong></li><li>health 使用Range显示 <strong>[Range(0f, 100f)]</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class Actor : MonoBehaviour &#123;</span><br><span class="line">    [HideInInspector]</span><br><span class="line">    public int actorId;</span><br><span class="line">    [HideInInspector]</span><br><span class="line">    public string actorName;</span><br><span class="line"></span><br><span class="line">    [Tooltip(&quot;武器ID&quot;)]</span><br><span class="line">    [Header(&quot;左手武器&quot;)]</span><br><span class="line">    public int weapon1Id;</span><br><span class="line">    </span><br><span class="line">    [Tooltip(&quot;武器ID&quot;)]</span><br><span class="line">    [Header(&quot;右手武器&quot;)]</span><br><span class="line">    public int weapon2Id;</span><br><span class="line">    [Range(0f, 100f)]</span><br><span class="line">    [Header(&quot;血量&quot;)]</span><br><span class="line">    public int health;</span><br><span class="line">    void Start () &#123;</span><br><span class="line">        health &#x3D; 50;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/09/18/unity/unity-extends/inspector-2.png" class="" title="显示"><h3 id="第二次修改-使用自定义-Inspector"><a href="#第二次修改-使用自定义-Inspector" class="headerlink" title="第二次修改 使用自定义 Inspector"></a>第二次修改 使用自定义 <strong>Inspector</strong></h3><p>使用自定义会完全抛弃掉Actor中默认行为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">using UnityEditor;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">[CustomEditor(typeof(Actor))]</span><br><span class="line">public class ActorEditor : Editor</span><br><span class="line">&#123;</span><br><span class="line">    enum WeaponID</span><br><span class="line">    &#123;</span><br><span class="line">        Sword,</span><br><span class="line">        Dagger,</span><br><span class="line">        Bow,</span><br><span class="line">        MagicBook,</span><br><span class="line">        MagicBall,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bool showWeapons;</span><br><span class="line">    Actor actor;</span><br><span class="line"></span><br><span class="line">    void OnEnable()</span><br><span class="line">    &#123;</span><br><span class="line">        actor &#x3D; (Actor)target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public override void OnInspectorGUI()</span><br><span class="line">    &#123;</span><br><span class="line">        serializedObject.Update();</span><br><span class="line">        &#x2F;&#x2F;空两行</span><br><span class="line">        EditorGUILayout.Space();</span><br><span class="line">        EditorGUILayout.Space();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;绘制palyer的基本信息</span><br><span class="line">        EditorGUILayout.LabelField(&quot;Base Info&quot;);</span><br><span class="line"></span><br><span class="line">        showWeapons &#x3D; EditorGUILayout.Foldout(showWeapons, &quot;Weapons&quot;);</span><br><span class="line">        if (showWeapons)</span><br><span class="line">        &#123;</span><br><span class="line">            WeaponID weapon1ID &#x3D; (WeaponID)actor.weapon1Id;</span><br><span class="line">            weapon1ID &#x3D; (WeaponID)EditorGUILayout.EnumPopup(&quot;Weapon 1 ID&quot;, weapon1ID);</span><br><span class="line">            actor.weapon1Id &#x3D; (int)weapon1ID;</span><br><span class="line"></span><br><span class="line">            WeaponID weapon2ID &#x3D; (WeaponID)actor.weapon2Id;</span><br><span class="line">            weapon2ID &#x3D; (WeaponID)EditorGUILayout.EnumPopup(&quot;Weapon 2 ID&quot;, weapon2ID);</span><br><span class="line">            actor.weapon2Id &#x3D; (int)weapon2ID;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;空三行</span><br><span class="line">        EditorGUILayout.Space();</span><br><span class="line">        EditorGUILayout.Space();</span><br><span class="line">        EditorGUILayout.Space();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;使用滑块绘制 Player 生命值</span><br><span class="line">        actor.health &#x3D; (int)EditorGUILayout.Slider(&quot;Health&quot;, actor.health, 0, 100);</span><br><span class="line">        &#x2F;&#x2F;根据生命值设置生命条的背景颜色</span><br><span class="line">        if (actor.health &lt; 20)</span><br><span class="line">        &#123;</span><br><span class="line">            GUI.color &#x3D; Color.red;</span><br><span class="line">        &#125;</span><br><span class="line">        else if (actor.health &gt; 80)</span><br><span class="line">        &#123;</span><br><span class="line">            GUI.color &#x3D; Color.green;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            GUI.color &#x3D; Color.gray;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;指定生命值的宽高</span><br><span class="line">        Rect progressRect &#x3D; GUILayoutUtility.GetRect(50, 50);</span><br><span class="line">        &#x2F;&#x2F;绘制生命条</span><br><span class="line">        EditorGUI.ProgressBar(progressRect, actor.health &#x2F; 100.0f, &quot;Health&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        serializedObject.ApplyModifiedProperties();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/09/18/unity/unity-extends/inspector-3.png" class="" title="显示"><h3 id="Get-Set-在-inspector-中的使用"><a href="#Get-Set-在-inspector-中的使用" class="headerlink" title="Get/Set 在 inspector 中的使用"></a><strong>Get/Set</strong> 在 <strong>inspector</strong> 中的使用</h3><p>两种方法 </p><ul><li><a href="http://www.xuanyusong.com/archives/3406" target="_blank" rel="noopener">使用 自定义<strong>Inspector</strong> </a></li><li><a href="https://github.com/LMNRY/SetProperty" target="_blank" rel="noopener">使用 自定义属性 </a></li></ul><h4 id="使用自定义Inspector"><a href="#使用自定义Inspector" class="headerlink" title="使用自定义Inspector"></a>使用自定义<strong>Inspector</strong></h4><p>在Actor加入Speed</p><p>get/set 使用起来很方便，但是编辑时在Inspector视图中问题就来了，因为get/set的属性即使是public了.但是在Inspector视图中依然不显示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#region get&#x2F;Set</span><br><span class="line">private int _speed;</span><br><span class="line">public int Speed</span><br><span class="line">&#123;</span><br><span class="line">    get</span><br><span class="line">    &#123;</span><br><span class="line">        return _speed;</span><br><span class="line">    &#125;</span><br><span class="line">    set</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(&quot;set :&quot; + value);</span><br><span class="line">        _speed &#x3D; value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#endregion</span><br></pre></td></tr></table></figure><p>给 <strong>_speed</strong> 属性设置 <strong>[SerializeField]</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#region get&#x2F;Set</span><br><span class="line">[SerializeField]</span><br><span class="line">private int _speed;</span><br><span class="line">public int Speed</span><br><span class="line">&#123;</span><br><span class="line">    get</span><br><span class="line">    &#123;</span><br><span class="line">        return _speed;</span><br><span class="line">    &#125;</span><br><span class="line">    set</span><br><span class="line">    &#123;</span><br><span class="line">        if (_speed &#x3D;&#x3D; value)</span><br><span class="line">            return;</span><br><span class="line">        Debug.Log(&quot;set :&quot; + value);</span><br><span class="line">        _speed &#x3D; value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#endregion</span><br></pre></td></tr></table></figure><br>可以在 Inspector 中看到<br>如下</p><img src="/2020/09/18/unity/unity-extends/inspector-getset1.png" class="" title="显示"><p>这里还有问题，这里修改speed,并不会调用Get/Set方法</p><p>[SerializeField]可以让private 的属性在Inspector视图中显示出来。但是不会调用Get/Set。</p><p>使用自定义 <strong>Inspector</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">using UnityEditor;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">[CustomEditor(typeof(Actor))]</span><br><span class="line">public class ActorEditor : Editor</span><br><span class="line">&#123;</span><br><span class="line">    enum WeaponID</span><br><span class="line">    &#123;</span><br><span class="line">        Sword,</span><br><span class="line">        Dagger,</span><br><span class="line">        Bow,</span><br><span class="line">        MagicBook,</span><br><span class="line">        MagicBall,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bool showWeapons;</span><br><span class="line">    Actor actor;</span><br><span class="line"></span><br><span class="line">    void OnEnable()</span><br><span class="line">    &#123;</span><br><span class="line">        actor &#x3D; (Actor)target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public override void OnInspectorGUI()</span><br><span class="line">    &#123;</span><br><span class="line">        serializedObject.Update();</span><br><span class="line">        &#x2F;&#x2F;空两行</span><br><span class="line">        EditorGUILayout.Space();</span><br><span class="line">        EditorGUILayout.Space();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;绘制palyer的基本信息</span><br><span class="line">        EditorGUILayout.LabelField(&quot;Base Info&quot;);</span><br><span class="line"></span><br><span class="line">        showWeapons &#x3D; EditorGUILayout.Foldout(showWeapons, &quot;Weapons&quot;);</span><br><span class="line">        if (showWeapons)</span><br><span class="line">        &#123;</span><br><span class="line">            WeaponID weapon1ID &#x3D; (WeaponID)actor.weapon1Id;</span><br><span class="line">            weapon1ID &#x3D; (WeaponID)EditorGUILayout.EnumPopup(&quot;Weapon 1 ID&quot;, weapon1ID);</span><br><span class="line">            actor.weapon1Id &#x3D; (int)weapon1ID;</span><br><span class="line"></span><br><span class="line">            WeaponID weapon2ID &#x3D; (WeaponID)actor.weapon2Id;</span><br><span class="line">            weapon2ID &#x3D; (WeaponID)EditorGUILayout.EnumPopup(&quot;Weapon 2 ID&quot;, weapon2ID);</span><br><span class="line">            actor.weapon2Id &#x3D; (int)weapon2ID;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;空三行</span><br><span class="line">        EditorGUILayout.Space();</span><br><span class="line">        EditorGUILayout.Space();</span><br><span class="line">        EditorGUILayout.Space();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;使用滑块绘制 Player 生命值</span><br><span class="line">        actor.health &#x3D; (int)EditorGUILayout.Slider(&quot;Health&quot;, actor.health, 0, 100);</span><br><span class="line">        &#x2F;&#x2F;根据生命值设置生命条的背景颜色</span><br><span class="line">        if (actor.health &lt; 20)</span><br><span class="line">        &#123;</span><br><span class="line">            GUI.color &#x3D; Color.red;</span><br><span class="line">        &#125;</span><br><span class="line">        else if (actor.health &gt; 80)</span><br><span class="line">        &#123;</span><br><span class="line">            GUI.color &#x3D; Color.green;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            GUI.color &#x3D; Color.gray;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;指定生命值的宽高</span><br><span class="line">        Rect progressRect &#x3D; GUILayoutUtility.GetRect(50, 50);</span><br><span class="line">        &#x2F;&#x2F;绘制生命条</span><br><span class="line">        EditorGUI.ProgressBar(progressRect, actor.health &#x2F; 100.0f, &quot;Health&quot;);</span><br><span class="line"></span><br><span class="line">        int speed &#x3D; EditorGUILayout.IntField(&quot;Speed&quot;, actor.Speed);</span><br><span class="line">        actor.Speed &#x3D; speed;</span><br><span class="line"></span><br><span class="line">        serializedObject.ApplyModifiedProperties();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/09/18/unity/unity-extends/inspector-getset2.png" class="" title="显示"><img src="/2020/09/18/unity/unity-extends/inspector-getset3.png" class="" title="显示"><h4 id="使用-自定义属性"><a href="#使用-自定义属性" class="headerlink" title="使用 自定义属性"></a>使用 自定义属性</h4><p>待补充 TODO</p><h2 id="2-Menu-菜单-1"><a href="#2-Menu-菜单-1" class="headerlink" title="2. Menu (菜单)"></a>2. <strong>Menu</strong> (菜单)</h2><p>[<strong>MenuItem</strong>]的基本实现：</p><ul><li><em>MenuItem(string path)</em></li></ul><p>参数：</p><p><strong>Path</strong>—为你的菜单项指定菜单和名字的字符串。<strong>Path</strong>参数的格式如下：”<strong>Root Menu/Sub Menu1/Sub Menu2/Item Name [可选的 快捷键]</strong>“ 。</p><p><strong>MenuItem</strong> 属性的用法例子：</p><p>[<strong>MenuItem(“Assets/Create/Create Scriptable Object”)</strong>]<br>Path参数的一些额外注意事项：</p><ul><li>如果首个词是已经存在的菜单名字（”<strong>Assets</strong>“, “<strong>Window</strong>“等），你的菜单项将被添加到这个菜单下（除了<strong>Component</strong>,稍后详细介绍）  </li><li>你必须指定一个根菜单和一个菜单项名字  </li><li>允许在所有菜单名以及菜单项名字中出现空格  </li><li>可以选择在项名字加空格后的地方指定一个按键来设置快捷键（参考Unity的脚本API的 快捷键）</li></ul><p>这个例子代码在<strong>GameObject</strong>菜单创建了一个菜单项，在选中该项时会在场景中创建一个名为”<strong>RedBlue GameObject</strong>“的新的游戏对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[MenuItem (&quot;GameObject&#x2F;Create RedBlue GameObject&quot;)]</span><br><span class="line">private static void CreateRedBlueGameObject ()</span><br><span class="line">&#123;    </span><br><span class="line">    new GameObject (&quot;RedBlue GameObject&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.jianshu.com/p/84e986a8c7e3" target="_blank" rel="noopener">特殊类别参考</a></p><h2 id="3-Menu-右键菜单-1"><a href="#3-Menu-右键菜单-1" class="headerlink" title="3. Menu(右键菜单)"></a>3. <strong>Menu</strong>(右键菜单)</h2><p>同上</p><h2 id="4-ContextMenu-脚本菜单-1"><a href="#4-ContextMenu-脚本菜单-1" class="headerlink" title="4. ContextMenu 脚本菜单"></a>4. <strong>ContextMenu</strong> 脚本菜单</h2><p>略</p><h2 id="本例中-源码下载"><a href="#本例中-源码下载" class="headerlink" title="本例中 源码下载"></a>本例中 源码下载</h2><p><a href="InspectorTest.7z" title="源码下载">源码下载</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;</summary>
    
    
    
    <category term="Unity" scheme="http://blog.rcant.com/categories/Unity/"/>
    
    
    <category term="Unity" scheme="http://blog.rcant.com/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>CSharp Type 类型反射调用</title>
    <link href="http://blog.rcant.com/2020/09/16/csharp/csharp-type/"/>
    <id>http://blog.rcant.com/2020/09/16/csharp/csharp-type/</id>
    <published>2020-09-16T04:12:25.000Z</published>
    <updated>2020-09-16T08:20:03.844Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><a id="more"></a><h2 id="Type-关键字"><a href="#Type-关键字" class="headerlink" title="Type 关键字"></a>Type 关键字</h2><p>CSharp 中所有的类型都是 Type</p><h3 id="获取-Type-的方法有三种"><a href="#获取-Type-的方法有三种" class="headerlink" title="获取 Type 的方法有三种"></a>获取 Type 的方法有三种</h3><ol><li>使用 <strong>typeof</strong> 运算符 </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Type t &#x3D; typeof(int);</span><br></pre></td></tr></table></figure><ol><li>使用 <strong>getType()</strong> 方法</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int i;</span><br><span class="line">Type t &#x3D; i.GetType();</span><br></pre></td></tr></table></figure><ol><li>使用Type类的静态方法 <strong>GetType()</strong> </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Type t &#x3D;Type.GetType(&quot;System.Double&quot;);</span><br></pre></td></tr></table></figure><h3 id="Type的属性"><a href="#Type的属性" class="headerlink" title="Type的属性"></a>Type的属性</h3><div class="table-container"><table><thead><tr><th>属性名</th><th>属性含义</th><th>扩展</th></tr></thead><tbody><tr><td>Name</td><td>类型名</td><td>MyTestType</td></tr><tr><td>FullName</td><td>类型的完全限定名，包括命名空间</td><td>ConsoleApp1.MyTestType</td></tr><tr><td>Namespace</td><td>类型的命名空间</td><td>ConsoleApp1</td></tr><tr><td>BaseType</td><td>直接父类类型</td><td>ConsoleApp1.MyTestParent</td></tr><tr><td>UnderlyingSystemType</td><td>映射类型</td><td>ConsoleApp1.MyTestType</td></tr></tbody></table></div><h3 id="Type的主要方法"><a href="#Type的主要方法" class="headerlink" title="Type的主要方法"></a>Type的主要方法</h3><div class="table-container"><table><thead><tr><th>方法名</th><th>方法含义</th><th>入口参数</th><th>返回值</th><th>扩展</th></tr></thead><tbody><tr><td>GetFields</td><td>获取所有公共字段。</td><td>-</td><td>FieldInfo[]</td><td><code>public int Size;</code></td></tr><tr><td>GetField</td><td>此方法用于搜索具有指定名称的公共字段。</td><td>string</td><td>FieldInfo</td><td>-</td></tr><tr><td>GetProperties</td><td>获取所有公共属性 (get/set)</td><td>-</td><td>PropertyInfo[]</td><td><code>public int Pos { get; set; }</code></td></tr><tr><td>GetPropertie</td><td>此方法用于搜索具有指定名称的公共属性 (get/set)</td><td>string</td><td>PropertyInfo</td><td>-</td></tr><tr><td>GetMethods</td><td>获取所有公共方法[包含(get/set)]</td><td>-</td><td>MethodInfo[]</td><td>包含Get/Set方法 如 get_Pos/set_Pos</td></tr><tr><td>GetMethod</td><td>此方法用于搜索具有指定名称的公共方法[包含get/set]</td><td>string</td><td>MethodInfo</td><td>-</td></tr><tr><td>GetMembers</td><td>获取所有公共成员</td><td>-</td><td>MemberInfo[]</td><td>包含Field / Propertie / Method</td></tr><tr><td>GetMember</td><td>此方法用于搜索具有指定名称的公共成员</td><td>string</td><td>MemberInfo</td><td>-</td></tr></tbody></table></div><h3 id="Type-反射调用"><a href="#Type-反射调用" class="headerlink" title="Type 反射调用"></a>Type 反射调用</h3><h4 id="1-FiledInfo"><a href="#1-FiledInfo" class="headerlink" title="1. FiledInfo"></a>1. FiledInfo</h4><p>使用 <strong>GetValue/SetValue</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public static void Test()</span><br><span class="line">&#123;</span><br><span class="line">    Type myTestType &#x3D; typeof(MyTestType);</span><br><span class="line">    Object myTestInstance &#x3D; new MyTestType();</span><br><span class="line"></span><br><span class="line">    FieldInfo fieldInfo1 &#x3D; myTestType.GetField(&quot;Size&quot;);</span><br><span class="line"></span><br><span class="line">    object f1 &#x3D; fieldInfo1.GetValue(myTestInstance);</span><br><span class="line">    Console.WriteLine(&quot;myTestInstance.Size:&quot; + f1);</span><br><span class="line"></span><br><span class="line">    fieldInfo1.SetValue(myTestInstance, 10);</span><br><span class="line"></span><br><span class="line">    object f2 &#x3D; fieldInfo1.GetValue(myTestInstance);</span><br><span class="line">    Console.WriteLine(&quot;myTestInstance.Size:&quot; + f2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2-PropertyInfo"><a href="#2-PropertyInfo" class="headerlink" title="2. PropertyInfo"></a>2. PropertyInfo</h4><p>使用 <strong>GetValue/SetValue</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public static void Test()</span><br><span class="line">&#123;</span><br><span class="line">    Type myTestType &#x3D; typeof(MyTestType);</span><br><span class="line">    Object myTestInstance &#x3D; new MyTestType();</span><br><span class="line"></span><br><span class="line">    PropertyInfo propertyInfo &#x3D; myTestType.GetProperty(&quot;Pos&quot;);</span><br><span class="line"></span><br><span class="line">    object p1 &#x3D; propertyInfo.GetValue(myTestInstance);</span><br><span class="line">    Console.WriteLine(&quot;myTestInstance.Pos:&quot;+ p1);</span><br><span class="line"></span><br><span class="line">    propertyInfo.SetValue(myTestInstance, 10);</span><br><span class="line">    </span><br><span class="line">    object p2 &#x3D; propertyInfo.GetValue(myTestInstance);</span><br><span class="line">    Console.WriteLine(&quot;myTestInstance.Pos:&quot; + p2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>PropertyInfo</strong> 的 <strong>SetValue</strong> 实际调用的是 <strong>set_XXX</strong> 方法<br><strong>PropertyInfo</strong> 的 <strong>GetValue</strong> 实际调用的是 <strong>get_XXX</strong> 方法</p><p>在一个类中如果定义了一个属性 <strong>XXX(PosParent)</strong> , 就不能再定义 <strong>get_XXX(get_PosParent)/set_XXX(set_PosParent)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public  class MyTestParent</span><br><span class="line">&#123;</span><br><span class="line">        public int SizeParent;</span><br><span class="line">        private int posParent;</span><br><span class="line">        public int PosParent &#123; get &#x3D;&gt; posParent; set &#x3D;&gt; posParent &#x3D; value; &#125;</span><br><span class="line"></span><br><span class="line">        public int mRotationParent;</span><br><span class="line">        </span><br><span class="line">        public int get_PosParent()</span><br><span class="line">        &#123;</span><br><span class="line">            return posParent;</span><br><span class="line">        &#125;</span><br><span class="line">        public void set_PosParent(int v)</span><br><span class="line">        &#123;</span><br><span class="line">            posParent &#x3D; v;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译器会报错</p><img src="/2020/09/16/csharp/csharp-type/1.png" class="" title="CompileError">  <h4 id="3-MethodInfo"><a href="#3-MethodInfo" class="headerlink" title="3. MethodInfo"></a>3. MethodInfo</h4><p>使用 <strong>Invoke</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public static void Test()</span><br><span class="line">&#123;</span><br><span class="line">    Type myTestType &#x3D; typeof(MyTestType);</span><br><span class="line">    Object myTestInstance &#x3D; new MyTestType();</span><br><span class="line"></span><br><span class="line">    MethodInfo getRotaionMethod &#x3D; myTestType.GetMethod(&quot;GetRotation&quot;);</span><br><span class="line">    MethodInfo setRotationMethod &#x3D; myTestType.GetMethod(&quot;SetRotation&quot;);</span><br><span class="line"></span><br><span class="line">    object getRotationRet1 &#x3D; getRotaionMethod.Invoke(myTestInstance,new object[0]);</span><br><span class="line">    Console.WriteLine(&quot;myTestInstance.MethodInfo GetRotation:&quot; + getRotationRet1);</span><br><span class="line"></span><br><span class="line">    setRotationMethod.Invoke(myTestInstance, new object[1]&#123;10&#125;);</span><br><span class="line"></span><br><span class="line">    object getRotationRet2 &#x3D; getRotaionMethod.Invoke(myTestInstance, new object[0]);</span><br><span class="line">    Console.WriteLine(&quot;myTestInstance.MethodInfo  GetRotation:&quot; + getRotationRet2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-MethodInfo-Get-Set"><a href="#4-MethodInfo-Get-Set" class="headerlink" title="4. MethodInfo Get/Set"></a>4. MethodInfo Get/Set</h4><p>使用 <strong>Invoke</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public static void Test()</span><br><span class="line">&#123;</span><br><span class="line">    Type myTestType &#x3D; typeof(MyTestType);</span><br><span class="line">    Object myTestInstance &#x3D; new MyTestType();</span><br><span class="line"></span><br><span class="line">    MethodInfo getPosParentMethod &#x3D; myTestType.GetMethod(&quot;get_PosParent&quot;);</span><br><span class="line">    MethodInfo setPosParentMethod &#x3D; myTestType.GetMethod(&quot;set_PosParent&quot;);</span><br><span class="line"></span><br><span class="line">    object getPosParentRet1 &#x3D; getPosParentMethod.Invoke(myTestInstance, new object[0]);</span><br><span class="line">    Console.WriteLine(&quot;myTestInstance.MethodInfo PosParent:&quot; + getPosParentRet1);</span><br><span class="line"></span><br><span class="line">    setPosParentMethod.Invoke(myTestInstance, new object[1] &#123; 10 &#125;);</span><br><span class="line"></span><br><span class="line">    object getPosParentRet2 &#x3D; getPosParentMethod.Invoke(myTestInstance, new object[0]);</span><br><span class="line">    Console.WriteLine(&quot;myTestInstance.MethodInfo  PosParent:&quot; + getPosParentRet2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例子代码"><a href="#例子代码" class="headerlink" title="例子代码"></a>例子代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Reflection;</span><br><span class="line">using System.Text;</span><br><span class="line"></span><br><span class="line">namespace ConsoleApp1</span><br><span class="line">&#123;</span><br><span class="line">    public  class MyTestParent</span><br><span class="line">    &#123;</span><br><span class="line">        public int SizeParent;&#x2F;&#x2F;FieldInfo 父类子类都可以获取，只要是public</span><br><span class="line">        private int posParent;&#x2F;&#x2F;FieldInfo private 无法获取</span><br><span class="line">        public int PosParent &#123; get &#x3D;&gt; posParent; set &#x3D;&gt; posParent &#x3D; value; &#125;&#x2F;&#x2F; PropertyInfo  get_PosParent,set_PosParent</span><br><span class="line"></span><br><span class="line">        public int mRotationParent;&#x2F;&#x2F;FieldInfo 父类子类都可以获取，只要是public</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;public int get_PosParent()</span><br><span class="line">        &#x2F;&#x2F;&#123;</span><br><span class="line">        &#x2F;&#x2F;    return posParent;</span><br><span class="line">        &#x2F;&#x2F;&#125;</span><br><span class="line">        &#x2F;&#x2F;public void set_PosParent(int v)</span><br><span class="line">        &#x2F;&#x2F;&#123;</span><br><span class="line">        &#x2F;&#x2F;    posParent &#x3D; v;</span><br><span class="line">        &#x2F;&#x2F;&#125;</span><br><span class="line"></span><br><span class="line">        public virtual void SetRotationParent(int r)&#x2F;&#x2F; memberInfo  SetRotationParent</span><br><span class="line">        &#123;</span><br><span class="line">            mRotationParent &#x3D; r;</span><br><span class="line">        &#125;</span><br><span class="line">        public virtual int GetRotationParent()&#x2F;&#x2F; memberInfo  GetRotationParent</span><br><span class="line">        &#123;</span><br><span class="line">            return mRotationParent;</span><br><span class="line">        &#125;</span><br><span class="line">        public override string ToString()</span><br><span class="line">        &#123;</span><br><span class="line">            StringBuilder stringBuilder &#x3D; new StringBuilder();</span><br><span class="line">            stringBuilder.Append(&quot;\nSizeParent:&quot;);</span><br><span class="line">            stringBuilder.Append(SizeParent);</span><br><span class="line">            stringBuilder.Append(&quot;\nPosParent:&quot;);</span><br><span class="line">            stringBuilder.Append(PosParent);</span><br><span class="line">            stringBuilder.Append(&quot;\nRotationParent&quot;);</span><br><span class="line">            stringBuilder.Append(mRotationParent);</span><br><span class="line"></span><br><span class="line">            return stringBuilder.ToString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public class MyTestType:MyTestParent</span><br><span class="line">    &#123;</span><br><span class="line">        #region 使用字段访问 </span><br><span class="line">        public int Size;&#x2F;&#x2F;FieldInfo     public 可以获取</span><br><span class="line">        #endregion</span><br><span class="line"></span><br><span class="line">        #region 使用系统提供的Get&#x2F;Set 设置访问属性</span><br><span class="line">        public int Pos &#123; get; set; &#125;&#x2F;&#x2F; PropertyInfo  get_Pos,set_Pos</span><br><span class="line">        #endregion</span><br><span class="line"></span><br><span class="line">        #region 使用自定义方法 设置属性</span><br><span class="line">        private int mRotation;&#x2F;&#x2F;FieldInfo     private 获取不到</span><br><span class="line"></span><br><span class="line">        public void SetRotation(int r)      &#x2F;&#x2F; memberInfo  SetRotation</span><br><span class="line">        &#123;</span><br><span class="line">            mRotation &#x3D; r;</span><br><span class="line">        &#125;</span><br><span class="line">        public int GetRotation()             &#x2F;&#x2F; memberInfo  GetRotation</span><br><span class="line">        &#123;</span><br><span class="line">            return mRotation;</span><br><span class="line">        &#125;</span><br><span class="line">        #endregion</span><br><span class="line"></span><br><span class="line">        public override string ToString()</span><br><span class="line">        &#123;</span><br><span class="line">            StringBuilder stringBuilder &#x3D; new StringBuilder();</span><br><span class="line">            stringBuilder.Append(&quot;base.ToString:&quot;);</span><br><span class="line">            stringBuilder.Append(base.ToString());</span><br><span class="line">            stringBuilder.Append(&quot;\nSize:&quot;);</span><br><span class="line">            stringBuilder.Append(Size);</span><br><span class="line">            stringBuilder.Append(&quot;\nPos:&quot;);</span><br><span class="line">            stringBuilder.Append(Pos);</span><br><span class="line">            stringBuilder.Append(&quot;\nRotation&quot;);</span><br><span class="line">            stringBuilder.Append(mRotation);</span><br><span class="line"></span><br><span class="line">            return stringBuilder.ToString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public class TypeTest</span><br><span class="line">    &#123;</span><br><span class="line">        public static void Test()</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;Type类型</span><br><span class="line">            Type myTestType &#x3D; typeof(MyTestType);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;一个不明类型的实例</span><br><span class="line">            Object myTestInstance &#x3D; new MyTestType();</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;如何使用这个实例访问 对象属性</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;myTestType.Name:&quot; + myTestType.Name);</span><br><span class="line">            Console.WriteLine(&quot;myTestType.FullName:&quot; + myTestType.FullName);</span><br><span class="line">            Console.WriteLine(&quot;myTestType.Namespace:&quot; + myTestType.Namespace);</span><br><span class="line">            Console.WriteLine(&quot;myTestType.BaseType:&quot; + myTestType.BaseType);</span><br><span class="line">            Console.WriteLine(&quot;myTestType.UnderlyingSystemType:&quot; + myTestType.UnderlyingSystemType);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;fieldInfos&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">            FieldInfo[] fieldInfos &#x3D; myTestType.GetFields();</span><br><span class="line">            for (int i &#x3D; 0,length &#x3D; fieldInfos.Length; i &lt; length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                FieldInfo fieldInfo &#x3D; fieldInfos[i];</span><br><span class="line">                Console.WriteLine(fieldInfo);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">            </span><br><span class="line">            Console.WriteLine(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;FieldInfo Test&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">            FieldInfo fieldInfo1 &#x3D; myTestType.GetField(&quot;Size&quot;);</span><br><span class="line">            object f1 &#x3D; fieldInfo1.GetValue(myTestInstance);</span><br><span class="line">            Console.WriteLine(&quot;myTestInstance.Size:&quot; + f1);</span><br><span class="line">            fieldInfo1.SetValue(myTestInstance, 10);</span><br><span class="line">            object f2 &#x3D; fieldInfo1.GetValue(myTestInstance);</span><br><span class="line">            Console.WriteLine(&quot;myTestInstance.Size:&quot; + f2);</span><br><span class="line">            Console.WriteLine(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;memberInfos&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">            MemberInfo[] memberInfos &#x3D; myTestType.GetMembers();</span><br><span class="line">            for (int i &#x3D; 0, length &#x3D; memberInfos.Length; i &lt; length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                MemberInfo fieldInfo &#x3D; memberInfos[i];</span><br><span class="line">                Console.WriteLine(fieldInfo);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;propertyInfos&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">            PropertyInfo[] propertyInfos &#x3D; myTestType.GetProperties();</span><br><span class="line">            for (int i &#x3D; 0, length &#x3D; propertyInfos.Length; i &lt; length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                PropertyInfo fieldInfo &#x3D; propertyInfos[i];</span><br><span class="line">                Console.WriteLine(fieldInfo);</span><br><span class="line">            &#125;</span><br><span class="line">           </span><br><span class="line">            Console.WriteLine(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;PropertyInfo Invoke&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">            PropertyInfo propertyInfo &#x3D; myTestType.GetProperty(&quot;Pos&quot;);</span><br><span class="line">            </span><br><span class="line">            object p1 &#x3D; propertyInfo.GetValue(myTestInstance);</span><br><span class="line">            Console.WriteLine(&quot;myTestInstance.Pos:&quot;+ p1);</span><br><span class="line">            propertyInfo.SetValue(myTestInstance, 10);</span><br><span class="line">            object p2 &#x3D; propertyInfo.GetValue(myTestInstance);</span><br><span class="line">            Console.WriteLine(&quot;myTestInstance.Pos:&quot; + p2);</span><br><span class="line">            Console.WriteLine(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;methodInfos&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">            MethodInfo[] methodInfos &#x3D; myTestType.GetMethods();</span><br><span class="line">            for (int i &#x3D; 0, length &#x3D; methodInfos.Length; i &lt; length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                MethodInfo fieldInfo &#x3D; methodInfos[i];</span><br><span class="line">                Console.WriteLine(fieldInfo);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;MethodInfo Invoke&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">            MethodInfo getRotaionMethod &#x3D; myTestType.GetMethod(&quot;GetRotation&quot;);</span><br><span class="line">            MethodInfo setRotationMethod &#x3D; myTestType.GetMethod(&quot;SetRotation&quot;);</span><br><span class="line"></span><br><span class="line">            object getRotationRet1 &#x3D; getRotaionMethod.Invoke(myTestInstance,new object[0]);</span><br><span class="line">            Console.WriteLine(&quot;myTestInstance.MethodInfo GetRotation:&quot; + getRotationRet1);</span><br><span class="line"></span><br><span class="line">            setRotationMethod.Invoke(myTestInstance, new object[1]&#123;10&#125;);</span><br><span class="line"></span><br><span class="line">            object getRotationRet2 &#x3D; getRotaionMethod.Invoke(myTestInstance, new object[0]);</span><br><span class="line">            Console.WriteLine(&quot;myTestInstance.MethodInfo  GetRotation:&quot; + getRotationRet2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;MethodInfo Get&#x2F;Set Invoke&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">            MethodInfo getPosParentMethod &#x3D; myTestType.GetMethod(&quot;get_PosParent&quot;);</span><br><span class="line">            MethodInfo setPosParentMethod &#x3D; myTestType.GetMethod(&quot;set_PosParent&quot;);</span><br><span class="line"></span><br><span class="line">            object getPosParentRet1 &#x3D; getPosParentMethod.Invoke(myTestInstance, new object[0]);</span><br><span class="line">            Console.WriteLine(&quot;myTestInstance.MethodInfo PosParent:&quot; + getPosParentRet1);</span><br><span class="line"></span><br><span class="line">            setPosParentMethod.Invoke(myTestInstance, new object[1] &#123; 10 &#125;);</span><br><span class="line"></span><br><span class="line">            object getPosParentRet2 &#x3D; getPosParentMethod.Invoke(myTestInstance, new object[0]);</span><br><span class="line">            Console.WriteLine(&quot;myTestInstance.MethodInfo  PosParent:&quot; + getPosParentRet2);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;myTestInstance:&quot; + myTestInstance);</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><img src="/2020/09/16/csharp/csharp-type/2.png" class="" title="Result">  ]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;</summary>
    
    
    
    <category term="CSharp" scheme="http://blog.rcant.com/categories/CSharp/"/>
    
    
    <category term="CSharp" scheme="http://blog.rcant.com/tags/CSharp/"/>
    
    <category term="Reflect" scheme="http://blog.rcant.com/tags/Reflect/"/>
    
  </entry>
  
  <entry>
    <title>CSharp 单元测试</title>
    <link href="http://blog.rcant.com/2020/09/08/csharp/csharp-unitest/"/>
    <id>http://blog.rcant.com/2020/09/08/csharp/csharp-unitest/</id>
    <published>2020-09-08T04:12:25.000Z</published>
    <updated>2020-09-05T09:47:02.711Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><a id="more"></a>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;</summary>
    
    
    
    <category term="CSharp" scheme="http://blog.rcant.com/categories/CSharp/"/>
    
    
    <category term="CSharp" scheme="http://blog.rcant.com/tags/CSharp/"/>
    
    <category term="UnitTest" scheme="http://blog.rcant.com/tags/UnitTest/"/>
    
  </entry>
  
  <entry>
    <title>CSharp 多线程的几种写法</title>
    <link href="http://blog.rcant.com/2020/09/06/csharp/csharp-thread/"/>
    <id>http://blog.rcant.com/2020/09/06/csharp/csharp-thread/</id>
    <published>2020-09-06T08:53:15.000Z</published>
    <updated>2020-09-05T09:32:39.245Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><a id="more"></a><h2 id="异步线程调用"><a href="#异步线程调用" class="headerlink" title="异步线程调用"></a>异步线程调用</h2><h2 id="异步调用线程，线程消息回调主线程"><a href="#异步调用线程，线程消息回调主线程" class="headerlink" title="异步调用线程，线程消息回调主线程"></a>异步调用线程，线程消息回调主线程</h2><h3 id="其他线程-作为生产者产出消息，主线程作为消费者-消费其他线程的产出"><a href="#其他线程-作为生产者产出消息，主线程作为消费者-消费其他线程的产出" class="headerlink" title="其他线程 作为生产者产出消息，主线程作为消费者 消费其他线程的产出"></a>其他线程 作为生产者产出消息，主线程作为消费者 消费其他线程的产出</h3><h2 id="多个线程之间消息传递"><a href="#多个线程之间消息传递" class="headerlink" title="多个线程之间消息传递"></a>多个线程之间消息传递</h2><h3 id="示例-渲染系统，将渲染任务交给Render线程，将数据收集交给Collect线程"><a href="#示例-渲染系统，将渲染任务交给Render线程，将数据收集交给Collect线程" class="headerlink" title="示例 渲染系统，将渲染任务交给Render线程，将数据收集交给Collect线程"></a>示例 渲染系统，将渲染任务交给Render线程，将数据收集交给Collect线程</h3><p>主线程(传递消息到Render线程) -&gt; 渲染任务(消息告诉Collect线程去收集需要的信息) -&gt; Collect任务(消息传递到Render线程) -&gt; 渲染任务执行-&gt; 执行完成以后消息(传递消息到主线程) -&gt; 主线程执行下一帧循环</p><p>需要 几个 消费队列</p><ol><li>主线程消费队列<ul><li>渲染任务完成消息</li></ul></li><li>Render 线程消费队列<ul><li>主线程渲染任务</li><li>Collect线程渲染信息</li></ul></li><li>Collect 线程消费队列<ul><li>渲染线程需要收集什么信息</li></ul></li></ol><p>要保证Render线程和Collect线程处于激活状态</p><h2 id="通过线程池创建线程"><a href="#通过线程池创建线程" class="headerlink" title="通过线程池创建线程"></a>通过线程池创建线程</h2><h2 id="前端线程和后端线程是不同的，"><a href="#前端线程和后端线程是不同的，" class="headerlink" title="前端线程和后端线程是不同的，"></a>前端线程和后端线程是不同的，</h2><p>后端线程在主线程退出后就暂停销毁了<br>前端线程还会继续执行</p><h2 id="Task-创建多线程"><a href="#Task-创建多线程" class="headerlink" title="Task 创建多线程"></a>Task 创建多线程</h2><h2 id="Thread-创建多线程"><a href="#Thread-创建多线程" class="headerlink" title="Thread 创建多线程"></a>Thread 创建多线程</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;</summary>
    
    
    
    <category term="CSharp" scheme="http://blog.rcant.com/categories/CSharp/"/>
    
    
    <category term="CSharp" scheme="http://blog.rcant.com/tags/CSharp/"/>
    
    <category term="Thread" scheme="http://blog.rcant.com/tags/Thread/"/>
    
  </entry>
  
  <entry>
    <title>汇编程序 如何在优雅的VSCode上使用</title>
    <link href="http://blog.rcant.com/2020/09/05/asm/asm-vscode/"/>
    <id>http://blog.rcant.com/2020/09/05/asm/asm-vscode/</id>
    <published>2020-09-05T03:39:17.000Z</published>
    <updated>2020-09-27T11:19:49.950Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><a id="more"></a><p>使用VSCode 编译汇编程序</p><p>插件</p><p>以及其他</p><p>```<br>  </p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><a href="AsyncTest.zip" title="源码下载">点击下载</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;</summary>
    
    
    
    <category term="ASM" scheme="http://blog.rcant.com/categories/ASM/"/>
    
    
    <category term="ASM" scheme="http://blog.rcant.com/tags/ASM/"/>
    
    <category term="VSCode" scheme="http://blog.rcant.com/tags/VSCode/"/>
    
  </entry>
  
  <entry>
    <title>汇编程序安装</title>
    <link href="http://blog.rcant.com/2020/09/05/asm/asm-install/"/>
    <id>http://blog.rcant.com/2020/09/05/asm/asm-install/</id>
    <published>2020-09-05T03:39:17.000Z</published>
    <updated>2020-09-27T12:06:10.326Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>汇编程序运行需要什么</p><a id="more"></a><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li><a href="MASM.zip" title="下载编译器">Masm5.0</a></li><li><a href="DOSBox0.74-win32-installer.exe" title="下载DosBox">DosBox 0.74</a></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先将 <strong>DosBox</strong> 和 <strong>Masm</strong> 下载下来<br>安装DosBox ,DosBox 就是运行汇编的环境</p><p>汇编是个比较古老的东西，Masm 需要在 DosBox上才能运行</p><p>所以用它来运行</p><p>然后 新建一个 汇编的工程目录 如 : </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e:&#x2F;projects&#x2F;asms&#x2F;</span><br></pre></td></tr></table></figure><p>这个目录以后专门放汇编的程序代码</p><p>将编译器放入 这个目录下面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e:&#x2F;projects&#x2F;asms&#x2F;masm</span><br></pre></td></tr></table></figure><p>如下</p><img src="/2020/09/05/asm/asm-install/asm-install.png" class="" title="asm-install">  <h2 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h2><p>运行DosBox ，挂载asms 目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mount c e:&#x2F;projects&#x2F;asms</span><br><span class="line">$ C:</span><br></pre></td></tr></table></figure><p>这样就可以调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ masm h.asm</span><br></pre></td></tr></table></figure><p>编译汇编程序 ,生成 h.obj 文件</p><img src="/2020/09/05/asm/asm-install/masm-1.png" class="" title="masm-1">  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ link h.obj</span><br></pre></td></tr></table></figure><p>链接obj文件生成EXE文件 h.obj</p><img src="/2020/09/05/asm/asm-install/masm-2.png" class="" title="masm-2">  <h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mount -u c</span><br></pre></td></tr></table></figure><img src="/2020/09/05/asm/asm-install/dosbox-umount.png" class="" title="DosBox-umount">  <h2 id="DosBox-自动挂载"><a href="#DosBox-自动挂载" class="headerlink" title="DosBox 自动挂载"></a>DosBox 自动挂载</h2><p>DosBox 启动的时候 会有这样一段话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DOSBox version 0.74</span><br><span class="line">Copyright 2002-2010 DOSBox Team, published under GNU GPL.</span><br><span class="line">---</span><br><span class="line">CONFIG:Loading primary settings from config file C:\Users\cqs\AppData\Local\DOSBox\dosbox-0.74.conf</span><br><span class="line">MIDI:Opened device:win32</span><br></pre></td></tr></table></figure><img src="/2020/09/05/asm/asm-install/dosbox-init.png" class="" title="DosBox-init">  <p>只需要修改配置就可以了</p><p>内容很多，只需要在最后加上一段就好了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">[ipx]</span><br><span class="line"># ipx: Enable ipx over UDP&#x2F;IP emulation.</span><br><span class="line"></span><br><span class="line">ipx&#x3D;false</span><br><span class="line"></span><br><span class="line">[autoexec]</span><br><span class="line"># Lines in this section will be run at startup.</span><br><span class="line"># You can put your MOUNT lines here.</span><br><span class="line"></span><br><span class="line">mount c e:&#x2F;projects&#x2F;asms</span><br><span class="line">c:</span><br></pre></td></tr></table></figure></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/Milkoy/article/details/106020951" target="_blank" rel="noopener">DOSBOX的安装及ASM文件的编译</a></p><h2 id="系列"><a href="#系列" class="headerlink" title="系列"></a>系列</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;&lt;p&gt;汇编程序运行需要什么&lt;/p&gt;</summary>
    
    
    
    <category term="ASM" scheme="http://blog.rcant.com/categories/ASM/"/>
    
    
    <category term="ASM" scheme="http://blog.rcant.com/tags/ASM/"/>
    
  </entry>
  
  <entry>
    <title>CSharp 异步处理的几种形式</title>
    <link href="http://blog.rcant.com/2020/09/05/csharp/csharp-async/"/>
    <id>http://blog.rcant.com/2020/09/05/csharp/csharp-async/</id>
    <published>2020-09-05T03:39:17.000Z</published>
    <updated>2020-09-09T06:23:14.742Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>异步处理的几种方式</p><a id="more"></a><h2 id="使用-委托-回调函数"><a href="#使用-委托-回调函数" class="headerlink" title="使用 委托/回调函数"></a>使用 委托/回调函数</h2><p>示例: 实现一个异步HTTP加载的过程</p><p>HTTP<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">using System.Threading;</span><br><span class="line"></span><br><span class="line">namespace AsyncDelegateTest</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; HTTP 回应</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    public class HTTPResponse</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; 回应错误码</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">        public int errorCode;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; 回应消息串</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">        public string response;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 示例程序</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    public class HTTPRequest</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; 请求成功 委托定义</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;originalRequest&quot;&gt;&lt;&#x2F;param&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;response&quot;&gt;&lt;&#x2F;param&gt;</span><br><span class="line">        public delegate void OnRequestFinishedDelegate(HTTPRequest originalRequest, HTTPResponse response);</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; 下载进度委托示例</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;originalRequest&quot;&gt;&lt;&#x2F;param&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;response&quot;&gt;&lt;&#x2F;param&gt;</span><br><span class="line">        public delegate void OnDownloadProgressDelegate(HTTPRequest originalRequest, long downloaded, long downloadLength);</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; 上传进度委托示例</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;originalRequest&quot;&gt;&lt;&#x2F;param&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;uploaded&quot;&gt;&lt;&#x2F;param&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;uploadLength&quot;&gt;&lt;&#x2F;param&gt;</span><br><span class="line">        public delegate void OnUploadProgressDelegate(HTTPRequest originalRequest, long uploaded, long uploadLength);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; 异步回调方法</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">        public OnRequestFinishedDelegate onRequestFinished;</span><br><span class="line">        public OnDownloadProgressDelegate onDownloadProgress;</span><br><span class="line">        public OnUploadProgressDelegate onUploadProgress;</span><br><span class="line"></span><br><span class="line">        public string httptype;</span><br><span class="line">        public string url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static class HTTP</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; 测试代码</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;httpRequest&quot;&gt;&lt;&#x2F;param&gt;</span><br><span class="line">        public static void Send(this HTTPRequest httpRequest)</span><br><span class="line">        &#123;</span><br><span class="line">            ThreadStart reqestSimulate &#x3D; () &#x3D;&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                int length &#x3D; 10;</span><br><span class="line">                if (httpRequest.onUploadProgress !&#x3D; null)</span><br><span class="line">                &#123;</span><br><span class="line">                    for (int i &#x3D; 0; i &lt; length; i++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        Thread.Sleep(50);</span><br><span class="line">                        httpRequest.onUploadProgress.Invoke(httpRequest, i, length);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                if (httpRequest.onDownloadProgress !&#x3D; null)</span><br><span class="line">                &#123;</span><br><span class="line">                    for (int i &#x3D; 0; i &lt; length; i++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        Thread.Sleep(50);</span><br><span class="line">                        httpRequest.onDownloadProgress.Invoke(httpRequest, i, length);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                if (httpRequest.onRequestFinished !&#x3D; null)</span><br><span class="line">                &#123;</span><br><span class="line">                    HTTPResponse response &#x3D; new HTTPResponse();</span><br><span class="line">                    response.response &#x3D; httpRequest.url + &quot;:responsed!&quot;;</span><br><span class="line">                    response.errorCode &#x3D; 200;</span><br><span class="line">                    httpRequest.onRequestFinished.Invoke(httpRequest, response);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            Thread thread &#x3D; new Thread(reqestSimulate);</span><br><span class="line">            thread.Start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>DelegateTest<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line"></span><br><span class="line">namespace AsyncDelegateTest</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            AsyncDelegateTest();</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; 异步委托函数测试</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">        static void AsyncDelegateTest()</span><br><span class="line">        &#123;</span><br><span class="line">            HTTPRequest request &#x3D; new HTTPRequest();</span><br><span class="line">            request.url &#x3D; &quot;http:&#x2F;&#x2F;www.baidu.com&quot;;</span><br><span class="line">            request.httptype &#x3D; &quot;get&quot;;</span><br><span class="line">            request.onDownloadProgress &#x3D; (r, a, l) &#x3D;&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(string.Format(&quot;onDownloadProgress:&#123;0&#125;&#x2F;&#123;1&#125;&quot;, a, l));</span><br><span class="line">            &#125;;</span><br><span class="line">            request.onUploadProgress &#x3D; (r, a, l) &#x3D;&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(string.Format(&quot;onUploadProgress:&#123;0&#125;&#x2F;&#123;1&#125;&quot;, a, l));</span><br><span class="line">            &#125;;</span><br><span class="line">            request.onRequestFinished &#x3D; (request, respone) &#x3D;&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(string.Format(&quot;onRequestFinished:&#123;0&#125;&quot;, respone.response));</span><br><span class="line">            &#125;;</span><br><span class="line">            request.Send();</span><br><span class="line">            Console.WriteLine(&quot;request.Send!&quot;);</span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>定义三个 委托类型，进度改变的时候调用回调函数，通知进度更新</p><img src="/2020/09/05/csharp/csharp-async/1.png" class="" title="委托回调">  <h2 id="使用Task"><a href="#使用Task" class="headerlink" title="使用Task"></a>使用Task</h2><h3 id="任务和线程的区别："><a href="#任务和线程的区别：" class="headerlink" title="任务和线程的区别："></a>任务和线程的区别：</h3><h4 id="1-任务是架构在线程之上的，也就是说任务最终还是要抛给线程去执行。"><a href="#1-任务是架构在线程之上的，也就是说任务最终还是要抛给线程去执行。" class="headerlink" title="1. 任务是架构在线程之上的，也就是说任务最终还是要抛给线程去执行。"></a>1. 任务是架构在线程之上的，也就是说任务最终还是要抛给线程去执行。</h4><h4 id="2-任务跟线程不是一对一的关系，比如开10个任务并不是说会开10个线程，这一点任务有点类似线程池，但是任务相比线程池有很小的开销和精确的控制。"><a href="#2-任务跟线程不是一对一的关系，比如开10个任务并不是说会开10个线程，这一点任务有点类似线程池，但是任务相比线程池有很小的开销和精确的控制。" class="headerlink" title="2. 任务跟线程不是一对一的关系，比如开10个任务并不是说会开10个线程，这一点任务有点类似线程池，但是任务相比线程池有很小的开销和精确的控制。"></a>2. 任务跟线程不是一对一的关系，比如开10个任务并不是说会开10个线程，这一点任务有点类似线程池，但是任务相比线程池有很小的开销和精确的控制。</h4><h4 id="3-Task的优势"><a href="#3-Task的优势" class="headerlink" title="3. Task的优势"></a>3. Task的优势</h4><p>ThreadPool相比Thread来说具备了很多优势，但是ThreadPool却又存在一些使用上的不方便。比如：</p><ul><li>ThreadPool不支持线程的取消、完成、失败通知等交互性操作；</li><li>ThreadPool不支持线程执行的先后次序；</li></ul><p>以往，如果开发者要实现上述功能，需要完成很多额外的工作，现在，微软提供了一个功能更强大的概念：Task。Task在线程池的基础上进行了优化，并提供了更多的API。在Framework 4.0中，如果我们要编写多线程程序，Task显然已经优于传统的方式。</p><h3 id="创建无返回值的Task"><a href="#创建无返回值的Task" class="headerlink" title="创建无返回值的Task"></a>创建无返回值的Task</h3><h4 id="1-new"><a href="#1-new" class="headerlink" title="1. new"></a>1. new</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">static void TaskMethod(string taskname)&#123;</span><br><span class="line">    &#x2F;&#x2F;Thread.Sleep(500);</span><br><span class="line">    &#x2F;&#x2F;Task TODO </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void Main(string[] args)&#123;</span><br><span class="line">    Task task1 &#x3D; new Task(() &#x3D;&gt; TaskMethod(&quot;Task 1&quot;)); &#x2F;&#x2F;TaskMethod 具体任务操作</span><br><span class="line">    task1.Start();</span><br><span class="line">    Task.WaitAll(task1);&#x2F;&#x2F;等待任务结束</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-Task-Factory-StartNew"><a href="#2-Task-Factory-StartNew" class="headerlink" title="2. Task.Factory.StartNew"></a>2. Task.Factory.StartNew</h4><p>构造函数创建的task,必须手动Start,而通过工厂创建的Task直接就启动了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Task.Factory.StartNew(() &#x3D;&gt; TaskMethod(&quot;Task 3&quot;));    &#x2F;&#x2F;直接异步的方法</span><br></pre></td></tr></table></figure><p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var t3&#x3D;Task.Factory.StartNew(() &#x3D;&gt; TaskMethod(&quot;Task 3&quot;));</span><br><span class="line">Task.WaitAll(t3);&#x2F;&#x2F;等待任务结束</span><br></pre></td></tr></table></figure></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace AsyncTaskTest</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 测试不带泛型参数的Task</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    public class TaskTest_NonGeneric</span><br><span class="line">    &#123;</span><br><span class="line">        static void TaskMethod(string taskname)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;Task &#123;0&#125; is running on a thread id &#123;1&#125;. Is thread pool thread: &#123;2&#125;&quot;,</span><br><span class="line">                        taskname, Thread.CurrentThread.ManagedThreadId, Thread.CurrentThread.IsThreadPoolThread);</span><br><span class="line">            Thread.Sleep(500);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static void Test()</span><br><span class="line">        &#123;</span><br><span class="line">            Task task1 &#x3D; new Task(() &#x3D;&gt; TaskMethod(&quot;T1&quot;)); &#x2F;&#x2F;TaskMethod 具体任务操作</span><br><span class="line">            task1.Start();</span><br><span class="line">            Task.WaitAll(task1);&#x2F;&#x2F;等待任务结束</span><br><span class="line"></span><br><span class="line">            Task.Factory.StartNew(() &#x3D;&gt; TaskMethod(&quot;T2&quot;));    &#x2F;&#x2F;直接异步的方法</span><br><span class="line"></span><br><span class="line">            var t3 &#x3D; Task.Factory.StartNew(() &#x3D;&gt; TaskMethod(&quot;T3&quot;));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/09/05/csharp/csharp-async/2.png" class="" title="无返回值Task">  <h3 id="创建带返回值的Task"><a href="#创建带返回值的Task" class="headerlink" title="创建带返回值的Task"></a>创建带返回值的Task</h3><h4 id="1-New"><a href="#1-New" class="headerlink" title="1. New"></a>1. New</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Task&lt;int&gt; task &#x3D; CreateTask(&quot;Task 1&quot;);</span><br><span class="line">task.Start();</span><br><span class="line">int result &#x3D; task.Result;</span><br></pre></td></tr></table></figure><h4 id="2-让Task-任务在主线程运行"><a href="#2-让Task-任务在主线程运行" class="headerlink" title="2. 让Task 任务在主线程运行"></a>2. 让Task 任务在主线程运行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Task&lt;int&gt; task &#x3D; CreateTask(&quot;Task 2&quot;);</span><br><span class="line">&#x2F;&#x2F;该任务会运行在主线程中</span><br><span class="line">task.RunSynchronously();</span><br><span class="line">int result &#x3D; task.Result;</span><br></pre></td></tr></table></figure><h4 id="3-代码示例"><a href="#3-代码示例" class="headerlink" title="3. 代码示例"></a>3. 代码示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace AsyncTaskTest</span><br><span class="line">&#123;</span><br><span class="line">    public class TaskTest</span><br><span class="line">    &#123;</span><br><span class="line">        static int TaskMethod(string taskname)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;Task &#123;0&#125; is running on a thread id &#123;1&#125;. Is thread pool thread: &#123;2&#125;&quot;,</span><br><span class="line">                        taskname, Thread.CurrentThread.ManagedThreadId, Thread.CurrentThread.IsThreadPoolThread);</span><br><span class="line">            Thread.Sleep(500);</span><br><span class="line">            return 100;</span><br><span class="line">        &#125;</span><br><span class="line">        static Task&lt;int&gt; CreateTask(string name)</span><br><span class="line">        &#123;</span><br><span class="line">            return new Task&lt;int&gt;(() &#x3D;&gt; TaskMethod(name));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static void Test()</span><br><span class="line">        &#123;</span><br><span class="line">            TaskMethod(&quot;Main Thread Task&quot;);</span><br><span class="line"></span><br><span class="line">            Task&lt;int&gt; task &#x3D; CreateTask(&quot;T1&quot;);</span><br><span class="line">            task.Start();</span><br><span class="line">            int result &#x3D; task.Result;</span><br><span class="line">            Console.WriteLine(&quot;T1 Result is: &#123;0&#125;&quot;, result);</span><br><span class="line"></span><br><span class="line">            task &#x3D; CreateTask(&quot;T2&quot;);</span><br><span class="line">            &#x2F;&#x2F;该任务会运行在主线程中</span><br><span class="line">            task.RunSynchronously();</span><br><span class="line">            result &#x3D; task.Result;</span><br><span class="line">            Console.WriteLine(&quot;T2 Result is: &#123;0&#125;&quot;, result);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/09/05/csharp/csharp-async/3.png" class="" title="带返回值Task">  <h3 id="任务调度器-TaskScheduler"><a href="#任务调度器-TaskScheduler" class="headerlink" title="任务调度器 TaskScheduler"></a>任务调度器 TaskScheduler</h3><p>可以自定义任务调度器，将某些任务放入一个线程中，例如一串渲染任务，放入渲染线程中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Concurrent;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Threading;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace AsyncTaskTest</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 自定义任务调度器</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 将任务 用同一个线程进行调度</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    class MyTaskScheduler : TaskScheduler</span><br><span class="line">    &#123;</span><br><span class="line">        public static new TaskScheduler Current &#123; get; &#125; &#x3D; new MyTaskScheduler();</span><br><span class="line">        public static new TaskScheduler Default &#123; get; &#125; &#x3D; Current;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; 线程安全集合</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">        private readonly BlockingCollection&lt;Task&gt; m_queue &#x3D; new BlockingCollection&lt;Task&gt;();</span><br><span class="line"></span><br><span class="line">        MyTaskScheduler()</span><br><span class="line">        &#123;</span><br><span class="line">            Thread thread &#x3D; new Thread(Run);</span><br><span class="line">            thread.IsBackground &#x3D; true;&#x2F;&#x2F;设为为后台线程，当主线程结束时线程自动结束</span><br><span class="line">            thread.Start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private void Run()</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine($&quot;MyTaskScheduler, ThreadID: &#123;Thread.CurrentThread.ManagedThreadId&#125;&quot;);</span><br><span class="line">            Task t;</span><br><span class="line">            while (m_queue.TryTake(out t, Timeout.Infinite))</span><br><span class="line">            &#123;</span><br><span class="line">                TryExecuteTask(t);&#x2F;&#x2F;在当前线程执行Task</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        protected override IEnumerable&lt;Task&gt; GetScheduledTasks()</span><br><span class="line">        &#123;</span><br><span class="line">            return m_queue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; t.Start(MyTaskScheduler.Current)时，将Task加入到队列中</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;task&quot;&gt;&lt;&#x2F;param&gt;</span><br><span class="line">        protected override void QueueTask(Task task)</span><br><span class="line">        &#123;</span><br><span class="line">            m_queue.Add(task);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;当执行该函数时，程序正在尝试以同步的方式执行Task代码</span><br><span class="line">        protected override bool TryExecuteTaskInline(Task task, bool taskWaspreviouslyQueued)</span><br><span class="line">        &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 任务调度器测试</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    class TaskSchedulerTest</span><br><span class="line">    &#123;</span><br><span class="line">        static void TaskMethod(string taskname)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;Task &#123;0&#125; is running on a thread id &#123;1&#125;. Is thread pool thread: &#123;2&#125;&quot;,</span><br><span class="line">                        taskname, Thread.CurrentThread.ManagedThreadId, Thread.CurrentThread.IsThreadPoolThread);</span><br><span class="line">            Thread.Sleep(500);</span><br><span class="line">        &#125;</span><br><span class="line">        static Task CreateTask(string name)</span><br><span class="line">        &#123;</span><br><span class="line">            return new Task(() &#x3D;&gt; TaskMethod(name));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static void Test()</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine($&quot;Main, ThreadID: &#123;Thread.CurrentThread.ManagedThreadId&#125;&quot;);</span><br><span class="line">            for (int i &#x3D; 0; i &lt; 10; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                var t &#x3D; CreateTask(&quot;T&quot; + (i+1));</span><br><span class="line">                t.Start(MyTaskScheduler.Current);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/09/05/csharp/csharp-async/4.png" class="" title="任务调度器">  <h3 id="任务组合-ContinueWith"><a href="#任务组合-ContinueWith" class="headerlink" title="任务组合 ContinueWith"></a>任务组合 ContinueWith</h3><p>将任务和任务之间 进行串联，并联执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace AsyncTaskTest</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 任务组合</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    class ContinueWithTest</span><br><span class="line">    &#123;</span><br><span class="line">        private static readonly Random rand &#x3D; new Random();</span><br><span class="line">        static void TaskMethod(string taskname)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;Task &#123;0&#125; is running on a thread id &#123;1&#125;. Is thread pool thread: &#123;2&#125;&quot;,</span><br><span class="line">                        taskname, Thread.CurrentThread.ManagedThreadId, Thread.CurrentThread.IsThreadPoolThread);</span><br><span class="line">            int sleepTime &#x3D; rand.Next(100, 500);</span><br><span class="line">            Thread.Sleep(sleepTime);</span><br><span class="line">            Console.WriteLine(&quot;Task &#123;0&#125; Completed!&quot;,taskname);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        static Task CreateTask(string name)</span><br><span class="line">        &#123;</span><br><span class="line">            return new Task(() &#x3D;&gt; TaskMethod(name));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static void Test()</span><br><span class="line">        &#123;</span><br><span class="line">            Task task1 &#x3D; CreateTask(&quot;Task1&quot;);</span><br><span class="line">            Task task2 &#x3D; CreateTask(&quot;Task2&quot;);</span><br><span class="line">            </span><br><span class="line">            task1.Start();</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;主线程执行其他处理&quot;);</span><br><span class="line">            task1.ContinueWith(t &#x3D;&gt; &#123; </span><br><span class="line">                task2.Start(); </span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static void Test1()</span><br><span class="line">        &#123;</span><br><span class="line">            Task task1 &#x3D; CreateTask(&quot;Task1&quot;);</span><br><span class="line">            Task task2 &#x3D; CreateTask(&quot;Task2&quot;);</span><br><span class="line">            Task task3 &#x3D; CreateTask(&quot;Task3&quot;);</span><br><span class="line">            Task task4 &#x3D; CreateTask(&quot;Task4&quot;);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; t1-&gt;[t2,t3]-&gt;t4</span><br><span class="line"></span><br><span class="line">            task1.Start();</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;主线程执行其他处理&quot;);</span><br><span class="line">            task1.ContinueWith(t &#x3D;&gt; &#123;</span><br><span class="line">                task2.Start();</span><br><span class="line">                task3.Start();</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            Task t23 &#x3D; Task.WhenAll(task2, task3);</span><br><span class="line">            t23.ContinueWith(t &#x3D;&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                task4.Start();</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/09/05/csharp/csharp-async/5-1.png" class="" title="Test">  <img src="/2020/09/05/csharp/csharp-async/5-2.png" class="" title="Test2">  <h2 id="使用Promise"><a href="#使用Promise" class="headerlink" title="使用Promise"></a>使用Promise</h2><p>引用库 <a href="https://github.com/Real-Serious-Games/C-Sharp-Promise" target="_blank" rel="noopener">RSG-CSharpPromise</a></p><p>示例程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public IPromise&lt;string&gt; Download(string url)</span><br><span class="line">&#123;</span><br><span class="line">    var promise &#x3D; new Promise&lt;string&gt;();    &#x2F;&#x2F; Create promise.</span><br><span class="line">    using (var client &#x3D; new WebClient())</span><br><span class="line">    &#123;</span><br><span class="line">        client.DownloadStringCompleted +&#x3D;   &#x2F;&#x2F; Monitor event for download completed.</span><br><span class="line">            (s, ev) &#x3D;&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                if (ev.Error !&#x3D; null)</span><br><span class="line">                &#123;</span><br><span class="line">                    promise.Reject(ev.Error);   &#x2F;&#x2F; Error during download, reject the promise.</span><br><span class="line">                &#125;</span><br><span class="line">                else</span><br><span class="line">                &#123;</span><br><span class="line">                    promise.Resolve(ev.Result); &#x2F;&#x2F; Downloaded completed successfully, resolve the promise.</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">        client.DownloadStringAsync(new Uri(url), null); &#x2F;&#x2F; Initiate async op.</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return promise; &#x2F;&#x2F; Return the promise so the caller can await resolution (or error).</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void Test()&#123;</span><br><span class="line">    Download(&quot;http:&#x2F;&#x2F;www.google.com&quot;)</span><br><span class="line">    .Then(html &#x3D;&gt;</span><br><span class="line">        Console.WriteLine(html)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多不介绍了</p><h2 id="使用async-await"><a href="#使用async-await" class="headerlink" title="使用async/await"></a>使用async/await</h2><h3 id="async-await的基础用法"><a href="#async-await的基础用法" class="headerlink" title="async/await的基础用法"></a>async/await的基础用法</h3><p>async/await 结构可分成三部分：</p><ol><li>调用方法：该方法调用异步方法，然后在异步方法执行其任务的时候继续执行；</li><li>异步方法：该方法异步执行工作，然后立刻返回到调用方法；</li><li>await 表达式：用于异步方法内部，指出需要异步执行的任务。一个异步方法可以包含多个 await 表达式（不存在 await 表达式的话 IDE 会发出警告）。</li></ol><h3 id="async-await的优点"><a href="#async-await的优点" class="headerlink" title="async/await的优点"></a>async/await的优点</h3><ul><li><ol><li>方便级联调用：即调用依次发生的场景；</li></ol></li><li><ol><li>同步代码编写方式： Promise使用then函数进行链式调用，一直点点点，是一种从左向右的横向写法；async/await从上到下，顺序执行，就像写同步代码一样，更符合代码编写习惯；</li></ol></li><li><ol><li>多个参数传递： Promise的then函数只能传递一个参数，虽然可以通过包装成对象来传递多个参数，但是会导致传递冗余信息，频繁的解析又重新组合参数，比较麻烦；async/await没有这个限制，可以当做普通的局部变量来处理，用let或者const定义的块级变量想怎么用就怎么用，想定义几个就定义几个，完全没有限制，也没有冗余工作；</li></ol></li><li><ol><li>同步代码和异步代码可以一起编写： 使用Promise的时候最好将同步代码和异步代码放在不同的then节点中，这样结构更加清晰；async/await整个书写习惯都是同步的，不需要纠结同步和异步的区别，当然，异步过程需要包装成一个Promise对象放在await关键字后面；</li></ol></li><li><ol><li>基于协程： Promise是根据函数式编程的范式，对异步过程进行了一层封装，async/await基于协程的机制，是真正的“保存上下文，控制权切换……控制权恢复，取回上下文”这种机制，是对异步过程更精确的一种描述；</li></ol></li><li><ol><li>async/await 是对Promise的优化： async/await 是基于Promise的，是进一步的一种优化，不过在写代码时，Promise本身的API出现得很少，很接近同步代码的写法；</li></ol></li></ul><h3 id="代码演示-两种写法的区别"><a href="#代码演示-两种写法的区别" class="headerlink" title="代码演示 两种写法的区别"></a>代码演示 两种写法的区别</h3><p>T1-&gt;[T2,T3]-&gt;T4</p><p>Promise写法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">using RSG;</span><br><span class="line">using System;</span><br><span class="line">using System.Threading;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace AsyncTest</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; Promise</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    class AsyncPromiseTest</span><br><span class="line">    &#123;</span><br><span class="line">        private static readonly Random rand &#x3D; new Random();</span><br><span class="line">        static void TaskMethod(string taskname, Promise p)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;Task &#123;0&#125; is running on a thread id &#123;1&#125;. Is thread pool thread: &#123;2&#125;&quot;,</span><br><span class="line">                        taskname, Thread.CurrentThread.ManagedThreadId, Thread.CurrentThread.IsThreadPoolThread);</span><br><span class="line">            Thread.Sleep(rand.Next(100, 500));</span><br><span class="line">            Console.WriteLine(&quot;Task &#123;0&#125; Completed&quot;, taskname);</span><br><span class="line">            p.Resolve();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        static Task CreateTask(string name, Promise p)</span><br><span class="line">        &#123;</span><br><span class="line">            return new Task(() &#x3D;&gt; TaskMethod(name, p));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; void 返回值的 async </span><br><span class="line">        &#x2F;&#x2F;&#x2F; t1-&gt;(t2,t3)-&gt;t4</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">        static IPromise CalcAsync()</span><br><span class="line">        &#123;</span><br><span class="line">            Promise p1 &#x3D; new Promise();</span><br><span class="line">            Promise p2 &#x3D; new Promise();</span><br><span class="line">            Promise p3 &#x3D; new Promise();</span><br><span class="line">            Promise p4 &#x3D; new Promise();</span><br><span class="line"></span><br><span class="line">            Task task1 &#x3D; CreateTask(&quot;T1&quot;, p1);</span><br><span class="line">            Task task2 &#x3D; CreateTask(&quot;T2&quot;, p2);</span><br><span class="line">            Task task3 &#x3D; CreateTask(&quot;T3&quot;, p3);</span><br><span class="line">            Task task4 &#x3D; CreateTask(&quot;T4&quot;, p4);</span><br><span class="line"></span><br><span class="line">            p1.Then(() &#x3D;&gt; &#123;</span><br><span class="line">                task2.Start();</span><br><span class="line">                task3.Start();</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            Promise.All(p2, p3).Then(() &#x3D;&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                task4.Start();</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            task1.Start();</span><br><span class="line"></span><br><span class="line">            return p4.Then(() &#x3D;&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static void Test()</span><br><span class="line">        &#123;</span><br><span class="line">            var ipromise &#x3D; CalcAsync();  &#x2F;&#x2F; void 类型不能 接受返回值</span><br><span class="line">            ipromise.Then(() &#x3D;&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(&quot;Calc Completed.&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><img src="/2020/09/05/csharp/csharp-async/6-1.png" class="" title="AsyncPromiseTest">  <p>async/await 写法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Threading;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace AsyncTest</span><br><span class="line">&#123;</span><br><span class="line">    public class AsyncTest_NonGeneric</span><br><span class="line">    &#123;</span><br><span class="line">        private static readonly Random rand &#x3D; new Random();</span><br><span class="line">        static void TaskMethod(string taskname)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;Task &#123;0&#125; is running on a thread id &#123;1&#125;. Is thread pool thread: &#123;2&#125;&quot;,</span><br><span class="line">                        taskname, Thread.CurrentThread.ManagedThreadId, Thread.CurrentThread.IsThreadPoolThread);</span><br><span class="line">            Thread.Sleep(rand.Next(100,500));</span><br><span class="line">            Console.WriteLine(&quot;Task &#123;0&#125; Completed&quot;, taskname);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        static Task CreateTask(string name)</span><br><span class="line">        &#123;</span><br><span class="line">            return new Task(() &#x3D;&gt; TaskMethod(name));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; void 返回值的 async </span><br><span class="line">        &#x2F;&#x2F;&#x2F; t1-&gt;(t2,t3)-&gt;t4</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">        static async void CalcAsync()</span><br><span class="line">        &#123;</span><br><span class="line">            Task task1 &#x3D; CreateTask(&quot;T1&quot;);</span><br><span class="line">            task1.Start();</span><br><span class="line">            await task1;</span><br><span class="line">            Console.WriteLine(&quot;T1 Completed !&quot; + &quot;CalcAsync Thread ID is :&quot; + Thread.CurrentThread.ManagedThreadId);</span><br><span class="line"></span><br><span class="line">            Task task2 &#x3D; CreateTask(&quot;T2&quot;);</span><br><span class="line">            task2.Start();</span><br><span class="line">            Task task3 &#x3D; CreateTask(&quot;T3&quot;);</span><br><span class="line">            task3.Start();</span><br><span class="line"></span><br><span class="line">            await task2;</span><br><span class="line">            Console.WriteLine(&quot;T2 Completed !&quot; + &quot;CalcAsync Thread ID is :&quot; + Thread.CurrentThread.ManagedThreadId);</span><br><span class="line">            await task3;</span><br><span class="line">            Console.WriteLine(&quot;T3 Completed !&quot; + &quot;CalcAsync Thread ID is :&quot; + Thread.CurrentThread.ManagedThreadId);</span><br><span class="line">            </span><br><span class="line">            Task task4 &#x3D; CreateTask(&quot;T4&quot;);</span><br><span class="line">            task4.Start();</span><br><span class="line">            await task4;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;CalcAsync Completed !&quot; + &quot;CalcAsync Thread ID is :&quot; + Thread.CurrentThread.ManagedThreadId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static void Test()</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;Main Thread CalcAsync Before&quot;);</span><br><span class="line">            CalcAsync();  &#x2F;&#x2F; void 类型不能 接受返回值</span><br><span class="line">            Console.WriteLine(&quot;Main Thread CalcAsync After&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/09/05/csharp/csharp-async/6-2.png" class="" title="async&#x2F;await">  <h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><p><a href="AsyncTest.zip" title="源码下载">点击下载</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;&lt;p&gt;异步处理的几种方式&lt;/p&gt;</summary>
    
    
    
    <category term="CSharp" scheme="http://blog.rcant.com/categories/CSharp/"/>
    
    
    <category term="CSharp" scheme="http://blog.rcant.com/tags/CSharp/"/>
    
    <category term="task" scheme="http://blog.rcant.com/tags/task/"/>
    
    <category term="promise" scheme="http://blog.rcant.com/tags/promise/"/>
    
  </entry>
  
  <entry>
    <title>通用架构风格</title>
    <link href="http://blog.rcant.com/2020/09/05/framework/framework-general/"/>
    <id>http://blog.rcant.com/2020/09/05/framework/framework-general/</id>
    <published>2020-09-05T03:39:17.000Z</published>
    <updated>2020-10-14T03:09:26.825Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>架构风格</p><a id="more"></a><h2 id="引问"><a href="#引问" class="headerlink" title="引问"></a>引问</h2><pre><code>1. 设计词汇表是什么2. 构件和连接件的类型是什么？3. 可容许的结构模式是什么？4. 基本的计算模型是什么？5. 风格的基本不变性是什么？6. 其使用的常见例子是什么？7. 使用此风格的优缺点是什么？8. 其常见的特例是什么？</code></pre><p>以上问题包括了 架构风格的最关键的四要素内容：</p><pre><code>- 提供一个词汇表- 定义一套配置规则- 定义一套语义解释原则- 定义对基于这种风格的系统所进行的分析</code></pre><p>根据此框架给出了通用架构风格的分类：</p><pre><code>1. 数据流风格：批处理序列；管道 /过滤 器。2. 调用 /返回风格：主程序 /子程序；面向对象风格；层次结构。3. 独立构件风格：进程通信；事件系统。4. 虚拟机风格：解释器；基于规则的系统。5. 仓库风格：数据库系统；超文本系统；黑板系统。</code></pre><h2 id="数据流风格"><a href="#数据流风格" class="headerlink" title="数据流风格"></a>数据流风格</h2><p>数据流风格的软件架构是最常见，结构最简单的软件架构。 在这样的架构下，所有的数据按照流的形式在执行过程中前进，不存在结构的反复和重构，就像工厂中的汽车流水线一样，数据就像汽车零部件一样在流水线的各个节点上被加工，最终输出所需要的结果。在流动过程中，数据经过序列间的数据处理组件进行处理，然后将处理结果向后传送，最后进行输出。</p><p>数据流风格架构主要包括：批处理序列和管道-过滤器</p><h3 id="1-批处理序列"><a href="#1-批处理序列" class="headerlink" title="1.批处理序列"></a>1.批处理序列</h3><p>批处理风格的每一步处理都是独立的，并且每一步都是顺序执行的。只有前一步处理完，后一步才能开始。数据传送在步与步之间最为一个整体。</p><p>组件为一系列固定顺序的计算单元，组件之间只通过数据传递交互。每个处理步骤都是一个独立的程序，每一步必须在前一步结束后才能开始，数据必须是完整的，以整体的方式传递。</p><p>典型应用：</p><pre><code>1. 经典数据处理；2. 程序开发3. Windows下的Bat程序</code></pre><h3 id="2-管道-过滤器"><a href="#2-管道-过滤器" class="headerlink" title="2. 管道-过滤器"></a>2. 管道-过滤器</h3><p>在管道-过滤器风格的软件架构中，每个构件都有一组输入/输出，构件读输入的数据流，经过内部处理，产生输出数据流。这个过程通常通过对输入流的变换及增量计算来完成，所以在输入被完全消费之前，输出便产生了。因此这里的构件被称为过滤器，这种风格的连接件就像是数据流传输的管道，将一个过滤器的输出传到另一个过滤器的输入。</p><p>此风格特别重要的过滤器 必须是独立的实体 ，不能与其他的过滤器共享数据，而且一个过滤器不知道它上下游的标识。一个管道-过滤器网络输出的正确性并不依赖于过滤器进行增量计算过程的顺序。</p><p>典型的例子：</p><pre><code>1. Unix Shell 编写的程序</code></pre><p>此风格的优点：</p><pre><code>1. 使得软构件具有良好的隐蔽性和高内聚、低耦合的特点2. 允许设计者将整个系统的输入/输出看成是多个过滤器的行为的简单合成3. 支持软件重用。只要提供适合在两个过滤器之间传送的数据，任何两个过滤器都可被连接起来4. 系统维护和增强系统性能简单。新的过滤器可以添加到现有系统中来；旧的可以被改进的过滤器替换掉5. 允许对一些如吞吐量、死锁等属性的分析6. 支持并行执行。</code></pre><p>此风格的缺点：</p><pre><code>1. 通常导致进程成为批处理的结构。这是因为虽然过滤器可增量处理数据，但它们是独立的，所以设计者必须将每个过滤器看成一个完整的从输入到输出的转换。2. 不适合处理交互的应用。当需要增量的显示改变时，这个问题尤为严重3. 由于在数据传输上没有通用的标准，每个过滤器都增加了解析和合成数据的工作。这导致系统性能下降，增加了编写过滤器的复杂性</code></pre><h3 id="3-批处理序列风格和管道过滤器风格对比"><a href="#3-批处理序列风格和管道过滤器风格对比" class="headerlink" title="3. 批处理序列风格和管道过滤器风格对比"></a>3. 批处理序列风格和管道过滤器风格对比</h3><p>共同点： 把任务分成一系列固定顺序的计算单元（组件）。组件只通过数据传递交互。</p><p>区别: </p><p>批处理是全部的，高潜伏性的，输入时可随机存取，无合作性，无交互性。<br>管道-过滤器是递增的，数据结果延迟小，输入时处理局部化，有反馈、可交互。</p><p>批处理强调数据传送在步与步之间作为一个整体，而管道过滤器无此要求。</p><h2 id="调用-返回风格"><a href="#调用-返回风格" class="headerlink" title="调用/返回风格"></a>调用/返回风格</h2><p>调用返回风格是指在系统中采用调用与返回机制。采用调用-返回实际上是分治策略，将一个复杂的大系统分解为一些子系统，以便于降低复杂度，并且增加可修改性。程序从其执行起点开始执行构件代码，执行结束，将控制返回给程序调用构件。</p><p>调用/返回风格架构主要包括：主程序/子程序、面向对象风格、层次结构</p><h3 id="1-主程序-子程序"><a href="#1-主程序-子程序" class="headerlink" title="1. 主程序/子程序"></a>1. 主程序/子程序</h3><p>此风格是结构化开发时期的经典架构风格。这种风格一般采用单线程控制，把问题划分为若干处理步骤，构件为主程序和子程序。子程序通常可合成为模块。过程调用作为交互机制，即充当连接件。调用关系具有层次性，语义逻辑表现为子程序的正确性取决于它调用的子程序的正确性</p><h3 id="2-面向对象风格"><a href="#2-面向对象风格" class="headerlink" title="2. 面向对象风格"></a>2. 面向对象风格</h3><p>抽象数据类型对软件系统有着很重要的作用，目前软件界已经普遍使用面向对象系统</p><p>这种风格建立在数据抽象和面向对象的基础上，数据的表示方法和它们的相应操作封装在一个抽象数据类型或对象中。</p><p>这种风格的构件是对象，对象是一种被称作管理者的构件，因为它负责保持资源的完整性。对象是通过函数和过程的调用来交互的</p><p>这种风格的两个重要特征为：</p><pre><code>1. 对象负责维护其表示的完整性2. 对象的表示对其他对象而言是隐蔽的。因为一个对象对它的客户对象隐藏了自己的表示，索引这些对象可以不影响它的客户就能改变其实现方法。</code></pre><p>面向对象的系统的优点</p><pre><code>1. 因为对象对其他对象隐藏它的表示，所以可以改变一个对象的表示，而不影响其他的对象2. 设计者可以将一些数据存取操作问题分解为一些交互的代理程序的集合</code></pre><p>面向对象的缺点</p><pre><code>1. 一个对象为了和另一个对象进行交互，必须知道对象的标识。只要一个对象的标识改变了，旧必须修改所有其他明确调用它的对象。2. 必须修改所有显示调用它的其他对象，并消除由此带来的一些副作用。例如，如果A使用了对象B，C也使用了对象B，那么C对B的使用所造成的对A的影响可能也是料想不到的</code></pre><h3 id="3-层次结构风格"><a href="#3-层次结构风格" class="headerlink" title="3. 层次结构风格"></a>3. 层次结构风格</h3>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;&lt;p&gt;架构风格&lt;/p&gt;</summary>
    
    
    
    <category term="架构" scheme="http://blog.rcant.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="架构" scheme="http://blog.rcant.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>CSharp 协程处理</title>
    <link href="http://blog.rcant.com/2020/09/04/csharp/csharp-coroutine/"/>
    <id>http://blog.rcant.com/2020/09/04/csharp/csharp-coroutine/</id>
    <published>2020-09-04T05:02:52.000Z</published>
    <updated>2020-09-05T09:00:59.396Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><a id="more"></a>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;</summary>
    
    
    
    <category term="CSharp" scheme="http://blog.rcant.com/categories/CSharp/"/>
    
    
    <category term="CSharp" scheme="http://blog.rcant.com/tags/CSharp/"/>
    
    <category term="Coroutine" scheme="http://blog.rcant.com/tags/Coroutine/"/>
    
  </entry>
  
  <entry>
    <title>数据结构-跳表</title>
    <link href="http://blog.rcant.com/2020/09/01/datastruct/datastruct-skiplist/"/>
    <id>http://blog.rcant.com/2020/09/01/datastruct/datastruct-skiplist/</id>
    <published>2020-09-01T06:40:07.000Z</published>
    <updated>2020-09-14T11:11:09.769Z</updated>
    
    <content type="html"><![CDATA[<p>数据结构-跳表</p><p>SkipList</p><a id="more"></a><h2 id="跳表的原理"><a href="#跳表的原理" class="headerlink" title="跳表的原理"></a>跳表的原理</h2><h3 id="什么是跳表"><a href="#什么是跳表" class="headerlink" title="什么是跳表"></a>什么是跳表</h3><p>链表，相信大家都不陌生，维护一个有序的链表是一件非常简单的事情，我们都知道，在一个有序的链表里面，查询跟插入的算法复杂度都是O(n)。</p><img src="/2020/09/01/datastruct/datastruct-skiplist/linkedlist-1.png" class="" title="进入编辑模式"><p>对上述有序列表建立一层索引<br>这样 就可以加速查询效率和 插入效率<br>比如查找 11，不加索引的需要查找 6次<br>加了一层索引以后，只需要查找 4次<br>查找速度为 O(n/2) +1</p><img src="/2020/09/01/datastruct/datastruct-skiplist/linkedlist-2.png" class="" title="进入编辑模式"><p>如果再加一层索引 就变成是 O(n/4) + 2</p><img src="/2020/09/01/datastruct/datastruct-skiplist/linkedlist-3.png" class="" title="进入编辑模式"><p>跳表就是这样的一种数据结构，结点是跳过一部分的，<br>从而加快了查询的速度。跳表跟红黑树又有什么差别呢？</p><p>既然两者的算法复杂度差不多，为什么Redis要使用跳表而不使用红黑树呢？<br>跳表相对于红黑树，主要有这几个优点：</p><ol><li>代码相对简单</li><li>如果我们要查询一个区间里面的值，用平衡树可能会麻烦。<br>这里的麻烦指的是实现和理解上，平衡二叉树查询一段区间也是可以做到的。</li><li>删除一段区间，这个如果是平衡二叉树，就会相当困难，<br>毕竟设计到树的平衡问题，而跳表则没有这种烦恼。</li></ol><h3 id="跳表查询元素"><a href="#跳表查询元素" class="headerlink" title="跳表查询元素"></a>跳表查询元素</h3><p>假如我们要查询11，那么我们从最上层出发，<br>发现下一个是5，再下一个是13，已经大于11，所以进入下一层，<br>下一层的一个是9，查找下一个，下一个又是13，再次进入下一层。<br>最终找到11。</p><p>最终 一定查找会进入最底层</p><img src="/2020/09/01/datastruct/datastruct-skiplist/skip-find.png" class="" title="进入编辑模式"><h3 id="跳表插入元素"><a href="#跳表插入元素" class="headerlink" title="跳表插入元素"></a>跳表插入元素</h3><p>插入</p><p>插入的时候，首先要进行查询，然后从最底层开始，插入被插入的元素。<br>然后看看从下而上，是否需要逐层插入。</p><p>这里不需要完全平衡</p><p>最底层往上获取一个随机值[0,1]，判断小于0.5不插入结束，<br>否则将元素插入到当前层，并向上找一层，获取随机值[0,1]判断是否小于0.5<br>来确定当前层是否需要插入，除非到到最上层了，否则继续向上找上一层</p><p>插入 8</p><p>查询插入位置<br><img src="/2020/09/01/datastruct/datastruct-skiplist/skip-insert1.png" class="" title="进入编辑模式"><br>底层插入，判断其上一层是否需要插入<br><img src="/2020/09/01/datastruct/datastruct-skiplist/skip-insert2.png" class="" title="进入编辑模式"><br>继续判断直到条件不成立，或者到达最大层<br><img src="/2020/09/01/datastruct/datastruct-skiplist/skip-insert3.png" class="" title="进入编辑模式"></p><h3 id="跳表删除元素"><a href="#跳表删除元素" class="headerlink" title="跳表删除元素"></a>跳表删除元素</h3><p>首先需要查询最底层，然后对其他层做相同操作<br>删除需要删除每一层的对应节点</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>设计图<br><img src="/2020/09/01/datastruct/datastruct-skiplist/skip-yanhua.png" class="" title="设计图"></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">static void Main(string[] args)</span><br><span class="line">&#123;</span><br><span class="line">    TestSkipList();</span><br><span class="line">&#125;</span><br><span class="line">static void TestSkipList()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;测试 调表结构</span><br><span class="line">    SkipList&lt;string, int&gt; skipList &#x3D; new DataStructLib.SkipList&lt;string, int&gt;();</span><br><span class="line">    skipList.Add(&quot;1&quot;, 32);</span><br><span class="line">    Console.WriteLine(skipList);</span><br><span class="line">    skipList.Add(&quot;2&quot;, 12);</span><br><span class="line">    Console.WriteLine(skipList);</span><br><span class="line">    skipList.Add(&quot;4&quot;, 36);</span><br><span class="line">    Console.WriteLine(skipList);</span><br><span class="line">    skipList.Add(&quot;22&quot;, 3222);</span><br><span class="line">    Console.WriteLine(skipList);</span><br><span class="line">    skipList.Add(&quot;12&quot;, 1122);</span><br><span class="line">    Console.WriteLine(skipList);</span><br><span class="line">    skipList.Add(&quot;6&quot;, 31);</span><br><span class="line">    Console.WriteLine(skipList);</span><br><span class="line">    skipList.Remove(&quot;12&quot;);</span><br><span class="line">    Console.WriteLine(skipList);</span><br><span class="line">    skipList.Remove(&quot;6&quot;);</span><br><span class="line">    Console.WriteLine(skipList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="SkipList.cs" title="源码下载">点击下载</a></p><p>测试图1<br><img src="/2020/09/01/datastruct/datastruct-skiplist/skip-test.png" class="" title="测试"></p><p>测试图2<br><img src="/2020/09/01/datastruct/datastruct-skiplist/skip-test2.png" class="" title="测试"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总结：</p><ol><li>跳表一定是一个有序表，否则就没有意义</li><li>跳表的实现是对有序链表加入了多级缓存</li><li>跳表是随机平衡的</li><li>数据量达不到一定级别的话，还是不要使用跳表了，因为有缓存的开销，得不偿失</li><li>跳表的内存开销是 原链表的两倍，跳表查询插入和删除时间复杂度大概是 O(logn)，</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;数据结构-跳表&lt;/p&gt;
&lt;p&gt;SkipList&lt;/p&gt;</summary>
    
    
    
    <category term="datastruct" scheme="http://blog.rcant.com/categories/datastruct/"/>
    
    
    <category term="datastruct" scheme="http://blog.rcant.com/tags/datastruct/"/>
    
  </entry>
  
  <entry>
    <title>CSharp ApiDoc 自动生成API文档</title>
    <link href="http://blog.rcant.com/2020/08/26/csharp/csharp-docfx/"/>
    <id>http://blog.rcant.com/2020/08/26/csharp/csharp-docfx/</id>
    <published>2020-08-26T03:39:17.000Z</published>
    <updated>2020-08-26T12:11:55.756Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>同于生成API文档记录</p><a id="more"></a><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://dotnet.github.io/docfx/tutorial/docfx_getting_started.html" target="_blank" rel="noopener">Docfx Getting Started</a></li></ul><h2 id="安装DocFx"><a href="#安装DocFx" class="headerlink" title="安装DocFx"></a>安装DocFx</h2><h3 id="使用-Chocolatey-安装"><a href="#使用-Chocolatey-安装" class="headerlink" title="使用 Chocolatey 安装"></a>使用 <strong>Chocolatey</strong> 安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install docfx -y.</span><br></pre></td></tr></table></figure><h3 id="使用-Homebrew-安装"><a href="#使用-Homebrew-安装" class="headerlink" title="使用 Homebrew 安装"></a>使用 <strong>Homebrew</strong> 安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install docfx.</span><br></pre></td></tr></table></figure><h3 id="去-GitHub-下载文件安装"><a href="#去-GitHub-下载文件安装" class="headerlink" title="去 GitHub 下载文件安装"></a>去 <strong>GitHub</strong> 下载文件安装</h3><ul><li>从 <strong>GitHub</strong> <a href="https://github.com/dotnet/docfx/releases" target="_blank" rel="noopener">DocFx 下载</a> 文件 <em>docfx.zip</em></li><li>解压文件 <em>docfx.zip</em> </li><li>添加到环境变量 <strong>Path</strong> 中</li></ul><h2 id="验证安装是否成功"><a href="#验证安装是否成功" class="headerlink" title="验证安装是否成功"></a>验证安装是否成功</h2><p>使用命令行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docfx.exe --version</span><br><span class="line">docfx 2.56.2.0</span><br><span class="line">Copyright (C) 2020 ? Microsoft Corporation. All rights reserved.</span><br><span class="line">This is open-source software under MIT License.</span><br></pre></td></tr></table></figure><h2 id="使用-DocFx"><a href="#使用-DocFx" class="headerlink" title="使用 DocFx"></a>使用 <strong>DocFx</strong></h2><h3 id="使用-Visual-Studio-集成-DocFx"><a href="#使用-Visual-Studio-集成-DocFx" class="headerlink" title="使用 Visual Studio 集成 DocFx"></a>使用 Visual Studio 集成 DocFx</h3><ol><li>使用 <strong>Visual Studio</strong> 创建  <strong>Class Library (.NET Framework)</strong> 项目</li><li>右键项目，选择 <strong>Manage NuGet Package</strong></li><li>搜索并安装 <strong>docfx.console</strong> </li><li><strong>Build</strong> the project, and a <em>_site</em> folder will be generated with the documentation.</li></ol><h3 id="单独创建-DocFx-项目"><a href="#单独创建-DocFx-项目" class="headerlink" title="单独创建 DocFx 项目"></a>单独创建 <strong>DocFx</strong> 项目</h3><ol><li>创建 <em>docfx init -q</em> 项目</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ docfx init -q</span><br><span class="line">$ treee -L 2</span><br><span class="line"></span><br><span class="line">E:\projects\csharp\FmoLib</span><br><span class="line">├── Debugger</span><br><span class="line">├── docfx_project</span><br><span class="line">├── FmoLib</span><br><span class="line">├── FmoLib.sln</span><br><span class="line">├── FmoLibDemo</span><br><span class="line">├── link.cmd</span><br><span class="line">├── README.md</span><br><span class="line">└── ShareLibrary</span><br><span class="line"></span><br><span class="line">directory: 5 file: 3</span><br><span class="line"></span><br><span class="line">ignored</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ cd docfx_project</span><br><span class="line">$ treee -L 2</span><br><span class="line"></span><br><span class="line">E:\projects\csharp\FmoLib\docfx_project</span><br><span class="line">├── api</span><br><span class="line">├── apidoc</span><br><span class="line">├── articles</span><br><span class="line">├── docfx.json</span><br><span class="line">├── images</span><br><span class="line">├── index.md</span><br><span class="line">├── src</span><br><span class="line">└── toc.yml</span><br><span class="line"></span><br><span class="line">directory: 5 file: 3</span><br><span class="line"></span><br><span class="line">ignored</span><br></pre></td></tr></table></figure><ol><li>修改 <em>docfx.json</em> 添加代码文档</li></ol><p>原始 docfx.json<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;metadata&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;src&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;files&quot;: [</span><br><span class="line">            &quot;src&#x2F;**.csproj&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;dest&quot;: &quot;api&quot;,</span><br><span class="line">      &quot;disableGitFeatures&quot;: false,</span><br><span class="line">      &quot;disableDefaultFilter&quot;: false</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;metadata&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;src&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;files&quot;: [</span><br><span class="line">            &quot;FmoLib&#x2F;**.csproj&quot;</span><br><span class="line">          ],</span><br><span class="line">          &quot;exclude&quot;: [</span><br><span class="line">            &quot;**&#x2F;obj&#x2F;**&quot;,</span><br><span class="line">            &quot;**&#x2F;bin&#x2F;**&quot;,</span><br><span class="line">            &quot;_site&#x2F;**&quot;</span><br><span class="line">          ],</span><br><span class="line">          &quot;cwd&quot;: &quot;..&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;dest&quot;: &quot;api&quot;,</span><br><span class="line">      &quot;disableGitFeatures&quot;: false,</span><br><span class="line">      &quot;disableDefaultFilter&quot;: false</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li><p>生成 <em>doc</em> 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">$ docfx.exe docfx.json --serve</span><br><span class="line">$ treee -L 2</span><br><span class="line">E:\projects\csharp\FmoLib\docfx_project</span><br><span class="line">├── api</span><br><span class="line">|  ├── FmoLib.API.App.yml</span><br><span class="line">|  ├── ...</span><br><span class="line">|  ├── index.md</span><br><span class="line">|  └── toc.yml</span><br><span class="line">├── apidoc</span><br><span class="line">├── articles</span><br><span class="line">|  ├── intro.md</span><br><span class="line">|  └── toc.yml</span><br><span class="line">├── docfx.json</span><br><span class="line">├── images</span><br><span class="line">├── index.md</span><br><span class="line">├── obj</span><br><span class="line">├── src</span><br><span class="line">├── toc.yml</span><br><span class="line">└── _site</span><br><span class="line">   ├── api</span><br><span class="line">   ├── articles</span><br><span class="line">   ├── favicon.ico</span><br><span class="line">   ├── fonts</span><br><span class="line">   ├── index.html</span><br><span class="line">   ├── logo.svg</span><br><span class="line">   ├── manifest.json</span><br><span class="line">   ├── search-stopwords.json</span><br><span class="line">   ├── styles</span><br><span class="line">   ├── toc.html</span><br><span class="line">   └── xrefmap.yml</span><br><span class="line"></span><br><span class="line">directory: 11 file: 233</span><br><span class="line"></span><br><span class="line">ignored</span><br></pre></td></tr></table></figure></li><li><p>访问 <em><a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a></em> </p></li></ol><img src="/2020/08/26/csharp/csharp-docfx/1.png" class="" title="首页">  <img src="/2020/08/26/csharp/csharp-docfx/2.png" class="" title="articles">  <img src="/2020/08/26/csharp/csharp-docfx/3.png" class="" title="api">  <h2 id="filterConfig-yml-配置"><a href="#filterConfig-yml-配置" class="headerlink" title="filterConfig.yml 配置"></a><em>filterConfig.yml</em> 配置</h2><blockquote><p>这个文件可以包含包括的文件和不包括的，包括的权限比不包括大，默认是包括所有文件</p></blockquote><p><strong>docfx.json</strong> 关联 <strong>filterConfig.yml</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;metadata&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;src&quot;: [</span><br><span class="line">        ...</span><br><span class="line">      ],</span><br><span class="line">      &quot;dest&quot;: &quot;api&quot;,</span><br><span class="line">      &quot;disableGitFeatures&quot;: false,</span><br><span class="line">      &quot;disableDefaultFilter&quot;: false,</span><br><span class="line">      &quot;filter&quot;: &quot;filterConfig.yml&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>包括的文件使用include 不包括使用 exclude<br>文件示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apiRules:</span><br><span class="line">- include:</span><br><span class="line">    uidRegex: ^Microsoft\.DevDiv\.SpecialCase</span><br><span class="line">- exclude:</span><br><span class="line">    uidRegex: ^Microsoft\.DevDiv</span><br></pre></td></tr></table></figure><br>因为 uidRegex 是匹配，所以对于.需要加上\</p><p>强大的ms还可以匹配是什么类型，提供的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Namespace  </span><br><span class="line">Type  </span><br><span class="line">Class  </span><br><span class="line">Struct  </span><br><span class="line">Enum</span><br><span class="line">Interface</span><br><span class="line">Delegate</span><br><span class="line">Member</span><br><span class="line">Event</span><br><span class="line">Field</span><br><span class="line">Method</span><br><span class="line">Property</span><br></pre></td></tr></table></figure><p>如果要忽略命名空间是 lindexi.laji 的代码，请看下面代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apiRules:</span><br><span class="line">- exclude:</span><br><span class="line">    uidRegex: ^lindexi\.laji*</span><br><span class="line">    type: Namespace</span><br></pre></td></tr></table></figure></p><h2 id="DocFx生成PDF文件"><a href="#DocFx生成PDF文件" class="headerlink" title="DocFx生成PDF文件"></a>DocFx生成PDF文件</h2><h3 id="安装必要的插件-wkhtmltopdf"><a href="#安装必要的插件-wkhtmltopdf" class="headerlink" title="安装必要的插件 wkhtmltopdf"></a>安装必要的插件 <strong>wkhtmltopdf</strong></h3><h4 id="使用-Chocolatey-安装-1"><a href="#使用-Chocolatey-安装-1" class="headerlink" title="使用 Chocolatey 安装"></a>使用 <strong>Chocolatey</strong> 安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install wkhtmltopdf -y.</span><br></pre></td></tr></table></figure><h4 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h4><ol><li>下载 <a href="https://wkhtmltopdf.org/downloads.html" target="_blank" rel="noopener"><strong>wkhtmltopdf</strong></a></li><li>安装 <strong>wkhtmltopdf</strong></li><li>添加到环境变量 <strong>Path</strong> 中</li></ol><h3 id="修改-docfx-json"><a href="#修改-docfx-json" class="headerlink" title="修改 docfx.json"></a>修改 <strong>docfx.json</strong></h3><p>添加 <strong>pdf</strong> 信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;metadata&quot;: [</span><br><span class="line">      ...</span><br><span class="line">  ],</span><br><span class="line">  &quot;build&quot;: &#123;</span><br><span class="line">      ...</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;pdf&quot;: &#123;</span><br><span class="line">   &quot;content&quot;: [</span><br><span class="line">     &#123;</span><br><span class="line">       &quot;files&quot;: [</span><br><span class="line">         &quot;api&#x2F;**.yml&quot;,</span><br><span class="line">         &quot;api-vb&#x2F;**.yml&quot;</span><br><span class="line">       ],</span><br><span class="line">       &quot;exclude&quot;: [</span><br><span class="line">         &quot;**&#x2F;toc.yml&quot;,</span><br><span class="line">         &quot;**&#x2F;toc.md&quot;,</span><br><span class="line">         &quot;README.md&quot;,</span><br><span class="line">         &quot;source_codes&#x2F;**&quot;</span><br><span class="line">       ]</span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">       &quot;files&quot;: [</span><br><span class="line">         &quot;articles&#x2F;**.md&quot;,</span><br><span class="line">         &quot;articles&#x2F;**&#x2F;toc.yml&quot;,</span><br><span class="line">         &quot;toc.yml&quot;,</span><br><span class="line">         &quot;*.md&quot;,</span><br><span class="line">         &quot;pdf&#x2F;*&quot;</span><br><span class="line">       ],</span><br><span class="line">       &quot;exclude&quot;: [</span><br><span class="line">         &quot;**&#x2F;bin&#x2F;**&quot;,</span><br><span class="line">         &quot;**&#x2F;obj&#x2F;**&quot;,</span><br><span class="line">         &quot;_site_pdf&#x2F;**&quot;,</span><br><span class="line">         &quot;**&#x2F;toc.yml&quot;,</span><br><span class="line">         &quot;**&#x2F;toc.md&quot;,</span><br><span class="line">         &quot;README.md&quot;,</span><br><span class="line">         &quot;source_codes&#x2F;**&quot;</span><br><span class="line">       ]</span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">       &quot;files&quot;: &quot;pdf&#x2F;toc.yml&quot;</span><br><span class="line">     &#125;</span><br><span class="line">   ],</span><br><span class="line">   &quot;resource&quot;: [</span><br><span class="line">     &#123;</span><br><span class="line">       &quot;files&quot;: [</span><br><span class="line">         &quot;images&#x2F;**&quot;</span><br><span class="line">       ],</span><br><span class="line">       &quot;exclude&quot;: [</span><br><span class="line">         &quot;**&#x2F;bin&#x2F;**&quot;,</span><br><span class="line">         &quot;**&#x2F;obj&#x2F;**&quot;,</span><br><span class="line">         &quot;_site_pdf&#x2F;**&quot;,</span><br><span class="line">         &quot;README.md&quot;,</span><br><span class="line">         &quot;source_codes&#x2F;**&quot;</span><br><span class="line">       ]</span><br><span class="line">     &#125;</span><br><span class="line">   ],</span><br><span class="line">   &quot;overwrite&quot;: [</span><br><span class="line">     &#123;</span><br><span class="line">       &quot;files&quot;: [</span><br><span class="line">         &quot;apidoc&#x2F;**.md&quot;</span><br><span class="line">       ],</span><br><span class="line">       &quot;exclude&quot;: [</span><br><span class="line">         &quot;**&#x2F;bin&#x2F;**&quot;,</span><br><span class="line">         &quot;**&#x2F;obj&#x2F;**&quot;,</span><br><span class="line">         &quot;_site_pdf&#x2F;**&quot;,</span><br><span class="line">         &quot;README.md&quot;,</span><br><span class="line">         &quot;source_codes&#x2F;**&quot;</span><br><span class="line">       ]</span><br><span class="line">     &#125;</span><br><span class="line">   ],</span><br><span class="line">   &quot;dest&quot;: &quot;_site_pdf&quot;,</span><br><span class="line">   &quot;template&quot;: [&quot;pdf.default&quot;],</span><br><span class="line">   &quot;wkhtmltopdf&quot;: &#123;</span><br><span class="line">    &quot;additionalArguments&quot;: &quot;--enable-local-file-access&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="添加-“pdf-toc-yml”-文件"><a href="#添加-“pdf-toc-yml”-文件" class="headerlink" title="添加 “pdf/toc.yml” 文件"></a>添加 <strong>“pdf/toc.yml”</strong> 文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- name: Documentation</span><br><span class="line">  href: ..&#x2F;api&#x2F;toc.yml</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">$ treee -l 2</span><br><span class="line"></span><br><span class="line">E:\projects\csharp\FmoLib\docfx_project</span><br><span class="line">├── api</span><br><span class="line">|  ├── FmoLib.API.App.yml</span><br><span class="line">|  ├── ...</span><br><span class="line">|  ├── FmoLib.yml</span><br><span class="line">|  ├── index.md</span><br><span class="line">|  └── toc.yml</span><br><span class="line">├── apidoc</span><br><span class="line">├── articles</span><br><span class="line">|  ├── intro.md</span><br><span class="line">|  └── toc.yml</span><br><span class="line">├── docfx.json</span><br><span class="line">├── docfx_pdf.json</span><br><span class="line">├── filterConfig.yml</span><br><span class="line">├── images</span><br><span class="line">├── index.md</span><br><span class="line">├── obj</span><br><span class="line">├── pdf</span><br><span class="line">|  └── toc.yml</span><br><span class="line">├── src</span><br><span class="line">├── toc.yml</span><br><span class="line">├── _site</span><br><span class="line">|  ├── api</span><br><span class="line">|  ├── articles</span><br><span class="line">|  ├── favicon.ico</span><br><span class="line">|  ├── fonts</span><br><span class="line">|  ├── index.html</span><br><span class="line">|  ├── logo.svg</span><br><span class="line">|  ├── manifest.json</span><br><span class="line">|  ├── search-stopwords.json</span><br><span class="line">|  ├── styles</span><br><span class="line">|  ├── toc.html</span><br><span class="line">|  └── xrefmap.yml</span><br><span class="line">└── _site_pdf</span><br><span class="line">   ├── docfx_project.json</span><br><span class="line">   ├── docfx_project_pdf.pdf</span><br><span class="line">   └── _raw</span><br><span class="line"></span><br><span class="line">directory: 14 file: 157</span><br><span class="line"></span><br><span class="line">ignored</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;&lt;p&gt;同于生成API文档记录&lt;/p&gt;</summary>
    
    
    
    <category term="CSharp" scheme="http://blog.rcant.com/categories/CSharp/"/>
    
    
    <category term="CSharp" scheme="http://blog.rcant.com/tags/CSharp/"/>
    
    <category term="ApiDoc" scheme="http://blog.rcant.com/tags/ApiDoc/"/>
    
    <category term="DocFx" scheme="http://blog.rcant.com/tags/DocFx/"/>
    
  </entry>
  
</feed>
