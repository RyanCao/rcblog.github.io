<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chester.Cao Blog</title>
  
  <subtitle>Devlopper in C#</subtitle>
  <link href="http://blog.rcant.com/atom.xml" rel="self"/>
  
  <link href="http://blog.rcant.com/"/>
  <updated>2020-09-16T08:20:03.844Z</updated>
  <id>http://blog.rcant.com/</id>
  
  <author>
    <name>Chester.C</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSharp Type 类型反射调用</title>
    <link href="http://blog.rcant.com/2020/09/16/csharp/csharp-type/"/>
    <id>http://blog.rcant.com/2020/09/16/csharp/csharp-type/</id>
    <published>2020-09-16T04:12:25.000Z</published>
    <updated>2020-09-16T08:20:03.844Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><a id="more"></a><h2 id="Type-关键字"><a href="#Type-关键字" class="headerlink" title="Type 关键字"></a>Type 关键字</h2><p>CSharp 中所有的类型都是 Type</p><h3 id="获取-Type-的方法有三种"><a href="#获取-Type-的方法有三种" class="headerlink" title="获取 Type 的方法有三种"></a>获取 Type 的方法有三种</h3><ol><li>使用 <strong>typeof</strong> 运算符 </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Type t &#x3D; typeof(int);</span><br></pre></td></tr></table></figure><ol start="2"><li>使用 <strong>getType()</strong> 方法</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int i;</span><br><span class="line">Type t &#x3D; i.GetType();</span><br></pre></td></tr></table></figure><ol start="3"><li>使用Type类的静态方法 <strong>GetType()</strong> </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Type t &#x3D;Type.GetType(&quot;System.Double&quot;);</span><br></pre></td></tr></table></figure><h3 id="Type的属性"><a href="#Type的属性" class="headerlink" title="Type的属性"></a>Type的属性</h3><table><thead><tr><th>属性名</th><th>属性含义</th><th>扩展</th></tr></thead><tbody><tr><td>Name</td><td>类型名</td><td>MyTestType</td></tr><tr><td>FullName</td><td>类型的完全限定名，包括命名空间</td><td>ConsoleApp1.MyTestType</td></tr><tr><td>Namespace</td><td>类型的命名空间</td><td>ConsoleApp1</td></tr><tr><td>BaseType</td><td>直接父类类型</td><td>ConsoleApp1.MyTestParent</td></tr><tr><td>UnderlyingSystemType</td><td>映射类型</td><td>ConsoleApp1.MyTestType</td></tr></tbody></table><h3 id="Type的主要方法"><a href="#Type的主要方法" class="headerlink" title="Type的主要方法"></a>Type的主要方法</h3><table><thead><tr><th>方法名</th><th>方法含义</th><th>入口参数</th><th>返回值</th><th>扩展</th></tr></thead><tbody><tr><td>GetFields</td><td>获取所有公共字段。</td><td>-</td><td>FieldInfo[]</td><td><code>public int Size;</code></td></tr><tr><td>GetField</td><td>此方法用于搜索具有指定名称的公共字段。</td><td>string</td><td>FieldInfo</td><td>-</td></tr><tr><td>GetProperties</td><td>获取所有公共属性 (get/set)</td><td>-</td><td>PropertyInfo[]</td><td><code>public int Pos &#123; get; set; &#125;</code></td></tr><tr><td>GetPropertie</td><td>此方法用于搜索具有指定名称的公共属性 (get/set)</td><td>string</td><td>PropertyInfo</td><td>-</td></tr><tr><td>GetMethods</td><td>获取所有公共方法[包含(get/set)]</td><td>-</td><td>MethodInfo[]</td><td>包含Get/Set方法 如 get_Pos/set_Pos</td></tr><tr><td>GetMethod</td><td>此方法用于搜索具有指定名称的公共方法[包含get/set]</td><td>string</td><td>MethodInfo</td><td>-</td></tr><tr><td>GetMembers</td><td>获取所有公共成员</td><td>-</td><td>MemberInfo[]</td><td>包含Field / Propertie / Method</td></tr><tr><td>GetMember</td><td>此方法用于搜索具有指定名称的公共成员</td><td>string</td><td>MemberInfo</td><td>-</td></tr></tbody></table><h3 id="Type-反射调用"><a href="#Type-反射调用" class="headerlink" title="Type 反射调用"></a>Type 反射调用</h3><h4 id="1-FiledInfo"><a href="#1-FiledInfo" class="headerlink" title="1. FiledInfo"></a>1. FiledInfo</h4><p>使用 <strong>GetValue/SetValue</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public static void Test()</span><br><span class="line">&#123;</span><br><span class="line">    Type myTestType &#x3D; typeof(MyTestType);</span><br><span class="line">    Object myTestInstance &#x3D; new MyTestType();</span><br><span class="line"></span><br><span class="line">    FieldInfo fieldInfo1 &#x3D; myTestType.GetField(&quot;Size&quot;);</span><br><span class="line"></span><br><span class="line">    object f1 &#x3D; fieldInfo1.GetValue(myTestInstance);</span><br><span class="line">    Console.WriteLine(&quot;myTestInstance.Size:&quot; + f1);</span><br><span class="line"></span><br><span class="line">    fieldInfo1.SetValue(myTestInstance, 10);</span><br><span class="line"></span><br><span class="line">    object f2 &#x3D; fieldInfo1.GetValue(myTestInstance);</span><br><span class="line">    Console.WriteLine(&quot;myTestInstance.Size:&quot; + f2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-PropertyInfo"><a href="#2-PropertyInfo" class="headerlink" title="2. PropertyInfo"></a>2. PropertyInfo</h4><p>使用 <strong>GetValue/SetValue</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public static void Test()</span><br><span class="line">&#123;</span><br><span class="line">    Type myTestType &#x3D; typeof(MyTestType);</span><br><span class="line">    Object myTestInstance &#x3D; new MyTestType();</span><br><span class="line"></span><br><span class="line">    PropertyInfo propertyInfo &#x3D; myTestType.GetProperty(&quot;Pos&quot;);</span><br><span class="line"></span><br><span class="line">    object p1 &#x3D; propertyInfo.GetValue(myTestInstance);</span><br><span class="line">    Console.WriteLine(&quot;myTestInstance.Pos:&quot;+ p1);</span><br><span class="line"></span><br><span class="line">    propertyInfo.SetValue(myTestInstance, 10);</span><br><span class="line">    </span><br><span class="line">    object p2 &#x3D; propertyInfo.GetValue(myTestInstance);</span><br><span class="line">    Console.WriteLine(&quot;myTestInstance.Pos:&quot; + p2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>PropertyInfo</strong> 的 <strong>SetValue</strong> 实际调用的是 <strong>set_XXX</strong> 方法<br><strong>PropertyInfo</strong> 的 <strong>GetValue</strong> 实际调用的是 <strong>get_XXX</strong> 方法</p><p>在一个类中如果定义了一个属性 <strong>XXX(PosParent)</strong> , 就不能再定义 <strong>get_XXX(get_PosParent)/set_XXX(set_PosParent)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public  class MyTestParent</span><br><span class="line">&#123;</span><br><span class="line">        public int SizeParent;</span><br><span class="line">        private int posParent;</span><br><span class="line">        public int PosParent &#123; get &#x3D;&gt; posParent; set &#x3D;&gt; posParent &#x3D; value; &#125;</span><br><span class="line"></span><br><span class="line">        public int mRotationParent;</span><br><span class="line">        </span><br><span class="line">        public int get_PosParent()</span><br><span class="line">        &#123;</span><br><span class="line">            return posParent;</span><br><span class="line">        &#125;</span><br><span class="line">        public void set_PosParent(int v)</span><br><span class="line">        &#123;</span><br><span class="line">            posParent &#x3D; v;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译器会报错</p><img src="/2020/09/16/csharp/csharp-type/1.png" class="" title="CompileError">  <h4 id="3-MethodInfo"><a href="#3-MethodInfo" class="headerlink" title="3. MethodInfo"></a>3. MethodInfo</h4><p>使用 <strong>Invoke</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public static void Test()</span><br><span class="line">&#123;</span><br><span class="line">    Type myTestType &#x3D; typeof(MyTestType);</span><br><span class="line">    Object myTestInstance &#x3D; new MyTestType();</span><br><span class="line"></span><br><span class="line">    MethodInfo getRotaionMethod &#x3D; myTestType.GetMethod(&quot;GetRotation&quot;);</span><br><span class="line">    MethodInfo setRotationMethod &#x3D; myTestType.GetMethod(&quot;SetRotation&quot;);</span><br><span class="line"></span><br><span class="line">    object getRotationRet1 &#x3D; getRotaionMethod.Invoke(myTestInstance,new object[0]);</span><br><span class="line">    Console.WriteLine(&quot;myTestInstance.MethodInfo GetRotation:&quot; + getRotationRet1);</span><br><span class="line"></span><br><span class="line">    setRotationMethod.Invoke(myTestInstance, new object[1]&#123;10&#125;);</span><br><span class="line"></span><br><span class="line">    object getRotationRet2 &#x3D; getRotaionMethod.Invoke(myTestInstance, new object[0]);</span><br><span class="line">    Console.WriteLine(&quot;myTestInstance.MethodInfo  GetRotation:&quot; + getRotationRet2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-MethodInfo-Get-Set"><a href="#4-MethodInfo-Get-Set" class="headerlink" title="4. MethodInfo Get/Set"></a>4. MethodInfo Get/Set</h4><p>使用 <strong>Invoke</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public static void Test()</span><br><span class="line">&#123;</span><br><span class="line">    Type myTestType &#x3D; typeof(MyTestType);</span><br><span class="line">    Object myTestInstance &#x3D; new MyTestType();</span><br><span class="line"></span><br><span class="line">    MethodInfo getPosParentMethod &#x3D; myTestType.GetMethod(&quot;get_PosParent&quot;);</span><br><span class="line">    MethodInfo setPosParentMethod &#x3D; myTestType.GetMethod(&quot;set_PosParent&quot;);</span><br><span class="line"></span><br><span class="line">    object getPosParentRet1 &#x3D; getPosParentMethod.Invoke(myTestInstance, new object[0]);</span><br><span class="line">    Console.WriteLine(&quot;myTestInstance.MethodInfo PosParent:&quot; + getPosParentRet1);</span><br><span class="line"></span><br><span class="line">    setPosParentMethod.Invoke(myTestInstance, new object[1] &#123; 10 &#125;);</span><br><span class="line"></span><br><span class="line">    object getPosParentRet2 &#x3D; getPosParentMethod.Invoke(myTestInstance, new object[0]);</span><br><span class="line">    Console.WriteLine(&quot;myTestInstance.MethodInfo  PosParent:&quot; + getPosParentRet2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例子代码"><a href="#例子代码" class="headerlink" title="例子代码"></a>例子代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Reflection;</span><br><span class="line">using System.Text;</span><br><span class="line"></span><br><span class="line">namespace ConsoleApp1</span><br><span class="line">&#123;</span><br><span class="line">    public  class MyTestParent</span><br><span class="line">    &#123;</span><br><span class="line">        public int SizeParent;&#x2F;&#x2F;FieldInfo 父类子类都可以获取，只要是public</span><br><span class="line">        private int posParent;&#x2F;&#x2F;FieldInfo private 无法获取</span><br><span class="line">        public int PosParent &#123; get &#x3D;&gt; posParent; set &#x3D;&gt; posParent &#x3D; value; &#125;&#x2F;&#x2F; PropertyInfo  get_PosParent,set_PosParent</span><br><span class="line"></span><br><span class="line">        public int mRotationParent;&#x2F;&#x2F;FieldInfo 父类子类都可以获取，只要是public</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;public int get_PosParent()</span><br><span class="line">        &#x2F;&#x2F;&#123;</span><br><span class="line">        &#x2F;&#x2F;    return posParent;</span><br><span class="line">        &#x2F;&#x2F;&#125;</span><br><span class="line">        &#x2F;&#x2F;public void set_PosParent(int v)</span><br><span class="line">        &#x2F;&#x2F;&#123;</span><br><span class="line">        &#x2F;&#x2F;    posParent &#x3D; v;</span><br><span class="line">        &#x2F;&#x2F;&#125;</span><br><span class="line"></span><br><span class="line">        public virtual void SetRotationParent(int r)&#x2F;&#x2F; memberInfo  SetRotationParent</span><br><span class="line">        &#123;</span><br><span class="line">            mRotationParent &#x3D; r;</span><br><span class="line">        &#125;</span><br><span class="line">        public virtual int GetRotationParent()&#x2F;&#x2F; memberInfo  GetRotationParent</span><br><span class="line">        &#123;</span><br><span class="line">            return mRotationParent;</span><br><span class="line">        &#125;</span><br><span class="line">        public override string ToString()</span><br><span class="line">        &#123;</span><br><span class="line">            StringBuilder stringBuilder &#x3D; new StringBuilder();</span><br><span class="line">            stringBuilder.Append(&quot;\nSizeParent:&quot;);</span><br><span class="line">            stringBuilder.Append(SizeParent);</span><br><span class="line">            stringBuilder.Append(&quot;\nPosParent:&quot;);</span><br><span class="line">            stringBuilder.Append(PosParent);</span><br><span class="line">            stringBuilder.Append(&quot;\nRotationParent&quot;);</span><br><span class="line">            stringBuilder.Append(mRotationParent);</span><br><span class="line"></span><br><span class="line">            return stringBuilder.ToString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public class MyTestType:MyTestParent</span><br><span class="line">    &#123;</span><br><span class="line">        #region 使用字段访问 </span><br><span class="line">        public int Size;&#x2F;&#x2F;FieldInfo     public 可以获取</span><br><span class="line">        #endregion</span><br><span class="line"></span><br><span class="line">        #region 使用系统提供的Get&#x2F;Set 设置访问属性</span><br><span class="line">        public int Pos &#123; get; set; &#125;&#x2F;&#x2F; PropertyInfo  get_Pos,set_Pos</span><br><span class="line">        #endregion</span><br><span class="line"></span><br><span class="line">        #region 使用自定义方法 设置属性</span><br><span class="line">        private int mRotation;&#x2F;&#x2F;FieldInfo     private 获取不到</span><br><span class="line"></span><br><span class="line">        public void SetRotation(int r)      &#x2F;&#x2F; memberInfo  SetRotation</span><br><span class="line">        &#123;</span><br><span class="line">            mRotation &#x3D; r;</span><br><span class="line">        &#125;</span><br><span class="line">        public int GetRotation()             &#x2F;&#x2F; memberInfo  GetRotation</span><br><span class="line">        &#123;</span><br><span class="line">            return mRotation;</span><br><span class="line">        &#125;</span><br><span class="line">        #endregion</span><br><span class="line"></span><br><span class="line">        public override string ToString()</span><br><span class="line">        &#123;</span><br><span class="line">            StringBuilder stringBuilder &#x3D; new StringBuilder();</span><br><span class="line">            stringBuilder.Append(&quot;base.ToString:&quot;);</span><br><span class="line">            stringBuilder.Append(base.ToString());</span><br><span class="line">            stringBuilder.Append(&quot;\nSize:&quot;);</span><br><span class="line">            stringBuilder.Append(Size);</span><br><span class="line">            stringBuilder.Append(&quot;\nPos:&quot;);</span><br><span class="line">            stringBuilder.Append(Pos);</span><br><span class="line">            stringBuilder.Append(&quot;\nRotation&quot;);</span><br><span class="line">            stringBuilder.Append(mRotation);</span><br><span class="line"></span><br><span class="line">            return stringBuilder.ToString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public class TypeTest</span><br><span class="line">    &#123;</span><br><span class="line">        public static void Test()</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;Type类型</span><br><span class="line">            Type myTestType &#x3D; typeof(MyTestType);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;一个不明类型的实例</span><br><span class="line">            Object myTestInstance &#x3D; new MyTestType();</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;如何使用这个实例访问 对象属性</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;myTestType.Name:&quot; + myTestType.Name);</span><br><span class="line">            Console.WriteLine(&quot;myTestType.FullName:&quot; + myTestType.FullName);</span><br><span class="line">            Console.WriteLine(&quot;myTestType.Namespace:&quot; + myTestType.Namespace);</span><br><span class="line">            Console.WriteLine(&quot;myTestType.BaseType:&quot; + myTestType.BaseType);</span><br><span class="line">            Console.WriteLine(&quot;myTestType.UnderlyingSystemType:&quot; + myTestType.UnderlyingSystemType);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;fieldInfos&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">            FieldInfo[] fieldInfos &#x3D; myTestType.GetFields();</span><br><span class="line">            for (int i &#x3D; 0,length &#x3D; fieldInfos.Length; i &lt; length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                FieldInfo fieldInfo &#x3D; fieldInfos[i];</span><br><span class="line">                Console.WriteLine(fieldInfo);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">            </span><br><span class="line">            Console.WriteLine(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;FieldInfo Test&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">            FieldInfo fieldInfo1 &#x3D; myTestType.GetField(&quot;Size&quot;);</span><br><span class="line">            object f1 &#x3D; fieldInfo1.GetValue(myTestInstance);</span><br><span class="line">            Console.WriteLine(&quot;myTestInstance.Size:&quot; + f1);</span><br><span class="line">            fieldInfo1.SetValue(myTestInstance, 10);</span><br><span class="line">            object f2 &#x3D; fieldInfo1.GetValue(myTestInstance);</span><br><span class="line">            Console.WriteLine(&quot;myTestInstance.Size:&quot; + f2);</span><br><span class="line">            Console.WriteLine(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;memberInfos&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">            MemberInfo[] memberInfos &#x3D; myTestType.GetMembers();</span><br><span class="line">            for (int i &#x3D; 0, length &#x3D; memberInfos.Length; i &lt; length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                MemberInfo fieldInfo &#x3D; memberInfos[i];</span><br><span class="line">                Console.WriteLine(fieldInfo);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;propertyInfos&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">            PropertyInfo[] propertyInfos &#x3D; myTestType.GetProperties();</span><br><span class="line">            for (int i &#x3D; 0, length &#x3D; propertyInfos.Length; i &lt; length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                PropertyInfo fieldInfo &#x3D; propertyInfos[i];</span><br><span class="line">                Console.WriteLine(fieldInfo);</span><br><span class="line">            &#125;</span><br><span class="line">           </span><br><span class="line">            Console.WriteLine(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;PropertyInfo Invoke&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">            PropertyInfo propertyInfo &#x3D; myTestType.GetProperty(&quot;Pos&quot;);</span><br><span class="line">            </span><br><span class="line">            object p1 &#x3D; propertyInfo.GetValue(myTestInstance);</span><br><span class="line">            Console.WriteLine(&quot;myTestInstance.Pos:&quot;+ p1);</span><br><span class="line">            propertyInfo.SetValue(myTestInstance, 10);</span><br><span class="line">            object p2 &#x3D; propertyInfo.GetValue(myTestInstance);</span><br><span class="line">            Console.WriteLine(&quot;myTestInstance.Pos:&quot; + p2);</span><br><span class="line">            Console.WriteLine(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;methodInfos&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">            MethodInfo[] methodInfos &#x3D; myTestType.GetMethods();</span><br><span class="line">            for (int i &#x3D; 0, length &#x3D; methodInfos.Length; i &lt; length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                MethodInfo fieldInfo &#x3D; methodInfos[i];</span><br><span class="line">                Console.WriteLine(fieldInfo);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;MethodInfo Invoke&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">            MethodInfo getRotaionMethod &#x3D; myTestType.GetMethod(&quot;GetRotation&quot;);</span><br><span class="line">            MethodInfo setRotationMethod &#x3D; myTestType.GetMethod(&quot;SetRotation&quot;);</span><br><span class="line"></span><br><span class="line">            object getRotationRet1 &#x3D; getRotaionMethod.Invoke(myTestInstance,new object[0]);</span><br><span class="line">            Console.WriteLine(&quot;myTestInstance.MethodInfo GetRotation:&quot; + getRotationRet1);</span><br><span class="line"></span><br><span class="line">            setRotationMethod.Invoke(myTestInstance, new object[1]&#123;10&#125;);</span><br><span class="line"></span><br><span class="line">            object getRotationRet2 &#x3D; getRotaionMethod.Invoke(myTestInstance, new object[0]);</span><br><span class="line">            Console.WriteLine(&quot;myTestInstance.MethodInfo  GetRotation:&quot; + getRotationRet2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;MethodInfo Get&#x2F;Set Invoke&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">            MethodInfo getPosParentMethod &#x3D; myTestType.GetMethod(&quot;get_PosParent&quot;);</span><br><span class="line">            MethodInfo setPosParentMethod &#x3D; myTestType.GetMethod(&quot;set_PosParent&quot;);</span><br><span class="line"></span><br><span class="line">            object getPosParentRet1 &#x3D; getPosParentMethod.Invoke(myTestInstance, new object[0]);</span><br><span class="line">            Console.WriteLine(&quot;myTestInstance.MethodInfo PosParent:&quot; + getPosParentRet1);</span><br><span class="line"></span><br><span class="line">            setPosParentMethod.Invoke(myTestInstance, new object[1] &#123; 10 &#125;);</span><br><span class="line"></span><br><span class="line">            object getPosParentRet2 &#x3D; getPosParentMethod.Invoke(myTestInstance, new object[0]);</span><br><span class="line">            Console.WriteLine(&quot;myTestInstance.MethodInfo  PosParent:&quot; + getPosParentRet2);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;myTestInstance:&quot; + myTestInstance);</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行结果</p><img src="/2020/09/16/csharp/csharp-type/2.png" class="" title="Result">  ]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;</summary>
    
    
    
    <category term="CSharp" scheme="http://blog.rcant.com/categories/CSharp/"/>
    
    
    <category term="CSharp" scheme="http://blog.rcant.com/tags/CSharp/"/>
    
    <category term="Reflect" scheme="http://blog.rcant.com/tags/Reflect/"/>
    
  </entry>
  
  <entry>
    <title>CSharp 单元测试</title>
    <link href="http://blog.rcant.com/2020/09/08/csharp/csharp-unitest/"/>
    <id>http://blog.rcant.com/2020/09/08/csharp/csharp-unitest/</id>
    <published>2020-09-08T04:12:25.000Z</published>
    <updated>2020-09-05T09:47:02.711Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><a id="more"></a>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;</summary>
    
    
    
    <category term="CSharp" scheme="http://blog.rcant.com/categories/CSharp/"/>
    
    
    <category term="CSharp" scheme="http://blog.rcant.com/tags/CSharp/"/>
    
    <category term="UnitTest" scheme="http://blog.rcant.com/tags/UnitTest/"/>
    
  </entry>
  
  <entry>
    <title>CSharp 多线程的几种写法</title>
    <link href="http://blog.rcant.com/2020/09/06/csharp/csharp-thread/"/>
    <id>http://blog.rcant.com/2020/09/06/csharp/csharp-thread/</id>
    <published>2020-09-06T08:53:15.000Z</published>
    <updated>2020-09-05T09:32:39.245Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><a id="more"></a><h2 id="异步线程调用"><a href="#异步线程调用" class="headerlink" title="异步线程调用"></a>异步线程调用</h2><h2 id="异步调用线程，线程消息回调主线程"><a href="#异步调用线程，线程消息回调主线程" class="headerlink" title="异步调用线程，线程消息回调主线程"></a>异步调用线程，线程消息回调主线程</h2><h3 id="其他线程-作为生产者产出消息，主线程作为消费者-消费其他线程的产出"><a href="#其他线程-作为生产者产出消息，主线程作为消费者-消费其他线程的产出" class="headerlink" title="其他线程 作为生产者产出消息，主线程作为消费者 消费其他线程的产出"></a>其他线程 作为生产者产出消息，主线程作为消费者 消费其他线程的产出</h3><h2 id="多个线程之间消息传递"><a href="#多个线程之间消息传递" class="headerlink" title="多个线程之间消息传递"></a>多个线程之间消息传递</h2><h3 id="示例-渲染系统，将渲染任务交给Render线程，将数据收集交给Collect线程"><a href="#示例-渲染系统，将渲染任务交给Render线程，将数据收集交给Collect线程" class="headerlink" title="示例 渲染系统，将渲染任务交给Render线程，将数据收集交给Collect线程"></a>示例 渲染系统，将渲染任务交给Render线程，将数据收集交给Collect线程</h3><p>主线程(传递消息到Render线程) -&gt; 渲染任务(消息告诉Collect线程去收集需要的信息) -&gt; Collect任务(消息传递到Render线程) -&gt; 渲染任务执行-&gt; 执行完成以后消息(传递消息到主线程) -&gt; 主线程执行下一帧循环</p><p>需要 几个 消费队列</p><ol><li>主线程消费队列<ul><li>渲染任务完成消息</li></ul></li><li>Render 线程消费队列<ul><li>主线程渲染任务</li><li>Collect线程渲染信息</li></ul></li><li>Collect 线程消费队列<ul><li>渲染线程需要收集什么信息</li></ul></li></ol><p>要保证Render线程和Collect线程处于激活状态</p><h2 id="通过线程池创建线程"><a href="#通过线程池创建线程" class="headerlink" title="通过线程池创建线程"></a>通过线程池创建线程</h2><h2 id="前端线程和后端线程是不同的，"><a href="#前端线程和后端线程是不同的，" class="headerlink" title="前端线程和后端线程是不同的，"></a>前端线程和后端线程是不同的，</h2><p>后端线程在主线程退出后就暂停销毁了<br>前端线程还会继续执行</p><h2 id="Task-创建多线程"><a href="#Task-创建多线程" class="headerlink" title="Task 创建多线程"></a>Task 创建多线程</h2><h2 id="Thread-创建多线程"><a href="#Thread-创建多线程" class="headerlink" title="Thread 创建多线程"></a>Thread 创建多线程</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;</summary>
    
    
    
    <category term="CSharp" scheme="http://blog.rcant.com/categories/CSharp/"/>
    
    
    <category term="CSharp" scheme="http://blog.rcant.com/tags/CSharp/"/>
    
    <category term="Thread" scheme="http://blog.rcant.com/tags/Thread/"/>
    
  </entry>
  
  <entry>
    <title>CSharp 异步处理的几种形式</title>
    <link href="http://blog.rcant.com/2020/09/05/csharp/csharp-async/"/>
    <id>http://blog.rcant.com/2020/09/05/csharp/csharp-async/</id>
    <published>2020-09-05T03:39:17.000Z</published>
    <updated>2020-09-09T06:23:14.742Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>异步处理的几种方式</p><a id="more"></a><h2 id="使用-委托-回调函数"><a href="#使用-委托-回调函数" class="headerlink" title="使用 委托/回调函数"></a>使用 委托/回调函数</h2><p>示例: 实现一个异步HTTP加载的过程</p><p>HTTP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">using System.Threading;</span><br><span class="line"></span><br><span class="line">namespace AsyncDelegateTest</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; HTTP 回应</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    public class HTTPResponse</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; 回应错误码</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">        public int errorCode;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; 回应消息串</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">        public string response;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 示例程序</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    public class HTTPRequest</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; 请求成功 委托定义</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;originalRequest&quot;&gt;&lt;&#x2F;param&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;response&quot;&gt;&lt;&#x2F;param&gt;</span><br><span class="line">        public delegate void OnRequestFinishedDelegate(HTTPRequest originalRequest, HTTPResponse response);</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; 下载进度委托示例</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;originalRequest&quot;&gt;&lt;&#x2F;param&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;response&quot;&gt;&lt;&#x2F;param&gt;</span><br><span class="line">        public delegate void OnDownloadProgressDelegate(HTTPRequest originalRequest, long downloaded, long downloadLength);</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; 上传进度委托示例</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;originalRequest&quot;&gt;&lt;&#x2F;param&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;uploaded&quot;&gt;&lt;&#x2F;param&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;uploadLength&quot;&gt;&lt;&#x2F;param&gt;</span><br><span class="line">        public delegate void OnUploadProgressDelegate(HTTPRequest originalRequest, long uploaded, long uploadLength);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; 异步回调方法</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">        public OnRequestFinishedDelegate onRequestFinished;</span><br><span class="line">        public OnDownloadProgressDelegate onDownloadProgress;</span><br><span class="line">        public OnUploadProgressDelegate onUploadProgress;</span><br><span class="line"></span><br><span class="line">        public string httptype;</span><br><span class="line">        public string url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static class HTTP</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; 测试代码</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;httpRequest&quot;&gt;&lt;&#x2F;param&gt;</span><br><span class="line">        public static void Send(this HTTPRequest httpRequest)</span><br><span class="line">        &#123;</span><br><span class="line">            ThreadStart reqestSimulate &#x3D; () &#x3D;&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                int length &#x3D; 10;</span><br><span class="line">                if (httpRequest.onUploadProgress !&#x3D; null)</span><br><span class="line">                &#123;</span><br><span class="line">                    for (int i &#x3D; 0; i &lt; length; i++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        Thread.Sleep(50);</span><br><span class="line">                        httpRequest.onUploadProgress.Invoke(httpRequest, i, length);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                if (httpRequest.onDownloadProgress !&#x3D; null)</span><br><span class="line">                &#123;</span><br><span class="line">                    for (int i &#x3D; 0; i &lt; length; i++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        Thread.Sleep(50);</span><br><span class="line">                        httpRequest.onDownloadProgress.Invoke(httpRequest, i, length);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                if (httpRequest.onRequestFinished !&#x3D; null)</span><br><span class="line">                &#123;</span><br><span class="line">                    HTTPResponse response &#x3D; new HTTPResponse();</span><br><span class="line">                    response.response &#x3D; httpRequest.url + &quot;:responsed!&quot;;</span><br><span class="line">                    response.errorCode &#x3D; 200;</span><br><span class="line">                    httpRequest.onRequestFinished.Invoke(httpRequest, response);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            Thread thread &#x3D; new Thread(reqestSimulate);</span><br><span class="line">            thread.Start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DelegateTest</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line"></span><br><span class="line">namespace AsyncDelegateTest</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            AsyncDelegateTest();</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; 异步委托函数测试</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">        static void AsyncDelegateTest()</span><br><span class="line">        &#123;</span><br><span class="line">            HTTPRequest request &#x3D; new HTTPRequest();</span><br><span class="line">            request.url &#x3D; &quot;http:&#x2F;&#x2F;www.baidu.com&quot;;</span><br><span class="line">            request.httptype &#x3D; &quot;get&quot;;</span><br><span class="line">            request.onDownloadProgress &#x3D; (r, a, l) &#x3D;&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(string.Format(&quot;onDownloadProgress:&#123;0&#125;&#x2F;&#123;1&#125;&quot;, a, l));</span><br><span class="line">            &#125;;</span><br><span class="line">            request.onUploadProgress &#x3D; (r, a, l) &#x3D;&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(string.Format(&quot;onUploadProgress:&#123;0&#125;&#x2F;&#123;1&#125;&quot;, a, l));</span><br><span class="line">            &#125;;</span><br><span class="line">            request.onRequestFinished &#x3D; (request, respone) &#x3D;&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(string.Format(&quot;onRequestFinished:&#123;0&#125;&quot;, respone.response));</span><br><span class="line">            &#125;;</span><br><span class="line">            request.Send();</span><br><span class="line">            Console.WriteLine(&quot;request.Send!&quot;);</span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>定义三个 委托类型，进度改变的时候调用回调函数，通知进度更新</p><img src="/2020/09/05/csharp/csharp-async/1.png" class="" title="委托回调">  <h2 id="使用Task"><a href="#使用Task" class="headerlink" title="使用Task"></a>使用Task</h2><h3 id="任务和线程的区别："><a href="#任务和线程的区别：" class="headerlink" title="任务和线程的区别："></a>任务和线程的区别：</h3><h4 id="1-任务是架构在线程之上的，也就是说任务最终还是要抛给线程去执行。"><a href="#1-任务是架构在线程之上的，也就是说任务最终还是要抛给线程去执行。" class="headerlink" title="1. 任务是架构在线程之上的，也就是说任务最终还是要抛给线程去执行。"></a>1. 任务是架构在线程之上的，也就是说任务最终还是要抛给线程去执行。</h4><h4 id="2-任务跟线程不是一对一的关系，比如开10个任务并不是说会开10个线程，这一点任务有点类似线程池，但是任务相比线程池有很小的开销和精确的控制。"><a href="#2-任务跟线程不是一对一的关系，比如开10个任务并不是说会开10个线程，这一点任务有点类似线程池，但是任务相比线程池有很小的开销和精确的控制。" class="headerlink" title="2. 任务跟线程不是一对一的关系，比如开10个任务并不是说会开10个线程，这一点任务有点类似线程池，但是任务相比线程池有很小的开销和精确的控制。"></a>2. 任务跟线程不是一对一的关系，比如开10个任务并不是说会开10个线程，这一点任务有点类似线程池，但是任务相比线程池有很小的开销和精确的控制。</h4><h4 id="3-Task的优势"><a href="#3-Task的优势" class="headerlink" title="3. Task的优势"></a>3. Task的优势</h4><p>ThreadPool相比Thread来说具备了很多优势，但是ThreadPool却又存在一些使用上的不方便。比如：</p><ul><li>ThreadPool不支持线程的取消、完成、失败通知等交互性操作；</li><li>ThreadPool不支持线程执行的先后次序；</li></ul><p>以往，如果开发者要实现上述功能，需要完成很多额外的工作，现在，微软提供了一个功能更强大的概念：Task。Task在线程池的基础上进行了优化，并提供了更多的API。在Framework 4.0中，如果我们要编写多线程程序，Task显然已经优于传统的方式。</p><h3 id="创建无返回值的Task"><a href="#创建无返回值的Task" class="headerlink" title="创建无返回值的Task"></a>创建无返回值的Task</h3><h4 id="1-new"><a href="#1-new" class="headerlink" title="1. new"></a>1. new</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">static void TaskMethod(string taskname)&#123;</span><br><span class="line">    &#x2F;&#x2F;Thread.Sleep(500);</span><br><span class="line">    &#x2F;&#x2F;Task TODO </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void Main(string[] args)&#123;</span><br><span class="line">    Task task1 &#x3D; new Task(() &#x3D;&gt; TaskMethod(&quot;Task 1&quot;)); &#x2F;&#x2F;TaskMethod 具体任务操作</span><br><span class="line">    task1.Start();</span><br><span class="line">    Task.WaitAll(task1);&#x2F;&#x2F;等待任务结束</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-Task-Factory-StartNew"><a href="#2-Task-Factory-StartNew" class="headerlink" title="2. Task.Factory.StartNew"></a>2. Task.Factory.StartNew</h4><p>构造函数创建的task,必须手动Start,而通过工厂创建的Task直接就启动了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Task.Factory.StartNew(() &#x3D;&gt; TaskMethod(&quot;Task 3&quot;));    &#x2F;&#x2F;直接异步的方法</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var t3&#x3D;Task.Factory.StartNew(() &#x3D;&gt; TaskMethod(&quot;Task 3&quot;));</span><br><span class="line">Task.WaitAll(t3);&#x2F;&#x2F;等待任务结束</span><br></pre></td></tr></table></figure><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace AsyncTaskTest</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 测试不带泛型参数的Task</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    public class TaskTest_NonGeneric</span><br><span class="line">    &#123;</span><br><span class="line">        static void TaskMethod(string taskname)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;Task &#123;0&#125; is running on a thread id &#123;1&#125;. Is thread pool thread: &#123;2&#125;&quot;,</span><br><span class="line">                        taskname, Thread.CurrentThread.ManagedThreadId, Thread.CurrentThread.IsThreadPoolThread);</span><br><span class="line">            Thread.Sleep(500);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static void Test()</span><br><span class="line">        &#123;</span><br><span class="line">            Task task1 &#x3D; new Task(() &#x3D;&gt; TaskMethod(&quot;T1&quot;)); &#x2F;&#x2F;TaskMethod 具体任务操作</span><br><span class="line">            task1.Start();</span><br><span class="line">            Task.WaitAll(task1);&#x2F;&#x2F;等待任务结束</span><br><span class="line"></span><br><span class="line">            Task.Factory.StartNew(() &#x3D;&gt; TaskMethod(&quot;T2&quot;));    &#x2F;&#x2F;直接异步的方法</span><br><span class="line"></span><br><span class="line">            var t3 &#x3D; Task.Factory.StartNew(() &#x3D;&gt; TaskMethod(&quot;T3&quot;));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/09/05/csharp/csharp-async/2.png" class="" title="无返回值Task">  <h3 id="创建带返回值的Task"><a href="#创建带返回值的Task" class="headerlink" title="创建带返回值的Task"></a>创建带返回值的Task</h3><h4 id="1-New"><a href="#1-New" class="headerlink" title="1. New"></a>1. New</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Task&lt;int&gt; task &#x3D; CreateTask(&quot;Task 1&quot;);</span><br><span class="line">task.Start();</span><br><span class="line">int result &#x3D; task.Result;</span><br></pre></td></tr></table></figure><h4 id="2-让Task-任务在主线程运行"><a href="#2-让Task-任务在主线程运行" class="headerlink" title="2. 让Task 任务在主线程运行"></a>2. 让Task 任务在主线程运行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Task&lt;int&gt; task &#x3D; CreateTask(&quot;Task 2&quot;);</span><br><span class="line">&#x2F;&#x2F;该任务会运行在主线程中</span><br><span class="line">task.RunSynchronously();</span><br><span class="line">int result &#x3D; task.Result;</span><br></pre></td></tr></table></figure><h4 id="3-代码示例"><a href="#3-代码示例" class="headerlink" title="3. 代码示例"></a>3. 代码示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace AsyncTaskTest</span><br><span class="line">&#123;</span><br><span class="line">    public class TaskTest</span><br><span class="line">    &#123;</span><br><span class="line">        static int TaskMethod(string taskname)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;Task &#123;0&#125; is running on a thread id &#123;1&#125;. Is thread pool thread: &#123;2&#125;&quot;,</span><br><span class="line">                        taskname, Thread.CurrentThread.ManagedThreadId, Thread.CurrentThread.IsThreadPoolThread);</span><br><span class="line">            Thread.Sleep(500);</span><br><span class="line">            return 100;</span><br><span class="line">        &#125;</span><br><span class="line">        static Task&lt;int&gt; CreateTask(string name)</span><br><span class="line">        &#123;</span><br><span class="line">            return new Task&lt;int&gt;(() &#x3D;&gt; TaskMethod(name));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static void Test()</span><br><span class="line">        &#123;</span><br><span class="line">            TaskMethod(&quot;Main Thread Task&quot;);</span><br><span class="line"></span><br><span class="line">            Task&lt;int&gt; task &#x3D; CreateTask(&quot;T1&quot;);</span><br><span class="line">            task.Start();</span><br><span class="line">            int result &#x3D; task.Result;</span><br><span class="line">            Console.WriteLine(&quot;T1 Result is: &#123;0&#125;&quot;, result);</span><br><span class="line"></span><br><span class="line">            task &#x3D; CreateTask(&quot;T2&quot;);</span><br><span class="line">            &#x2F;&#x2F;该任务会运行在主线程中</span><br><span class="line">            task.RunSynchronously();</span><br><span class="line">            result &#x3D; task.Result;</span><br><span class="line">            Console.WriteLine(&quot;T2 Result is: &#123;0&#125;&quot;, result);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/2020/09/05/csharp/csharp-async/3.png" class="" title="带返回值Task">  <h3 id="任务调度器-TaskScheduler"><a href="#任务调度器-TaskScheduler" class="headerlink" title="任务调度器 TaskScheduler"></a>任务调度器 TaskScheduler</h3><p>可以自定义任务调度器，将某些任务放入一个线程中，例如一串渲染任务，放入渲染线程中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Concurrent;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Threading;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace AsyncTaskTest</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 自定义任务调度器</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 将任务 用同一个线程进行调度</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    class MyTaskScheduler : TaskScheduler</span><br><span class="line">    &#123;</span><br><span class="line">        public static new TaskScheduler Current &#123; get; &#125; &#x3D; new MyTaskScheduler();</span><br><span class="line">        public static new TaskScheduler Default &#123; get; &#125; &#x3D; Current;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; 线程安全集合</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">        private readonly BlockingCollection&lt;Task&gt; m_queue &#x3D; new BlockingCollection&lt;Task&gt;();</span><br><span class="line"></span><br><span class="line">        MyTaskScheduler()</span><br><span class="line">        &#123;</span><br><span class="line">            Thread thread &#x3D; new Thread(Run);</span><br><span class="line">            thread.IsBackground &#x3D; true;&#x2F;&#x2F;设为为后台线程，当主线程结束时线程自动结束</span><br><span class="line">            thread.Start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private void Run()</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine($&quot;MyTaskScheduler, ThreadID: &#123;Thread.CurrentThread.ManagedThreadId&#125;&quot;);</span><br><span class="line">            Task t;</span><br><span class="line">            while (m_queue.TryTake(out t, Timeout.Infinite))</span><br><span class="line">            &#123;</span><br><span class="line">                TryExecuteTask(t);&#x2F;&#x2F;在当前线程执行Task</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        protected override IEnumerable&lt;Task&gt; GetScheduledTasks()</span><br><span class="line">        &#123;</span><br><span class="line">            return m_queue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; t.Start(MyTaskScheduler.Current)时，将Task加入到队列中</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;task&quot;&gt;&lt;&#x2F;param&gt;</span><br><span class="line">        protected override void QueueTask(Task task)</span><br><span class="line">        &#123;</span><br><span class="line">            m_queue.Add(task);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;当执行该函数时，程序正在尝试以同步的方式执行Task代码</span><br><span class="line">        protected override bool TryExecuteTaskInline(Task task, bool taskWaspreviouslyQueued)</span><br><span class="line">        &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 任务调度器测试</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    class TaskSchedulerTest</span><br><span class="line">    &#123;</span><br><span class="line">        static void TaskMethod(string taskname)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;Task &#123;0&#125; is running on a thread id &#123;1&#125;. Is thread pool thread: &#123;2&#125;&quot;,</span><br><span class="line">                        taskname, Thread.CurrentThread.ManagedThreadId, Thread.CurrentThread.IsThreadPoolThread);</span><br><span class="line">            Thread.Sleep(500);</span><br><span class="line">        &#125;</span><br><span class="line">        static Task CreateTask(string name)</span><br><span class="line">        &#123;</span><br><span class="line">            return new Task(() &#x3D;&gt; TaskMethod(name));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static void Test()</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine($&quot;Main, ThreadID: &#123;Thread.CurrentThread.ManagedThreadId&#125;&quot;);</span><br><span class="line">            for (int i &#x3D; 0; i &lt; 10; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                var t &#x3D; CreateTask(&quot;T&quot; + (i+1));</span><br><span class="line">                t.Start(MyTaskScheduler.Current);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/09/05/csharp/csharp-async/4.png" class="" title="任务调度器">  <h3 id="任务组合-ContinueWith"><a href="#任务组合-ContinueWith" class="headerlink" title="任务组合 ContinueWith"></a>任务组合 ContinueWith</h3><p>将任务和任务之间 进行串联，并联执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace AsyncTaskTest</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 任务组合</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    class ContinueWithTest</span><br><span class="line">    &#123;</span><br><span class="line">        private static readonly Random rand &#x3D; new Random();</span><br><span class="line">        static void TaskMethod(string taskname)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;Task &#123;0&#125; is running on a thread id &#123;1&#125;. Is thread pool thread: &#123;2&#125;&quot;,</span><br><span class="line">                        taskname, Thread.CurrentThread.ManagedThreadId, Thread.CurrentThread.IsThreadPoolThread);</span><br><span class="line">            int sleepTime &#x3D; rand.Next(100, 500);</span><br><span class="line">            Thread.Sleep(sleepTime);</span><br><span class="line">            Console.WriteLine(&quot;Task &#123;0&#125; Completed!&quot;,taskname);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        static Task CreateTask(string name)</span><br><span class="line">        &#123;</span><br><span class="line">            return new Task(() &#x3D;&gt; TaskMethod(name));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static void Test()</span><br><span class="line">        &#123;</span><br><span class="line">            Task task1 &#x3D; CreateTask(&quot;Task1&quot;);</span><br><span class="line">            Task task2 &#x3D; CreateTask(&quot;Task2&quot;);</span><br><span class="line">            </span><br><span class="line">            task1.Start();</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;主线程执行其他处理&quot;);</span><br><span class="line">            task1.ContinueWith(t &#x3D;&gt; &#123; </span><br><span class="line">                task2.Start(); </span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static void Test1()</span><br><span class="line">        &#123;</span><br><span class="line">            Task task1 &#x3D; CreateTask(&quot;Task1&quot;);</span><br><span class="line">            Task task2 &#x3D; CreateTask(&quot;Task2&quot;);</span><br><span class="line">            Task task3 &#x3D; CreateTask(&quot;Task3&quot;);</span><br><span class="line">            Task task4 &#x3D; CreateTask(&quot;Task4&quot;);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; t1-&gt;[t2,t3]-&gt;t4</span><br><span class="line"></span><br><span class="line">            task1.Start();</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;主线程执行其他处理&quot;);</span><br><span class="line">            task1.ContinueWith(t &#x3D;&gt; &#123;</span><br><span class="line">                task2.Start();</span><br><span class="line">                task3.Start();</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            Task t23 &#x3D; Task.WhenAll(task2, task3);</span><br><span class="line">            t23.ContinueWith(t &#x3D;&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                task4.Start();</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/2020/09/05/csharp/csharp-async/5-1.png" class="" title="Test">  <img src="/2020/09/05/csharp/csharp-async/5-2.png" class="" title="Test2">  <h2 id="使用Promise"><a href="#使用Promise" class="headerlink" title="使用Promise"></a>使用Promise</h2><p>引用库 <a href="https://github.com/Real-Serious-Games/C-Sharp-Promise">RSG-CSharpPromise</a></p><p>示例程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public IPromise&lt;string&gt; Download(string url)</span><br><span class="line">&#123;</span><br><span class="line">    var promise &#x3D; new Promise&lt;string&gt;();    &#x2F;&#x2F; Create promise.</span><br><span class="line">    using (var client &#x3D; new WebClient())</span><br><span class="line">    &#123;</span><br><span class="line">        client.DownloadStringCompleted +&#x3D;   &#x2F;&#x2F; Monitor event for download completed.</span><br><span class="line">            (s, ev) &#x3D;&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                if (ev.Error !&#x3D; null)</span><br><span class="line">                &#123;</span><br><span class="line">                    promise.Reject(ev.Error);   &#x2F;&#x2F; Error during download, reject the promise.</span><br><span class="line">                &#125;</span><br><span class="line">                else</span><br><span class="line">                &#123;</span><br><span class="line">                    promise.Resolve(ev.Result); &#x2F;&#x2F; Downloaded completed successfully, resolve the promise.</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">        client.DownloadStringAsync(new Uri(url), null); &#x2F;&#x2F; Initiate async op.</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return promise; &#x2F;&#x2F; Return the promise so the caller can await resolution (or error).</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void Test()&#123;</span><br><span class="line">    Download(&quot;http:&#x2F;&#x2F;www.google.com&quot;)</span><br><span class="line">    .Then(html &#x3D;&gt;</span><br><span class="line">        Console.WriteLine(html)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多不介绍了</p><h2 id="使用async-await"><a href="#使用async-await" class="headerlink" title="使用async/await"></a>使用async/await</h2><h3 id="async-await的基础用法"><a href="#async-await的基础用法" class="headerlink" title="async/await的基础用法"></a>async/await的基础用法</h3><p>async/await 结构可分成三部分：</p><ol><li>调用方法：该方法调用异步方法，然后在异步方法执行其任务的时候继续执行；</li><li>异步方法：该方法异步执行工作，然后立刻返回到调用方法；</li><li>await 表达式：用于异步方法内部，指出需要异步执行的任务。一个异步方法可以包含多个 await 表达式（不存在 await 表达式的话 IDE 会发出警告）。</li></ol><h3 id="async-await的优点"><a href="#async-await的优点" class="headerlink" title="async/await的优点"></a>async/await的优点</h3><ul><li><ol><li>方便级联调用：即调用依次发生的场景；</li></ol></li><li><ol start="2"><li>同步代码编写方式： Promise使用then函数进行链式调用，一直点点点，是一种从左向右的横向写法；async/await从上到下，顺序执行，就像写同步代码一样，更符合代码编写习惯；</li></ol></li><li><ol start="3"><li>多个参数传递： Promise的then函数只能传递一个参数，虽然可以通过包装成对象来传递多个参数，但是会导致传递冗余信息，频繁的解析又重新组合参数，比较麻烦；async/await没有这个限制，可以当做普通的局部变量来处理，用let或者const定义的块级变量想怎么用就怎么用，想定义几个就定义几个，完全没有限制，也没有冗余工作；</li></ol></li><li><ol start="4"><li>同步代码和异步代码可以一起编写： 使用Promise的时候最好将同步代码和异步代码放在不同的then节点中，这样结构更加清晰；async/await整个书写习惯都是同步的，不需要纠结同步和异步的区别，当然，异步过程需要包装成一个Promise对象放在await关键字后面；</li></ol></li><li><ol start="5"><li>基于协程： Promise是根据函数式编程的范式，对异步过程进行了一层封装，async/await基于协程的机制，是真正的“保存上下文，控制权切换……控制权恢复，取回上下文”这种机制，是对异步过程更精确的一种描述；</li></ol></li><li><ol start="6"><li>async/await 是对Promise的优化： async/await 是基于Promise的，是进一步的一种优化，不过在写代码时，Promise本身的API出现得很少，很接近同步代码的写法；</li></ol></li></ul><h3 id="代码演示-两种写法的区别"><a href="#代码演示-两种写法的区别" class="headerlink" title="代码演示 两种写法的区别"></a>代码演示 两种写法的区别</h3><p>T1-&gt;[T2,T3]-&gt;T4</p><p>Promise写法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">using RSG;</span><br><span class="line">using System;</span><br><span class="line">using System.Threading;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace AsyncTest</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; Promise</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    class AsyncPromiseTest</span><br><span class="line">    &#123;</span><br><span class="line">        private static readonly Random rand &#x3D; new Random();</span><br><span class="line">        static void TaskMethod(string taskname, Promise p)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;Task &#123;0&#125; is running on a thread id &#123;1&#125;. Is thread pool thread: &#123;2&#125;&quot;,</span><br><span class="line">                        taskname, Thread.CurrentThread.ManagedThreadId, Thread.CurrentThread.IsThreadPoolThread);</span><br><span class="line">            Thread.Sleep(rand.Next(100, 500));</span><br><span class="line">            Console.WriteLine(&quot;Task &#123;0&#125; Completed&quot;, taskname);</span><br><span class="line">            p.Resolve();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        static Task CreateTask(string name, Promise p)</span><br><span class="line">        &#123;</span><br><span class="line">            return new Task(() &#x3D;&gt; TaskMethod(name, p));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; void 返回值的 async </span><br><span class="line">        &#x2F;&#x2F;&#x2F; t1-&gt;(t2,t3)-&gt;t4</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">        static IPromise CalcAsync()</span><br><span class="line">        &#123;</span><br><span class="line">            Promise p1 &#x3D; new Promise();</span><br><span class="line">            Promise p2 &#x3D; new Promise();</span><br><span class="line">            Promise p3 &#x3D; new Promise();</span><br><span class="line">            Promise p4 &#x3D; new Promise();</span><br><span class="line"></span><br><span class="line">            Task task1 &#x3D; CreateTask(&quot;T1&quot;, p1);</span><br><span class="line">            Task task2 &#x3D; CreateTask(&quot;T2&quot;, p2);</span><br><span class="line">            Task task3 &#x3D; CreateTask(&quot;T3&quot;, p3);</span><br><span class="line">            Task task4 &#x3D; CreateTask(&quot;T4&quot;, p4);</span><br><span class="line"></span><br><span class="line">            p1.Then(() &#x3D;&gt; &#123;</span><br><span class="line">                task2.Start();</span><br><span class="line">                task3.Start();</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            Promise.All(p2, p3).Then(() &#x3D;&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                task4.Start();</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            task1.Start();</span><br><span class="line"></span><br><span class="line">            return p4.Then(() &#x3D;&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static void Test()</span><br><span class="line">        &#123;</span><br><span class="line">            var ipromise &#x3D; CalcAsync();  &#x2F;&#x2F; void 类型不能 接受返回值</span><br><span class="line">            ipromise.Then(() &#x3D;&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(&quot;Calc Completed.&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/2020/09/05/csharp/csharp-async/6-1.png" class="" title="AsyncPromiseTest">  <p>async/await 写法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Threading;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace AsyncTest</span><br><span class="line">&#123;</span><br><span class="line">    public class AsyncTest_NonGeneric</span><br><span class="line">    &#123;</span><br><span class="line">        private static readonly Random rand &#x3D; new Random();</span><br><span class="line">        static void TaskMethod(string taskname)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;Task &#123;0&#125; is running on a thread id &#123;1&#125;. Is thread pool thread: &#123;2&#125;&quot;,</span><br><span class="line">                        taskname, Thread.CurrentThread.ManagedThreadId, Thread.CurrentThread.IsThreadPoolThread);</span><br><span class="line">            Thread.Sleep(rand.Next(100,500));</span><br><span class="line">            Console.WriteLine(&quot;Task &#123;0&#125; Completed&quot;, taskname);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        static Task CreateTask(string name)</span><br><span class="line">        &#123;</span><br><span class="line">            return new Task(() &#x3D;&gt; TaskMethod(name));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; void 返回值的 async </span><br><span class="line">        &#x2F;&#x2F;&#x2F; t1-&gt;(t2,t3)-&gt;t4</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">        static async void CalcAsync()</span><br><span class="line">        &#123;</span><br><span class="line">            Task task1 &#x3D; CreateTask(&quot;T1&quot;);</span><br><span class="line">            task1.Start();</span><br><span class="line">            await task1;</span><br><span class="line">            Console.WriteLine(&quot;T1 Completed !&quot; + &quot;CalcAsync Thread ID is :&quot; + Thread.CurrentThread.ManagedThreadId);</span><br><span class="line"></span><br><span class="line">            Task task2 &#x3D; CreateTask(&quot;T2&quot;);</span><br><span class="line">            task2.Start();</span><br><span class="line">            Task task3 &#x3D; CreateTask(&quot;T3&quot;);</span><br><span class="line">            task3.Start();</span><br><span class="line"></span><br><span class="line">            await task2;</span><br><span class="line">            Console.WriteLine(&quot;T2 Completed !&quot; + &quot;CalcAsync Thread ID is :&quot; + Thread.CurrentThread.ManagedThreadId);</span><br><span class="line">            await task3;</span><br><span class="line">            Console.WriteLine(&quot;T3 Completed !&quot; + &quot;CalcAsync Thread ID is :&quot; + Thread.CurrentThread.ManagedThreadId);</span><br><span class="line">            </span><br><span class="line">            Task task4 &#x3D; CreateTask(&quot;T4&quot;);</span><br><span class="line">            task4.Start();</span><br><span class="line">            await task4;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;CalcAsync Completed !&quot; + &quot;CalcAsync Thread ID is :&quot; + Thread.CurrentThread.ManagedThreadId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static void Test()</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;Main Thread CalcAsync Before&quot;);</span><br><span class="line">            CalcAsync();  &#x2F;&#x2F; void 类型不能 接受返回值</span><br><span class="line">            Console.WriteLine(&quot;Main Thread CalcAsync After&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/2020/09/05/csharp/csharp-async/6-2.png" class="" title="async&#x2F;await">  <h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><p><a href="AsyncTest.zip" title="源码下载">点击下载</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;&lt;p&gt;异步处理的几种方式&lt;/p&gt;</summary>
    
    
    
    <category term="CSharp" scheme="http://blog.rcant.com/categories/CSharp/"/>
    
    
    <category term="CSharp" scheme="http://blog.rcant.com/tags/CSharp/"/>
    
    <category term="task" scheme="http://blog.rcant.com/tags/task/"/>
    
    <category term="promise" scheme="http://blog.rcant.com/tags/promise/"/>
    
  </entry>
  
  <entry>
    <title>CSharp 协程处理</title>
    <link href="http://blog.rcant.com/2020/09/04/csharp/csharp-coroutine/"/>
    <id>http://blog.rcant.com/2020/09/04/csharp/csharp-coroutine/</id>
    <published>2020-09-04T05:02:52.000Z</published>
    <updated>2020-09-05T09:00:59.396Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><a id="more"></a>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;</summary>
    
    
    
    <category term="CSharp" scheme="http://blog.rcant.com/categories/CSharp/"/>
    
    
    <category term="CSharp" scheme="http://blog.rcant.com/tags/CSharp/"/>
    
    <category term="Coroutine" scheme="http://blog.rcant.com/tags/Coroutine/"/>
    
  </entry>
  
  <entry>
    <title>数据结构-跳表</title>
    <link href="http://blog.rcant.com/2020/09/01/datastruct/datastruct-skiplist/"/>
    <id>http://blog.rcant.com/2020/09/01/datastruct/datastruct-skiplist/</id>
    <published>2020-09-01T06:40:07.000Z</published>
    <updated>2020-09-14T11:11:09.769Z</updated>
    
    <content type="html"><![CDATA[<p>数据结构-跳表</p><p>SkipList</p><a id="more"></a><h2 id="跳表的原理"><a href="#跳表的原理" class="headerlink" title="跳表的原理"></a>跳表的原理</h2><h3 id="什么是跳表"><a href="#什么是跳表" class="headerlink" title="什么是跳表"></a>什么是跳表</h3><p>链表，相信大家都不陌生，维护一个有序的链表是一件非常简单的事情，我们都知道，在一个有序的链表里面，查询跟插入的算法复杂度都是O(n)。</p><img src="/2020/09/01/datastruct/datastruct-skiplist/linkedlist-1.png" class="" title="进入编辑模式"><p>对上述有序列表建立一层索引<br>这样 就可以加速查询效率和 插入效率<br>比如查找 11，不加索引的需要查找 6次<br>加了一层索引以后，只需要查找 4次<br>查找速度为 O(n/2) +1</p><img src="/2020/09/01/datastruct/datastruct-skiplist/linkedlist-2.png" class="" title="进入编辑模式"><p>如果再加一层索引 就变成是 O(n/4) + 2</p><img src="/2020/09/01/datastruct/datastruct-skiplist/linkedlist-3.png" class="" title="进入编辑模式"><p>跳表就是这样的一种数据结构，结点是跳过一部分的，<br>从而加快了查询的速度。跳表跟红黑树又有什么差别呢？</p><p>既然两者的算法复杂度差不多，为什么Redis要使用跳表而不使用红黑树呢？<br>跳表相对于红黑树，主要有这几个优点：</p><ol><li>代码相对简单</li><li>如果我们要查询一个区间里面的值，用平衡树可能会麻烦。<br>这里的麻烦指的是实现和理解上，平衡二叉树查询一段区间也是可以做到的。</li><li>删除一段区间，这个如果是平衡二叉树，就会相当困难，<br>毕竟设计到树的平衡问题，而跳表则没有这种烦恼。</li></ol><h3 id="跳表查询元素"><a href="#跳表查询元素" class="headerlink" title="跳表查询元素"></a>跳表查询元素</h3><p>假如我们要查询11，那么我们从最上层出发，<br>发现下一个是5，再下一个是13，已经大于11，所以进入下一层，<br>下一层的一个是9，查找下一个，下一个又是13，再次进入下一层。<br>最终找到11。</p><p>最终 一定查找会进入最底层</p><img src="/2020/09/01/datastruct/datastruct-skiplist/skip-find.png" class="" title="进入编辑模式"><h3 id="跳表插入元素"><a href="#跳表插入元素" class="headerlink" title="跳表插入元素"></a>跳表插入元素</h3><p>插入</p><p>插入的时候，首先要进行查询，然后从最底层开始，插入被插入的元素。<br>然后看看从下而上，是否需要逐层插入。</p><p>这里不需要完全平衡</p><p>最底层往上获取一个随机值[0,1]，判断小于0.5不插入结束，<br>否则将元素插入到当前层，并向上找一层，获取随机值[0,1]判断是否小于0.5<br>来确定当前层是否需要插入，除非到到最上层了，否则继续向上找上一层</p><p>插入 8</p><p>查询插入位置</p><img src="/2020/09/01/datastruct/datastruct-skiplist/skip-insert1.png" class="" title="进入编辑模式"><p>底层插入，判断其上一层是否需要插入</p><img src="/2020/09/01/datastruct/datastruct-skiplist/skip-insert2.png" class="" title="进入编辑模式"><p>继续判断直到条件不成立，或者到达最大层</p><img src="/2020/09/01/datastruct/datastruct-skiplist/skip-insert3.png" class="" title="进入编辑模式"><h3 id="跳表删除元素"><a href="#跳表删除元素" class="headerlink" title="跳表删除元素"></a>跳表删除元素</h3><p>首先需要查询最底层，然后对其他层做相同操作<br>删除需要删除每一层的对应节点</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>设计图</p><img src="/2020/09/01/datastruct/datastruct-skiplist/skip-yanhua.png" class="" title="设计图"><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">static void Main(string[] args)</span><br><span class="line">&#123;</span><br><span class="line">    TestSkipList();</span><br><span class="line">&#125;</span><br><span class="line">static void TestSkipList()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;测试 调表结构</span><br><span class="line">    SkipList&lt;string, int&gt; skipList &#x3D; new DataStructLib.SkipList&lt;string, int&gt;();</span><br><span class="line">    skipList.Add(&quot;1&quot;, 32);</span><br><span class="line">    Console.WriteLine(skipList);</span><br><span class="line">    skipList.Add(&quot;2&quot;, 12);</span><br><span class="line">    Console.WriteLine(skipList);</span><br><span class="line">    skipList.Add(&quot;4&quot;, 36);</span><br><span class="line">    Console.WriteLine(skipList);</span><br><span class="line">    skipList.Add(&quot;22&quot;, 3222);</span><br><span class="line">    Console.WriteLine(skipList);</span><br><span class="line">    skipList.Add(&quot;12&quot;, 1122);</span><br><span class="line">    Console.WriteLine(skipList);</span><br><span class="line">    skipList.Add(&quot;6&quot;, 31);</span><br><span class="line">    Console.WriteLine(skipList);</span><br><span class="line">    skipList.Remove(&quot;12&quot;);</span><br><span class="line">    Console.WriteLine(skipList);</span><br><span class="line">    skipList.Remove(&quot;6&quot;);</span><br><span class="line">    Console.WriteLine(skipList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="SkipList.cs" title="源码下载">点击下载</a></p><p>测试图1</p><img src="/2020/09/01/datastruct/datastruct-skiplist/skip-test.png" class="" title="测试"><p>测试图2</p><img src="/2020/09/01/datastruct/datastruct-skiplist/skip-test2.png" class="" title="测试"><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总结：</p><ol><li>跳表一定是一个有序表，否则就没有意义</li><li>跳表的实现是对有序链表加入了多级缓存</li><li>跳表是随机平衡的</li><li>数据量达不到一定级别的话，还是不要使用跳表了，因为有缓存的开销，得不偿失</li><li>跳表的内存开销是 原链表的两倍，跳表查询插入和删除时间复杂度大概是 O(logn)，</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;数据结构-跳表&lt;/p&gt;
&lt;p&gt;SkipList&lt;/p&gt;</summary>
    
    
    
    <category term="datastruct" scheme="http://blog.rcant.com/categories/datastruct/"/>
    
    
    <category term="datastruct" scheme="http://blog.rcant.com/tags/datastruct/"/>
    
  </entry>
  
  <entry>
    <title>CSharp ApiDoc 自动生成API文档</title>
    <link href="http://blog.rcant.com/2020/08/26/csharp/csharp-docfx/"/>
    <id>http://blog.rcant.com/2020/08/26/csharp/csharp-docfx/</id>
    <published>2020-08-26T03:39:17.000Z</published>
    <updated>2020-08-26T12:11:55.756Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>同于生成API文档记录</p><a id="more"></a><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://dotnet.github.io/docfx/tutorial/docfx_getting_started.html">Docfx Getting Started</a></li></ul><h2 id="安装DocFx"><a href="#安装DocFx" class="headerlink" title="安装DocFx"></a>安装DocFx</h2><h3 id="使用-Chocolatey-安装"><a href="#使用-Chocolatey-安装" class="headerlink" title="使用 Chocolatey 安装"></a>使用 <strong>Chocolatey</strong> 安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install docfx -y.</span><br></pre></td></tr></table></figure><h3 id="使用-Homebrew-安装"><a href="#使用-Homebrew-安装" class="headerlink" title="使用 Homebrew 安装"></a>使用 <strong>Homebrew</strong> 安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install docfx.</span><br></pre></td></tr></table></figure><h3 id="去-GitHub-下载文件安装"><a href="#去-GitHub-下载文件安装" class="headerlink" title="去 GitHub 下载文件安装"></a>去 <strong>GitHub</strong> 下载文件安装</h3><ul><li>从 <strong>GitHub</strong> <a href="https://github.com/dotnet/docfx/releases">DocFx 下载</a> 文件 <em>docfx.zip</em></li><li>解压文件 <em>docfx.zip</em> </li><li>添加到环境变量 <strong>Path</strong> 中</li></ul><h2 id="验证安装是否成功"><a href="#验证安装是否成功" class="headerlink" title="验证安装是否成功"></a>验证安装是否成功</h2><p>使用命令行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docfx.exe --version</span><br><span class="line">docfx 2.56.2.0</span><br><span class="line">Copyright (C) 2020 ? Microsoft Corporation. All rights reserved.</span><br><span class="line">This is open-source software under MIT License.</span><br></pre></td></tr></table></figure><h2 id="使用-DocFx"><a href="#使用-DocFx" class="headerlink" title="使用 DocFx"></a>使用 <strong>DocFx</strong></h2><h3 id="使用-Visual-Studio-集成-DocFx"><a href="#使用-Visual-Studio-集成-DocFx" class="headerlink" title="使用 Visual Studio 集成 DocFx"></a>使用 Visual Studio 集成 DocFx</h3><ol><li>使用 <strong>Visual Studio</strong> 创建  <strong>Class Library (.NET Framework)</strong> 项目</li><li>右键项目，选择 <strong>Manage NuGet Package</strong></li><li>搜索并安装 <strong>docfx.console</strong> </li><li><strong>Build</strong> the project, and a <em>_site</em> folder will be generated with the documentation.</li></ol><h3 id="单独创建-DocFx-项目"><a href="#单独创建-DocFx-项目" class="headerlink" title="单独创建 DocFx 项目"></a>单独创建 <strong>DocFx</strong> 项目</h3><ol><li>创建 <em>docfx init -q</em> 项目</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ docfx init -q</span><br><span class="line">$ treee -L 2</span><br><span class="line"></span><br><span class="line">E:\projects\csharp\FmoLib</span><br><span class="line">├── Debugger</span><br><span class="line">├── docfx_project</span><br><span class="line">├── FmoLib</span><br><span class="line">├── FmoLib.sln</span><br><span class="line">├── FmoLibDemo</span><br><span class="line">├── link.cmd</span><br><span class="line">├── README.md</span><br><span class="line">└── ShareLibrary</span><br><span class="line"></span><br><span class="line">directory: 5 file: 3</span><br><span class="line"></span><br><span class="line">ignored</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ cd docfx_project</span><br><span class="line">$ treee -L 2</span><br><span class="line"></span><br><span class="line">E:\projects\csharp\FmoLib\docfx_project</span><br><span class="line">├── api</span><br><span class="line">├── apidoc</span><br><span class="line">├── articles</span><br><span class="line">├── docfx.json</span><br><span class="line">├── images</span><br><span class="line">├── index.md</span><br><span class="line">├── src</span><br><span class="line">└── toc.yml</span><br><span class="line"></span><br><span class="line">directory: 5 file: 3</span><br><span class="line"></span><br><span class="line">ignored</span><br></pre></td></tr></table></figure><ol start="2"><li>修改 <em>docfx.json</em> 添加代码文档</li></ol><p>原始 docfx.json </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;metadata&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;src&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;files&quot;: [</span><br><span class="line">            &quot;src&#x2F;**.csproj&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;dest&quot;: &quot;api&quot;,</span><br><span class="line">      &quot;disableGitFeatures&quot;: false,</span><br><span class="line">      &quot;disableDefaultFilter&quot;: false</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;metadata&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;src&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;files&quot;: [</span><br><span class="line">            &quot;FmoLib&#x2F;**.csproj&quot;</span><br><span class="line">          ],</span><br><span class="line">          &quot;exclude&quot;: [</span><br><span class="line">            &quot;**&#x2F;obj&#x2F;**&quot;,</span><br><span class="line">            &quot;**&#x2F;bin&#x2F;**&quot;,</span><br><span class="line">            &quot;_site&#x2F;**&quot;</span><br><span class="line">          ],</span><br><span class="line">          &quot;cwd&quot;: &quot;..&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;dest&quot;: &quot;api&quot;,</span><br><span class="line">      &quot;disableGitFeatures&quot;: false,</span><br><span class="line">      &quot;disableDefaultFilter&quot;: false</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>生成 <em>doc</em> 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">$ docfx.exe docfx.json --serve</span><br><span class="line">$ treee -L 2</span><br><span class="line">E:\projects\csharp\FmoLib\docfx_project</span><br><span class="line">├── api</span><br><span class="line">|  ├── FmoLib.API.App.yml</span><br><span class="line">|  ├── ...</span><br><span class="line">|  ├── index.md</span><br><span class="line">|  └── toc.yml</span><br><span class="line">├── apidoc</span><br><span class="line">├── articles</span><br><span class="line">|  ├── intro.md</span><br><span class="line">|  └── toc.yml</span><br><span class="line">├── docfx.json</span><br><span class="line">├── images</span><br><span class="line">├── index.md</span><br><span class="line">├── obj</span><br><span class="line">├── src</span><br><span class="line">├── toc.yml</span><br><span class="line">└── _site</span><br><span class="line">   ├── api</span><br><span class="line">   ├── articles</span><br><span class="line">   ├── favicon.ico</span><br><span class="line">   ├── fonts</span><br><span class="line">   ├── index.html</span><br><span class="line">   ├── logo.svg</span><br><span class="line">   ├── manifest.json</span><br><span class="line">   ├── search-stopwords.json</span><br><span class="line">   ├── styles</span><br><span class="line">   ├── toc.html</span><br><span class="line">   └── xrefmap.yml</span><br><span class="line"></span><br><span class="line">directory: 11 file: 233</span><br><span class="line"></span><br><span class="line">ignored</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>访问 <em><a href="http://localhost:8080/">http://localhost:8080</a></em> </p></li></ol><img src="/2020/08/26/csharp/csharp-docfx/1.png" class="" title="首页">  <img src="/2020/08/26/csharp/csharp-docfx/2.png" class="" title="articles">  <img src="/2020/08/26/csharp/csharp-docfx/3.png" class="" title="api">  <h2 id="filterConfig-yml-配置"><a href="#filterConfig-yml-配置" class="headerlink" title="filterConfig.yml 配置"></a><em>filterConfig.yml</em> 配置</h2><blockquote><p>这个文件可以包含包括的文件和不包括的，包括的权限比不包括大，默认是包括所有文件</p></blockquote><p><strong>docfx.json</strong> 关联 <strong>filterConfig.yml</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;metadata&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;src&quot;: [</span><br><span class="line">        ...</span><br><span class="line">      ],</span><br><span class="line">      &quot;dest&quot;: &quot;api&quot;,</span><br><span class="line">      &quot;disableGitFeatures&quot;: false,</span><br><span class="line">      &quot;disableDefaultFilter&quot;: false,</span><br><span class="line">      &quot;filter&quot;: &quot;filterConfig.yml&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>包括的文件使用include 不包括使用 exclude<br>文件示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apiRules:</span><br><span class="line">- include:</span><br><span class="line">    uidRegex: ^Microsoft\.DevDiv\.SpecialCase</span><br><span class="line">- exclude:</span><br><span class="line">    uidRegex: ^Microsoft\.DevDiv</span><br></pre></td></tr></table></figure><p>因为 uidRegex 是匹配，所以对于.需要加上\</p><p>强大的ms还可以匹配是什么类型，提供的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Namespace  </span><br><span class="line">Type  </span><br><span class="line">Class  </span><br><span class="line">Struct  </span><br><span class="line">Enum</span><br><span class="line">Interface</span><br><span class="line">Delegate</span><br><span class="line">Member</span><br><span class="line">Event</span><br><span class="line">Field</span><br><span class="line">Method</span><br><span class="line">Property</span><br></pre></td></tr></table></figure><p>如果要忽略命名空间是 lindexi.laji 的代码，请看下面代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apiRules:</span><br><span class="line">- exclude:</span><br><span class="line">    uidRegex: ^lindexi\.laji*</span><br><span class="line">    type: Namespace</span><br></pre></td></tr></table></figure><h2 id="DocFx生成PDF文件"><a href="#DocFx生成PDF文件" class="headerlink" title="DocFx生成PDF文件"></a>DocFx生成PDF文件</h2><h3 id="安装必要的插件-wkhtmltopdf"><a href="#安装必要的插件-wkhtmltopdf" class="headerlink" title="安装必要的插件 wkhtmltopdf"></a>安装必要的插件 <strong>wkhtmltopdf</strong></h3><h4 id="使用-Chocolatey-安装-1"><a href="#使用-Chocolatey-安装-1" class="headerlink" title="使用 Chocolatey 安装"></a>使用 <strong>Chocolatey</strong> 安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install wkhtmltopdf -y.</span><br></pre></td></tr></table></figure><h4 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h4><ol><li>下载 <a href="https://wkhtmltopdf.org/downloads.html"><strong>wkhtmltopdf</strong></a></li><li>安装 <strong>wkhtmltopdf</strong></li><li>添加到环境变量 <strong>Path</strong> 中</li></ol><h3 id="修改-docfx-json"><a href="#修改-docfx-json" class="headerlink" title="修改 docfx.json"></a>修改 <strong>docfx.json</strong></h3><p>添加 <strong>pdf</strong> 信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;metadata&quot;: [</span><br><span class="line">      ...</span><br><span class="line">  ],</span><br><span class="line">  &quot;build&quot;: &#123;</span><br><span class="line">      ...</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;pdf&quot;: &#123;</span><br><span class="line">   &quot;content&quot;: [</span><br><span class="line">     &#123;</span><br><span class="line">       &quot;files&quot;: [</span><br><span class="line">         &quot;api&#x2F;**.yml&quot;,</span><br><span class="line">         &quot;api-vb&#x2F;**.yml&quot;</span><br><span class="line">       ],</span><br><span class="line">       &quot;exclude&quot;: [</span><br><span class="line">         &quot;**&#x2F;toc.yml&quot;,</span><br><span class="line">         &quot;**&#x2F;toc.md&quot;,</span><br><span class="line">         &quot;README.md&quot;,</span><br><span class="line">         &quot;source_codes&#x2F;**&quot;</span><br><span class="line">       ]</span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">       &quot;files&quot;: [</span><br><span class="line">         &quot;articles&#x2F;**.md&quot;,</span><br><span class="line">         &quot;articles&#x2F;**&#x2F;toc.yml&quot;,</span><br><span class="line">         &quot;toc.yml&quot;,</span><br><span class="line">         &quot;*.md&quot;,</span><br><span class="line">         &quot;pdf&#x2F;*&quot;</span><br><span class="line">       ],</span><br><span class="line">       &quot;exclude&quot;: [</span><br><span class="line">         &quot;**&#x2F;bin&#x2F;**&quot;,</span><br><span class="line">         &quot;**&#x2F;obj&#x2F;**&quot;,</span><br><span class="line">         &quot;_site_pdf&#x2F;**&quot;,</span><br><span class="line">         &quot;**&#x2F;toc.yml&quot;,</span><br><span class="line">         &quot;**&#x2F;toc.md&quot;,</span><br><span class="line">         &quot;README.md&quot;,</span><br><span class="line">         &quot;source_codes&#x2F;**&quot;</span><br><span class="line">       ]</span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">       &quot;files&quot;: &quot;pdf&#x2F;toc.yml&quot;</span><br><span class="line">     &#125;</span><br><span class="line">   ],</span><br><span class="line">   &quot;resource&quot;: [</span><br><span class="line">     &#123;</span><br><span class="line">       &quot;files&quot;: [</span><br><span class="line">         &quot;images&#x2F;**&quot;</span><br><span class="line">       ],</span><br><span class="line">       &quot;exclude&quot;: [</span><br><span class="line">         &quot;**&#x2F;bin&#x2F;**&quot;,</span><br><span class="line">         &quot;**&#x2F;obj&#x2F;**&quot;,</span><br><span class="line">         &quot;_site_pdf&#x2F;**&quot;,</span><br><span class="line">         &quot;README.md&quot;,</span><br><span class="line">         &quot;source_codes&#x2F;**&quot;</span><br><span class="line">       ]</span><br><span class="line">     &#125;</span><br><span class="line">   ],</span><br><span class="line">   &quot;overwrite&quot;: [</span><br><span class="line">     &#123;</span><br><span class="line">       &quot;files&quot;: [</span><br><span class="line">         &quot;apidoc&#x2F;**.md&quot;</span><br><span class="line">       ],</span><br><span class="line">       &quot;exclude&quot;: [</span><br><span class="line">         &quot;**&#x2F;bin&#x2F;**&quot;,</span><br><span class="line">         &quot;**&#x2F;obj&#x2F;**&quot;,</span><br><span class="line">         &quot;_site_pdf&#x2F;**&quot;,</span><br><span class="line">         &quot;README.md&quot;,</span><br><span class="line">         &quot;source_codes&#x2F;**&quot;</span><br><span class="line">       ]</span><br><span class="line">     &#125;</span><br><span class="line">   ],</span><br><span class="line">   &quot;dest&quot;: &quot;_site_pdf&quot;,</span><br><span class="line">   &quot;template&quot;: [&quot;pdf.default&quot;],</span><br><span class="line">   &quot;wkhtmltopdf&quot;: &#123;</span><br><span class="line">    &quot;additionalArguments&quot;: &quot;--enable-local-file-access&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加-“pdf-toc-yml”-文件"><a href="#添加-“pdf-toc-yml”-文件" class="headerlink" title="添加 “pdf/toc.yml” 文件"></a>添加 <strong>“pdf/toc.yml”</strong> 文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- name: Documentation</span><br><span class="line">  href: ..&#x2F;api&#x2F;toc.yml</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">$ treee -l 2</span><br><span class="line"></span><br><span class="line">E:\projects\csharp\FmoLib\docfx_project</span><br><span class="line">├── api</span><br><span class="line">|  ├── FmoLib.API.App.yml</span><br><span class="line">|  ├── ...</span><br><span class="line">|  ├── FmoLib.yml</span><br><span class="line">|  ├── index.md</span><br><span class="line">|  └── toc.yml</span><br><span class="line">├── apidoc</span><br><span class="line">├── articles</span><br><span class="line">|  ├── intro.md</span><br><span class="line">|  └── toc.yml</span><br><span class="line">├── docfx.json</span><br><span class="line">├── docfx_pdf.json</span><br><span class="line">├── filterConfig.yml</span><br><span class="line">├── images</span><br><span class="line">├── index.md</span><br><span class="line">├── obj</span><br><span class="line">├── pdf</span><br><span class="line">|  └── toc.yml</span><br><span class="line">├── src</span><br><span class="line">├── toc.yml</span><br><span class="line">├── _site</span><br><span class="line">|  ├── api</span><br><span class="line">|  ├── articles</span><br><span class="line">|  ├── favicon.ico</span><br><span class="line">|  ├── fonts</span><br><span class="line">|  ├── index.html</span><br><span class="line">|  ├── logo.svg</span><br><span class="line">|  ├── manifest.json</span><br><span class="line">|  ├── search-stopwords.json</span><br><span class="line">|  ├── styles</span><br><span class="line">|  ├── toc.html</span><br><span class="line">|  └── xrefmap.yml</span><br><span class="line">└── _site_pdf</span><br><span class="line">   ├── docfx_project.json</span><br><span class="line">   ├── docfx_project_pdf.pdf</span><br><span class="line">   └── _raw</span><br><span class="line"></span><br><span class="line">directory: 14 file: 157</span><br><span class="line"></span><br><span class="line">ignored</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;&lt;p&gt;同于生成API文档记录&lt;/p&gt;</summary>
    
    
    
    <category term="CSharp" scheme="http://blog.rcant.com/categories/CSharp/"/>
    
    
    <category term="CSharp" scheme="http://blog.rcant.com/tags/CSharp/"/>
    
    <category term="ApiDoc" scheme="http://blog.rcant.com/tags/ApiDoc/"/>
    
    <category term="DocFx" scheme="http://blog.rcant.com/tags/DocFx/"/>
    
  </entry>
  
  <entry>
    <title>NodeJs安装</title>
    <link href="http://blog.rcant.com/2020/08/07/js/nodejs-first/"/>
    <id>http://blog.rcant.com/2020/08/07/js/nodejs-first/</id>
    <published>2020-08-07T06:40:07.000Z</published>
    <updated>2020-08-07T07:03:45.594Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>安装NodeJs</p><a id="more"></a><h2 id="Node安装"><a href="#Node安装" class="headerlink" title="Node安装"></a>Node安装</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>官网下载<br><a href="https://nodejs.org/en/">https://nodejs.org/en/</a><br>我用的是v6.10<br>安装完使用 node -v 验证下</p><h3 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h3><ol><li>安装 homebrew</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>&quot;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>brew 升级</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew update</span><br></pre></td></tr></table></figure><ol start="3"><li>确保brew安全可靠</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew doctor</span><br></pre></td></tr></table></figure><ol start="4"><li><p>修复警告</p></li><li><p>通过brew安装node和npm</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew link node</span><br><span class="line">brew uninstall node</span><br><span class="line">brew install node</span><br></pre></td></tr></table></figure><h3 id="替换brew镜像源"><a href="#替换brew镜像源" class="headerlink" title="替换brew镜像源"></a>替换brew镜像源</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd &quot;$(brew --repo)&quot;</span><br><span class="line">git remote set-url origin https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;brew.git</span><br><span class="line">cd &quot;$(brew --repo)&#x2F;Library&#x2F;Taps&#x2F;homebrew&#x2F;homebrew-core&quot;</span><br><span class="line">git remote set-url origin https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;homebrew-core.git</span><br><span class="line">cd &quot;$(brew --repo)&#x2F;Library&#x2F;Taps&#x2F;homebrew&#x2F;homebrew-cask&quot;</span><br><span class="line">git remote set-url origin https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;homebrew-cask.git</span><br></pre></td></tr></table></figure><h2 id="替换nodejs镜像源"><a href="#替换nodejs镜像源" class="headerlink" title="替换nodejs镜像源"></a>替换nodejs镜像源</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 设置 淘宝镜像源</span><br><span class="line">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 查看 使用的 镜像源</span><br><span class="line">npm config get registry</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 安装 淘宝镜像源</span><br><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;&lt;p&gt;安装NodeJs&lt;/p&gt;</summary>
    
    
    
    <category term="js" scheme="http://blog.rcant.com/categories/js/"/>
    
    
    <category term="nodejs,js" scheme="http://blog.rcant.com/tags/nodejs-js/"/>
    
  </entry>
  
  <entry>
    <title>MacOS 安装HomeBrew</title>
    <link href="http://blog.rcant.com/2020/08/07/osx/os-brew/"/>
    <id>http://blog.rcant.com/2020/08/07/osx/os-brew/</id>
    <published>2020-08-07T06:40:07.000Z</published>
    <updated>2020-08-07T07:51:02.402Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>安装HomeBrew，Mac用的少，记录下，以免忘记</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="方式1-简单的脚本安装brew-网络正常访问raw-githubusercontent-com"><a href="#方式1-简单的脚本安装brew-网络正常访问raw-githubusercontent-com" class="headerlink" title="方式1. 简单的脚本安装brew [网络正常访问raw.githubusercontent.com]"></a>方式1. 简单的脚本安装brew [网络正常访问raw.githubusercontent.com]</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;bin&#x2F;bash -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Homebrew&#x2F;install&#x2F;master&#x2F;install.sh)&quot;</span><br></pre></td></tr></table></figure><h3 id="方式2-ruby-shell-网络正常访问raw-githubusercontent-com"><a href="#方式2-ruby-shell-网络正常访问raw-githubusercontent-com" class="headerlink" title="方式2. ruby shell [网络正常访问raw.githubusercontent.com]"></a>方式2. ruby shell [网络正常访问raw.githubusercontent.com]</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;bin&#x2F;ruby -e &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Homebrew&#x2F;install&#x2F;master&#x2F;install)&quot;</span><br></pre></td></tr></table></figure><blockquote><p>由于网络资源的原因，国内使用上面的方式很慢，经常失败，解决办法以下两种</p></blockquote><h3 id="方式3-替换镜像源"><a href="#方式3-替换镜像源" class="headerlink" title="方式3. 替换镜像源"></a>方式3. 替换镜像源</h3><h3 id="方式4-使用全局代理-挂VPN"><a href="#方式4-使用全局代理-挂VPN" class="headerlink" title="方式4. 使用全局代理(挂VPN)"></a>方式4. 使用全局代理(挂VPN)</h3><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><h3 id="1-如果出现错误"><a href="#1-如果出现错误" class="headerlink" title="1. 如果出现错误"></a>1. 如果出现错误</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Cloning into &#39;&#x2F;usr&#x2F;local&#x2F;Homebrew&#x2F;Library&#x2F;Taps&#x2F;homebrew&#x2F;homebrew-core&#39;...</span><br><span class="line"></span><br><span class="line">fatal: unable to access &#39;https:&#x2F;&#x2F;github.com&#x2F;Homebrew&#x2F;homebrew-core&#x2F;&#39;: LibreSSL SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:443 </span><br><span class="line"></span><br><span class="line">Error: Failure while executing: git clone https:&#x2F;&#x2F;github.com&#x2F;Homebrew&#x2F;homebrew-core &#x2F;usr&#x2F;local&#x2F;Homebrew&#x2F;Library&#x2F;Taps&#x2F;homebrew&#x2F;homebrew-core --depth&#x3D;1</span><br><span class="line"></span><br><span class="line">Error: Failure while executing: &#x2F;usr&#x2F;local&#x2F;bin&#x2F;brew tap homebrew&#x2F;core</span><br><span class="line"></span><br><span class="line">Failed during: &#x2F;usr&#x2F;local&#x2F;bin&#x2F;brew update --force</span><br></pre></td></tr></table></figure><p>可以手动下载国内仓库</p><h4 id="安装brew："><a href="#安装brew：" class="headerlink" title="安装brew："></a>安装brew：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p &#x2F;usr&#x2F;local&#x2F;Homebrew&#x2F;Library&#x2F;Taps&#x2F;homebrew</span><br><span class="line">git clone git:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;homebrew-core.git &#x2F;usr&#x2F;local&#x2F;Homebrew&#x2F;Library&#x2F;Taps&#x2F;homebrew&#x2F;homebrew-core --depth&#x3D;1</span><br></pre></td></tr></table></figure><h4 id="安装brew-cask："><a href="#安装brew-cask：" class="headerlink" title="安装brew cask："></a>安装brew cask：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;homebrew-cask.git &#x2F;usr&#x2F;local&#x2F;Homebrew&#x2F;Library&#x2F;Taps&#x2F;homebrew&#x2F;homebrew-cask --depth&#x3D;1</span><br></pre></td></tr></table></figure><h3 id="2-如果出现错误-raw-githubusercontent-com-无法访问"><a href="#2-如果出现错误-raw-githubusercontent-com-无法访问" class="headerlink" title="2. 如果出现错误 raw.githubusercontent.com 无法访问"></a>2. 如果出现错误 raw.githubusercontent.com 无法访问</h3><p>可以去网站 <a href="https://www.ipaddress.com/">https://www.ipaddress.com/</a> 查询raw.githubusercontent.com 地址<br>如下图所示</p><img src="/2020/08/07/osx/os-brew/ipfound.png" class="" title="Ip查找"><p>修改hosts, 添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">199.232.68.133 raw.githubusercontent.com</span><br></pre></td></tr></table></figure><h2 id="替换brew镜像源"><a href="#替换brew镜像源" class="headerlink" title="替换brew镜像源"></a>替换brew镜像源</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd &quot;$(brew --repo)&quot;</span><br><span class="line">git remote set-url origin https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;brew.git</span><br><span class="line">cd &quot;$(brew --repo)&#x2F;Library&#x2F;Taps&#x2F;homebrew&#x2F;homebrew-core&quot;</span><br><span class="line">git remote set-url origin https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;homebrew-core.git</span><br><span class="line">cd &quot;$(brew --repo)&#x2F;Library&#x2F;Taps&#x2F;homebrew&#x2F;homebrew-cask&quot;</span><br><span class="line">git remote set-url origin https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;homebrew-cask.git</span><br></pre></td></tr></table></figure><h2 id="卸载brew"><a href="#卸载brew" class="headerlink" title="卸载brew"></a>卸载brew</h2><h3 id="ruby"><a href="#ruby" class="headerlink" title="ruby"></a>ruby</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -e &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Homebrew&#x2F;install&#x2F;master&#x2F;uninstall)&quot;</span><br></pre></td></tr></table></figure><h3 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;bin&#x2F;bash -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Homebrew&#x2F;install&#x2F;master&#x2F;uninstall.sh)&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;&lt;p&gt;安装HomeBrew，Mac用的少，记录下，以免忘记&lt;/p&gt;</summary>
    
    
    
    <category term="osx" scheme="http://blog.rcant.com/categories/osx/"/>
    
    
    <category term="osx" scheme="http://blog.rcant.com/tags/osx/"/>
    
  </entry>
  
  <entry>
    <title>谷力商城学习</title>
    <link href="http://blog.rcant.com/2020/07/20/java/guli/guli-1/"/>
    <id>http://blog.rcant.com/2020/07/20/java/guli/guli-1/</id>
    <published>2020-07-20T06:40:07.000Z</published>
    <updated>2020-09-05T09:33:29.375Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="java" scheme="http://blog.rcant.com/categories/java/"/>
    
    
    <category term="java" scheme="http://blog.rcant.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Shader 效果实现</title>
    <link href="http://blog.rcant.com/2020/06/30/unity/shader-implement-1/"/>
    <id>http://blog.rcant.com/2020/06/30/unity/shader-implement-1/</id>
    <published>2020-06-30T03:39:17.000Z</published>
    <updated>2020-09-05T09:33:29.376Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>给定几个Shader效果<br>自己实现下</p><p>实现一盏虚拟的探照灯</p><a id="more"></a><h3 id="写这个Shader的缘由"><a href="#写这个Shader的缘由" class="headerlink" title="写这个Shader的缘由"></a>写这个Shader的缘由</h3><p>项目里需要使用灯光效果，但是需要几百个灯，如果使用Unity灯光做的话，不合适，消耗比较大</p><p>采用 “面片+billboard “ 来达到类似的效果，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;&lt;p&gt;给定几个Shader效果&lt;br&gt;自己实现下&lt;/p&gt;
&lt;p&gt;实现一盏虚拟的探照灯&lt;/p&gt;</summary>
    
    
    
    <category term="unity3d" scheme="http://blog.rcant.com/categories/unity3d/"/>
    
    
    <category term="unity3d" scheme="http://blog.rcant.com/tags/unity3d/"/>
    
    <category term="shader" scheme="http://blog.rcant.com/tags/shader/"/>
    
  </entry>
  
  <entry>
    <title>VSCode+GoLang 环境搭建</title>
    <link href="http://blog.rcant.com/2020/06/13/golang/golang-vscode/"/>
    <id>http://blog.rcant.com/2020/06/13/golang/golang-vscode/</id>
    <published>2020-06-13T06:40:07.000Z</published>
    <updated>2020-08-07T02:31:56.893Z</updated>
    
    <content type="html"><![CDATA[<p>Window 上建立Golang开发环境记录</p><a id="more"></a><h2 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h2><ul><li>Windows操作系统</li><li>go 1.14</li><li>VSCode 1.46</li></ul><h2 id="下载并安装软件"><a href="#下载并安装软件" class="headerlink" title="下载并安装软件"></a>下载并安装软件</h2><ul><li>略</li></ul><h2 id="设置-go-环境变量"><a href="#设置-go-环境变量" class="headerlink" title="设置 go 环境变量"></a>设置 go 环境变量</h2><p>系统环境变量中添加 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GOROOT&#x3D;C:\Go</span><br><span class="line">GOBIN&#x3D;C:\Go\bin</span><br></pre></td></tr></table></figure><p>系统环境变量 Path 变量中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%GOBIN%</span><br></pre></td></tr></table></figure><p>用户环境变量中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GOPATH&#x3D;%USERPROFILE%\go</span><br></pre></td></tr></table></figure><h2 id="安装-VSCode-go-插件"><a href="#安装-VSCode-go-插件" class="headerlink" title="安装 VSCode-go 插件"></a>安装 VSCode-go 插件</h2><img src="/2020/06/13/golang/golang-vscode/vscode-plugin.png" class="" title="VSCode插件"><h2 id="修改-golang-镜像地址"><a href="#修改-golang-镜像地址" class="headerlink" title="修改 golang 镜像地址"></a>修改 golang 镜像地址</h2><h3 id="Go-1-13-及以上（推荐）"><a href="#Go-1-13-及以上（推荐）" class="headerlink" title="Go 1.13 及以上（推荐）"></a>Go 1.13 及以上（推荐）</h3><p>打开你的终端并执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go env -w GOPROXY&#x3D;https:&#x2F;&#x2F;goproxy.cn,direct</span><br></pre></td></tr></table></figure><h3 id="Windows-环境下修改"><a href="#Windows-环境下修改" class="headerlink" title="Windows 环境下修改"></a>Windows 环境下修改</h3><ol><li>打开“开始”并搜索“env”</li><li>选择“编辑系统环境变量”</li><li>点击“环境变量…”按钮</li><li>在“&lt;你的用户名&gt; 的用户变量”章节下（上半部分）</li><li>点击“新建…”按钮</li><li>选择“变量名”输入框并输入“GOPROXY”</li><li>选择“变量值”输入框并输入“<a href="https://goproxy.cn”/">https://goproxy.cn”</a></li><li>点击“确定”按钮</li></ol><h3 id="Linux-环境下修改"><a href="#Linux-环境下修改" class="headerlink" title="Linux 环境下修改"></a>Linux 环境下修改</h3><p>打开你的终端并执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ export GOPROXY&#x3D;https:&#x2F;&#x2F;goproxy.cn</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ echo &quot;export GOPROXY&#x3D;https:&#x2F;&#x2F;goproxy.cn&quot; &gt;&gt; ~&#x2F;.profile &amp;&amp; source ~&#x2F;.profile</span><br></pre></td></tr></table></figure><p>完成。</p><h2 id="安装-golang-插件"><a href="#安装-golang-插件" class="headerlink" title="安装 golang 插件"></a>安装 golang 插件</h2><p>Ctrl + Shift + P</p><p>打开命令，输入 go:install</p><img src="/2020/06/13/golang/golang-vscode/go-plugin-1.png" class="" title="go:install&#x2F;update tools"><p>选择 go:install/update tools</p><img src="/2020/06/13/golang/golang-vscode/go-plugin-2.png" class="" title="go-plugins"><h2 id="配置-golang-自动补全功能"><a href="#配置-golang-自动补全功能" class="headerlink" title="配置 golang 自动补全功能"></a>配置 golang 自动补全功能</h2><p>setting.json</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;go.addTags&quot;: &#123;&#125;,</span><br><span class="line">    &quot;window.zoomLevel&quot;: 1,</span><br><span class="line">    &quot;go.autocompleteUnimportedPackages&quot;: true,</span><br><span class="line">    &quot;go.gocodePackageLookupMode&quot;: &quot;go&quot;,</span><br><span class="line">    &quot;go.gotoSymbol.includeImports&quot;: true,</span><br><span class="line">    &quot;go.useCodeSnippetsOnFunctionSuggest&quot;: true,</span><br><span class="line">    &quot;go.inferGopath&quot;: false,</span><br><span class="line">    &quot;go.gopath&quot;: &quot;C:\\Users\\xxx\\go&quot;,</span><br><span class="line">    &quot;go.useCodeSnippetsOnFunctionSuggestWithoutType&quot;: true,</span><br><span class="line">    &quot;files.autoSave&quot;:&quot;onFocusChange&quot;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Window 上建立Golang开发环境记录&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://blog.rcant.com/categories/python/"/>
    
    
    <category term="golang" scheme="http://blog.rcant.com/tags/golang/"/>
    
    <category term="vscode" scheme="http://blog.rcant.com/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>VSCode+Python 环境搭建</title>
    <link href="http://blog.rcant.com/2020/06/03/python/python3-vscode/"/>
    <id>http://blog.rcant.com/2020/06/03/python/python3-vscode/</id>
    <published>2020-06-03T06:40:07.000Z</published>
    <updated>2020-08-07T02:31:56.909Z</updated>
    
    <content type="html"><![CDATA[<p>Window 上建立python开发环境记录</p><a id="more"></a><h2 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h2><ul><li>Windows操作系统</li><li>python 3.6</li><li>VSCode 1.46</li></ul><h2 id="下载并安装软件"><a href="#下载并安装软件" class="headerlink" title="下载并安装软件"></a>下载并安装软件</h2><ul><li>略</li></ul><h2 id="设置-python-环境变量"><a href="#设置-python-环境变量" class="headerlink" title="设置 python 环境变量"></a>设置 python 环境变量</h2><p>系统环境变量中添加 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PythonHome&#x3D;C:\Python36</span><br></pre></td></tr></table></figure><p>系统环境变量 Path 变量中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%PythonHome%</span><br><span class="line">%PythonHome%\Scripts</span><br></pre></td></tr></table></figure><h2 id="安装VSCode-python插件"><a href="#安装VSCode-python插件" class="headerlink" title="安装VSCode python插件"></a>安装VSCode python插件</h2><img src="/2020/06/03/python/python3-vscode/vscode-plugin.png" class="" title="VSCode插件"><h2 id="修改python-pip-镜像地址"><a href="#修改python-pip-镜像地址" class="headerlink" title="修改python pip 镜像地址"></a>修改python pip 镜像地址</h2><h3 id="Windows-环境下修改"><a href="#Windows-环境下修改" class="headerlink" title="Windows 环境下修改"></a>Windows 环境下修改</h3><p>vi ~/pip/pip.ini</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">trusted-host &#x3D;  mirrors.aliyun.com</span><br><span class="line">index-url &#x3D; http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple</span><br></pre></td></tr></table></figure><h3 id="Linux-环境下修改"><a href="#Linux-环境下修改" class="headerlink" title="Linux 环境下修改"></a>Linux 环境下修改</h3><p>vim ~/.pip/pip.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">trusted-host &#x3D;  mirrors.aliyun.com</span><br><span class="line">index-url &#x3D; http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple</span><br></pre></td></tr></table></figure><h2 id="安装-pylint"><a href="#安装-pylint" class="headerlink" title="安装 pylint"></a>安装 pylint</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pylint</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Window 上建立python开发环境记录&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://blog.rcant.com/categories/python/"/>
    
    
    <category term="vscode" scheme="http://blog.rcant.com/tags/vscode/"/>
    
    <category term="python3" scheme="http://blog.rcant.com/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 升级 Node 版本</title>
    <link href="http://blog.rcant.com/2020/06/01/hexo/hexo-updatenode/"/>
    <id>http://blog.rcant.com/2020/06/01/hexo/hexo-updatenode/</id>
    <published>2020-06-01T02:39:17.000Z</published>
    <updated>2020-09-05T09:33:29.374Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>电脑重装系统 重新装的新的Node，无法使用Hexo</p><a id="more"></a><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><p>Node v12.18<br>Git</p><h2 id="node-设置环境变量"><a href="#node-设置环境变量" class="headerlink" title="node 设置环境变量"></a>node 设置环境变量</h2><p>重装Node的时候最好卸载掉旧版本文件，防止冲突</p><h2 id="npm更换淘宝镜像"><a href="#npm更换淘宝镜像" class="headerlink" title="npm更换淘宝镜像"></a>npm更换淘宝镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org </span><br></pre></td></tr></table></figure><h2 id="npm-安装-grunt-cli-hexo"><a href="#npm-安装-grunt-cli-hexo" class="headerlink" title="npm  安装 grunt-cli hexo"></a>npm  安装 grunt-cli hexo</h2><h3 id="安装-grunt-cli"><a href="#安装-grunt-cli" class="headerlink" title="安装 grunt-cli"></a>安装 grunt-cli</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g grunt-cli</span><br></pre></td></tr></table></figure><h3 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 hexo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><p>查看信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ hexo -v</span><br><span class="line">hexo-cli: 3.1.0</span><br><span class="line">os: Windows_NT 10.0.18363 win32 x64</span><br><span class="line">node: 12.18.0</span><br><span class="line">v8: 7.8.279.23-node.37</span><br><span class="line">uv: 1.37.0</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">brotli: 1.0.7</span><br><span class="line">ares: 1.16.0</span><br><span class="line">modules: 72</span><br><span class="line">nghttp2: 1.41.0</span><br><span class="line">napi: 6</span><br><span class="line">llhttp: 2.0.4</span><br><span class="line">http_parser: 2.9.3</span><br><span class="line">openssl: 1.1.1g</span><br><span class="line">cldr: 37.0</span><br><span class="line">icu: 67.1</span><br><span class="line">tz: 2019c</span><br><span class="line">unicode: 13.0</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="升级错误记录"><a href="#升级错误记录" class="headerlink" title="升级错误记录"></a>升级错误记录</h2><h3 id="node-升级14-以后，hexo-部署失败了"><a href="#node-升级14-以后，hexo-部署失败了" class="headerlink" title="node 升级14 以后，hexo 部署失败了"></a>node 升级14 以后，hexo 部署失败了</h3><p>报错如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br><span class="line">INFO  Deploying: git</span><br><span class="line">INFO  Clearing .deploy_git folder...</span><br><span class="line">INFO  Copying files from public folder...</span><br><span class="line">FATAL Something&#39;s wrong. Maybe you can find the solution here: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;troubleshooting.html</span><br><span class="line">TypeError [ERR_INVALID_ARG_TYPE]: The &quot;mode&quot; argument must be integer. Received an instance of Object</span><br><span class="line">    at copyFile (fs.js:1924:10)</span><br><span class="line">    at tryCatcher (E:\projects\hexo\rcantblog_hexo\blog\node_modules\hexo-fs\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">    at ret (eval at makeNodePromisifiedEval (C:\Users\cqs\AppData\Roaming\npm\node_modules\hexo\node_modules\bluebird\js\release\promisify.js:184:12), &lt;anonymous&gt;:13:39)</span><br><span class="line">    at E:\projects\hexo\rcantblog_hexo\blog\node_modules\hexo-fs\lib\fs.js:144:39</span><br><span class="line">    at tryCatcher (E:\projects\hexo\rcantblog_hexo\blog\node_modules\hexo-fs\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">    at Promise._settlePromiseFromHandler (E:\projects\hexo\rcantblog_hexo\blog\node_modules\hexo-fs\node_modules\bluebird\js\release\promise.js:517:31)</span><br><span class="line">    at Promise._settlePromise (E:\projects\hexo\rcantblog_hexo\blog\node_modules\hexo-fs\node_modules\bluebird\js\release\promise.js:574:18)</span><br></pre></td></tr></table></figure><p>google了下发现是hexo不支持最新node14+，issue见此，解决方案两种：降低node版本或者升级最新<a href="mailto:&#x68;&#101;&#x78;&#111;&#x40;&#52;&#46;&#50;&#46;&#x31;">&#x68;&#101;&#x78;&#111;&#x40;&#52;&#46;&#50;&#46;&#x31;</a>+。</p><p>我尝试了升级hexo到4.2.1发现并没有什么卵用，照样报相同的错，所以选择了降低node版本到稳定版：</p><p>直接到官网下载最新稳定版：<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></p><p>然后重新执行 hexo clean &amp;&amp; hexo deploy 打包命令就好了。</p><p>P.S. 如果打包成功后，最好验证下hexo下的分类和标签是否正常工作，我就遇到了点击自己博客首页的「分类」和「标签」后，跳转的页面报404，原因是打开的路由最后多了个空格：./categories/%20 。不知道啥原因，所以我把hexo版本退回到了3.8.0。这样路由就正确了。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;电脑重装系统 重新装的新的Node，无法使用Hexo&lt;/p&gt;</summary>
    
    
    
    <category term="hexo" scheme="http://blog.rcant.com/categories/hexo/"/>
    
    
    <category term="hexo" scheme="http://blog.rcant.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Unity 编辑器扩展</title>
    <link href="http://blog.rcant.com/2019/12/05/unity/unity-extends/"/>
    <id>http://blog.rcant.com/2019/12/05/unity/unity-extends/</id>
    <published>2019-12-05T03:39:17.000Z</published>
    <updated>2020-09-18T09:03:56.032Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><a id="more"></a><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>文章基于Unity 引擎<br>版本为 v2017.4</p><h2 id="Unity-可扩展编辑区域"><a href="#Unity-可扩展编辑区域" class="headerlink" title="Unity 可扩展编辑区域"></a>Unity 可扩展编辑区域</h2><h3 id="1-Inspector-属性视图"><a href="#1-Inspector-属性视图" class="headerlink" title="1. Inspector (属性视图)"></a>1. <strong>Inspector</strong> (属性视图)</h3><img src="/2019/12/05/unity/unity-extends/extend-inspector.png" class="" title="属性视图">  <h3 id="2-Menu-菜单"><a href="#2-Menu-菜单" class="headerlink" title="2. Menu (菜单)"></a>2. <strong>Menu</strong> (菜单)</h3><p>eg :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[MenuItem(&quot;Duan %g&quot;, false, 101)]</span><br><span class="line">public static void Duan()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2019/12/05/unity/unity-extends/extend-menu.png" class="" title="菜单">  <h3 id="3-Menu-右键菜单"><a href="#3-Menu-右键菜单" class="headerlink" title="3. Menu(右键菜单)"></a>3. <strong>Menu</strong>(右键菜单)</h3><p>是Menu的一种，需要在Menu之前加上Assets/</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[MenuItem(&quot;Assets&#x2F;导入资源&quot;)]</span><br><span class="line">public static void ImportAssets()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2019/12/05/unity/unity-extends/extend-rightmenu.png" class="" title="右键菜单">  <h3 id="4-ContextMenu-脚本菜单"><a href="#4-ContextMenu-脚本菜单" class="headerlink" title="4. ContextMenu 脚本菜单"></a>4. <strong>ContextMenu</strong> 脚本菜单</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[ContextMenu(&quot;ContextMenu Test&quot;)]</span><br><span class="line">public void mContextMenu()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2019/12/05/unity/unity-extends/extend-contextmenu.png" class="" title="右键菜单">  <h2 id="Inspector视图操作"><a href="#Inspector视图操作" class="headerlink" title="Inspector视图操作"></a><strong>Inspector</strong>视图操作</h2><p><strong>Inspector</strong> 对应每个<strong>Mono</strong>脚本</p><p>假设现在有个脚本 <strong>Actor.cs</strong>,<br>这个脚本控制角色行为</p><h3 id="Inspector-修改方式有两种"><a href="#Inspector-修改方式有两种" class="headerlink" title="Inspector 修改方式有两种"></a><strong>Inspector</strong> 修改方式有两种</h3><ol><li><p>修改其对应的 <strong>Actor.cs</strong> </p></li><li><p>自定义<strong>Inspector</strong></p></li></ol><ul><li>创建一个新的Editor类 <strong>ActorEditor</strong> 继承 <strong>Editor</strong></li><li>添加<code>[CustomEditor(typeof(Actor))]</code>注解，告诉编辑器这个类是扩展<strong>Actor</strong>的Inspector。</li><li>覆写<strong>OnInspectorGUI</strong>方法，实现自定义的扩展。</li></ul><h3 id="修改-Actor-cs-调整-Inspector"><a href="#修改-Actor-cs-调整-Inspector" class="headerlink" title="修改 Actor.cs 调整 Inspector"></a>修改 <strong>Actor.cs</strong> 调整 <strong>Inspector</strong></h3><p>假定我们的 <strong>Actor.cs</strong> 如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class Actor : MonoBehaviour &#123;</span><br><span class="line"></span><br><span class="line">    public int actorId;</span><br><span class="line">    public string actorName;</span><br><span class="line">    public int weapon1Id, weapon2Id;</span><br><span class="line">    public int health;</span><br><span class="line">    void Start () &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2019/12/05/unity/unity-extends/inspector-1.png" class="" title="显示"><h3 id="第一次修改"><a href="#第一次修改" class="headerlink" title="第一次修改"></a>第一次修改</h3><ul><li>actorId和actorName 不想要显示，添加 <strong>[HideInInspector]</strong></li><li>weapon1Id,weapon2Id,health 添加 <strong>[Header(“XXX”)]</strong></li><li>health 使用Range显示 <strong>[Range(0f, 100f)]</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class Actor : MonoBehaviour &#123;</span><br><span class="line">    [HideInInspector]</span><br><span class="line">    public int actorId;</span><br><span class="line">    [HideInInspector]</span><br><span class="line">    public string actorName;</span><br><span class="line"></span><br><span class="line">    [Tooltip(&quot;武器ID&quot;)]</span><br><span class="line">    [Header(&quot;左手武器&quot;)]</span><br><span class="line">    public int weapon1Id;</span><br><span class="line">    </span><br><span class="line">    [Tooltip(&quot;武器ID&quot;)]</span><br><span class="line">    [Header(&quot;右手武器&quot;)]</span><br><span class="line">    public int weapon2Id;</span><br><span class="line">    [Range(0f, 100f)]</span><br><span class="line">    [Header(&quot;血量&quot;)]</span><br><span class="line">    public int health;</span><br><span class="line">    void Start () &#123;</span><br><span class="line">        health &#x3D; 50;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2019/12/05/unity/unity-extends/inspector-2.png" class="" title="显示"><h3 id="第二次修改-使用自定义-Inspector"><a href="#第二次修改-使用自定义-Inspector" class="headerlink" title="第二次修改 使用自定义 Inspector"></a>第二次修改 使用自定义 <strong>Inspector</strong></h3><p>使用自定义会完全抛弃掉Actor中默认行为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">using UnityEditor;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">[CustomEditor(typeof(Actor))]</span><br><span class="line">public class ActorEditor : Editor</span><br><span class="line">&#123;</span><br><span class="line">    enum WeaponID</span><br><span class="line">    &#123;</span><br><span class="line">        Sword,</span><br><span class="line">        Dagger,</span><br><span class="line">        Bow,</span><br><span class="line">        MagicBook,</span><br><span class="line">        MagicBall,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bool showWeapons;</span><br><span class="line">    Actor actor;</span><br><span class="line"></span><br><span class="line">    void OnEnable()</span><br><span class="line">    &#123;</span><br><span class="line">        actor &#x3D; (Actor)target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public override void OnInspectorGUI()</span><br><span class="line">    &#123;</span><br><span class="line">        serializedObject.Update();</span><br><span class="line">        &#x2F;&#x2F;空两行</span><br><span class="line">        EditorGUILayout.Space();</span><br><span class="line">        EditorGUILayout.Space();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;绘制palyer的基本信息</span><br><span class="line">        EditorGUILayout.LabelField(&quot;Base Info&quot;);</span><br><span class="line"></span><br><span class="line">        showWeapons &#x3D; EditorGUILayout.Foldout(showWeapons, &quot;Weapons&quot;);</span><br><span class="line">        if (showWeapons)</span><br><span class="line">        &#123;</span><br><span class="line">            WeaponID weapon1ID &#x3D; (WeaponID)actor.weapon1Id;</span><br><span class="line">            weapon1ID &#x3D; (WeaponID)EditorGUILayout.EnumPopup(&quot;Weapon 1 ID&quot;, weapon1ID);</span><br><span class="line">            actor.weapon1Id &#x3D; (int)weapon1ID;</span><br><span class="line"></span><br><span class="line">            WeaponID weapon2ID &#x3D; (WeaponID)actor.weapon2Id;</span><br><span class="line">            weapon2ID &#x3D; (WeaponID)EditorGUILayout.EnumPopup(&quot;Weapon 2 ID&quot;, weapon2ID);</span><br><span class="line">            actor.weapon2Id &#x3D; (int)weapon2ID;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;空三行</span><br><span class="line">        EditorGUILayout.Space();</span><br><span class="line">        EditorGUILayout.Space();</span><br><span class="line">        EditorGUILayout.Space();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;使用滑块绘制 Player 生命值</span><br><span class="line">        actor.health &#x3D; (int)EditorGUILayout.Slider(&quot;Health&quot;, actor.health, 0, 100);</span><br><span class="line">        &#x2F;&#x2F;根据生命值设置生命条的背景颜色</span><br><span class="line">        if (actor.health &lt; 20)</span><br><span class="line">        &#123;</span><br><span class="line">            GUI.color &#x3D; Color.red;</span><br><span class="line">        &#125;</span><br><span class="line">        else if (actor.health &gt; 80)</span><br><span class="line">        &#123;</span><br><span class="line">            GUI.color &#x3D; Color.green;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            GUI.color &#x3D; Color.gray;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;指定生命值的宽高</span><br><span class="line">        Rect progressRect &#x3D; GUILayoutUtility.GetRect(50, 50);</span><br><span class="line">        &#x2F;&#x2F;绘制生命条</span><br><span class="line">        EditorGUI.ProgressBar(progressRect, actor.health &#x2F; 100.0f, &quot;Health&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        serializedObject.ApplyModifiedProperties();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/2019/12/05/unity/unity-extends/inspector-3.png" class="" title="显示"><h3 id="Get-Set-在-inspector-中的使用"><a href="#Get-Set-在-inspector-中的使用" class="headerlink" title="Get/Set 在 inspector 中的使用"></a><strong>Get/Set</strong> 在 <strong>inspector</strong> 中的使用</h3><p>两种方法 </p><ul><li><a href="http://www.xuanyusong.com/archives/3406">使用 自定义<strong>Inspector</strong> </a></li><li><a href="https://github.com/LMNRY/SetProperty">使用 自定义属性 </a></li></ul><h4 id="使用自定义Inspector"><a href="#使用自定义Inspector" class="headerlink" title="使用自定义Inspector"></a>使用自定义<strong>Inspector</strong></h4><p>在Actor加入Speed</p><p>get/set 使用起来很方便，但是编辑时在Inspector视图中问题就来了，因为get/set的属性即使是public了.但是在Inspector视图中依然不显示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#region get&#x2F;Set</span><br><span class="line">private int _speed;</span><br><span class="line">public int Speed</span><br><span class="line">&#123;</span><br><span class="line">    get</span><br><span class="line">    &#123;</span><br><span class="line">        return _speed;</span><br><span class="line">    &#125;</span><br><span class="line">    set</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(&quot;set :&quot; + value);</span><br><span class="line">        _speed &#x3D; value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#endregion</span><br></pre></td></tr></table></figure><p>给 <strong>_speed</strong> 属性设置 <strong>[SerializeField]</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#region get&#x2F;Set</span><br><span class="line">[SerializeField]</span><br><span class="line">private int _speed;</span><br><span class="line">public int Speed</span><br><span class="line">&#123;</span><br><span class="line">    get</span><br><span class="line">    &#123;</span><br><span class="line">        return _speed;</span><br><span class="line">    &#125;</span><br><span class="line">    set</span><br><span class="line">    &#123;</span><br><span class="line">        if (_speed &#x3D;&#x3D; value)</span><br><span class="line">            return;</span><br><span class="line">        Debug.Log(&quot;set :&quot; + value);</span><br><span class="line">        _speed &#x3D; value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#endregion</span><br></pre></td></tr></table></figure><p>可以在 Inspector 中看到<br>如下</p><img src="/2019/12/05/unity/unity-extends/inspector-getset1.png" class="" title="显示"><p>这里还有问题，这里修改speed,并不会调用Get/Set方法</p><p>[SerializeField]可以让private 的属性在Inspector视图中显示出来。但是不会调用Get/Set。</p><p>使用自定义 <strong>Inspector</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">using UnityEditor;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">[CustomEditor(typeof(Actor))]</span><br><span class="line">public class ActorEditor : Editor</span><br><span class="line">&#123;</span><br><span class="line">    enum WeaponID</span><br><span class="line">    &#123;</span><br><span class="line">        Sword,</span><br><span class="line">        Dagger,</span><br><span class="line">        Bow,</span><br><span class="line">        MagicBook,</span><br><span class="line">        MagicBall,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bool showWeapons;</span><br><span class="line">    Actor actor;</span><br><span class="line"></span><br><span class="line">    void OnEnable()</span><br><span class="line">    &#123;</span><br><span class="line">        actor &#x3D; (Actor)target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public override void OnInspectorGUI()</span><br><span class="line">    &#123;</span><br><span class="line">        serializedObject.Update();</span><br><span class="line">        &#x2F;&#x2F;空两行</span><br><span class="line">        EditorGUILayout.Space();</span><br><span class="line">        EditorGUILayout.Space();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;绘制palyer的基本信息</span><br><span class="line">        EditorGUILayout.LabelField(&quot;Base Info&quot;);</span><br><span class="line"></span><br><span class="line">        showWeapons &#x3D; EditorGUILayout.Foldout(showWeapons, &quot;Weapons&quot;);</span><br><span class="line">        if (showWeapons)</span><br><span class="line">        &#123;</span><br><span class="line">            WeaponID weapon1ID &#x3D; (WeaponID)actor.weapon1Id;</span><br><span class="line">            weapon1ID &#x3D; (WeaponID)EditorGUILayout.EnumPopup(&quot;Weapon 1 ID&quot;, weapon1ID);</span><br><span class="line">            actor.weapon1Id &#x3D; (int)weapon1ID;</span><br><span class="line"></span><br><span class="line">            WeaponID weapon2ID &#x3D; (WeaponID)actor.weapon2Id;</span><br><span class="line">            weapon2ID &#x3D; (WeaponID)EditorGUILayout.EnumPopup(&quot;Weapon 2 ID&quot;, weapon2ID);</span><br><span class="line">            actor.weapon2Id &#x3D; (int)weapon2ID;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;空三行</span><br><span class="line">        EditorGUILayout.Space();</span><br><span class="line">        EditorGUILayout.Space();</span><br><span class="line">        EditorGUILayout.Space();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;使用滑块绘制 Player 生命值</span><br><span class="line">        actor.health &#x3D; (int)EditorGUILayout.Slider(&quot;Health&quot;, actor.health, 0, 100);</span><br><span class="line">        &#x2F;&#x2F;根据生命值设置生命条的背景颜色</span><br><span class="line">        if (actor.health &lt; 20)</span><br><span class="line">        &#123;</span><br><span class="line">            GUI.color &#x3D; Color.red;</span><br><span class="line">        &#125;</span><br><span class="line">        else if (actor.health &gt; 80)</span><br><span class="line">        &#123;</span><br><span class="line">            GUI.color &#x3D; Color.green;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            GUI.color &#x3D; Color.gray;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;指定生命值的宽高</span><br><span class="line">        Rect progressRect &#x3D; GUILayoutUtility.GetRect(50, 50);</span><br><span class="line">        &#x2F;&#x2F;绘制生命条</span><br><span class="line">        EditorGUI.ProgressBar(progressRect, actor.health &#x2F; 100.0f, &quot;Health&quot;);</span><br><span class="line"></span><br><span class="line">        int speed &#x3D; EditorGUILayout.IntField(&quot;Speed&quot;, actor.Speed);</span><br><span class="line">        actor.Speed &#x3D; speed;</span><br><span class="line"></span><br><span class="line">        serializedObject.ApplyModifiedProperties();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2019/12/05/unity/unity-extends/inspector-getset2.png" class="" title="显示"><img src="/2019/12/05/unity/unity-extends/inspector-getset3.png" class="" title="显示"><h4 id="使用-自定义属性"><a href="#使用-自定义属性" class="headerlink" title="使用 自定义属性"></a>使用 自定义属性</h4><p>待补充 TODO</p><h2 id="2-Menu-菜单-1"><a href="#2-Menu-菜单-1" class="headerlink" title="2. Menu (菜单)"></a>2. <strong>Menu</strong> (菜单)</h2><p>**[MenuItem]**的基本实现：</p><ul><li><em>MenuItem(string path)</em></li></ul><p>参数：</p><p><strong>Path</strong>—为你的菜单项指定菜单和名字的字符串。<strong>Path</strong>参数的格式如下：** “Root Menu/Sub Menu1/Sub Menu2/Item Name [可选的 快捷键]” **。</p><p><strong>MenuItem</strong> 属性的用法例子：</p><p>[MenuItem(“Assets/Create/Create Scriptable Object”)]<br>Path参数的一些额外注意事项：</p><ul><li>如果首个词是已经存在的菜单名字（”<strong>Assets</strong>“, “<strong>Window</strong>“等），你的菜单项将被添加到这个菜单下（除了<strong>Component</strong>,稍后详细介绍）  </li><li>你必须指定一个根菜单和一个菜单项名字  </li><li>允许在所有菜单名以及菜单项名字中出现空格  </li><li>可以选择在项名字加空格后的地方指定一个按键来设置快捷键（参考Unity的脚本API的 快捷键）</li></ul><p>这个例子代码在<strong>GameObject</strong>菜单创建了一个菜单项，在选中该项时会在场景中创建一个名为**”RedBlue GameObject”**的新的游戏对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[MenuItem (&quot;GameObject&#x2F;Create RedBlue GameObject&quot;)]</span><br><span class="line">private static void CreateRedBlueGameObject ()</span><br><span class="line">&#123;    </span><br><span class="line">    new GameObject (&quot;RedBlue GameObject&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.jianshu.com/p/84e986a8c7e3">特殊类别参考</a></p><h2 id="3-Menu-右键菜单-1"><a href="#3-Menu-右键菜单-1" class="headerlink" title="3. Menu(右键菜单)"></a>3. <strong>Menu</strong>(右键菜单)</h2><p>同上</p><h2 id="4-ContextMenu-脚本菜单-1"><a href="#4-ContextMenu-脚本菜单-1" class="headerlink" title="4. ContextMenu 脚本菜单"></a>4. <strong>ContextMenu</strong> 脚本菜单</h2><p>略</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;</summary>
    
    
    
    <category term="Unity" scheme="http://blog.rcant.com/categories/Unity/"/>
    
    
    <category term="Unity" scheme="http://blog.rcant.com/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>各种国内镜像仓库地址收集</title>
    <link href="http://blog.rcant.com/2019/08/28/others/hubmirror/"/>
    <id>http://blog.rcant.com/2019/08/28/others/hubmirror/</id>
    <published>2019-08-28T06:40:07.000Z</published>
    <updated>2020-08-07T02:31:56.898Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><a id="more"></a><h2 id="CentOS-yum-软件包仓库"><a href="#CentOS-yum-软件包仓库" class="headerlink" title="CentOS yum 软件包仓库"></a>CentOS yum 软件包仓库</h2><h3 id="备份默认源"><a href="#备份默认源" class="headerlink" title="备份默认源"></a>备份默认源</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@user ~]# mv &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo.b</span><br></pre></td></tr></table></figure><h3 id="使用阿里云镜像"><a href="#使用阿里云镜像" class="headerlink" title="使用阿里云镜像"></a>使用阿里云镜像</h3><h4 id="CentOS-5"><a href="#CentOS-5" class="headerlink" title="CentOS 5"></a>CentOS 5</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-5.repo</span><br></pre></td></tr></table></figure><h4 id="CentOS-6"><a href="#CentOS-6" class="headerlink" title="CentOS 6"></a>CentOS 6</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-6.repo</span><br></pre></td></tr></table></figure><h4 id="CentOS-7"><a href="#CentOS-7" class="headerlink" title="CentOS 7"></a>CentOS 7</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo</span><br></pre></td></tr></table></figure><h3 id="生成对应的缓存"><a href="#生成对应的缓存" class="headerlink" title="生成对应的缓存"></a>生成对应的缓存</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure><h2 id="DockerCe-更换镜像源"><a href="#DockerCe-更换镜像源" class="headerlink" title="DockerCe 更换镜像源"></a>DockerCe 更换镜像源</h2><p>配置docker-ce软件仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</span><br></pre></td></tr></table></figure><p>更换阿里云 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;etc&#x2F;yum.repos.d&#x2F;</span><br><span class="line"></span><br><span class="line">vim docker-ce.repo </span><br><span class="line"># 按ecs进行非编辑模式</span><br><span class="line">:%s&#x2F;https:\&#x2F;\&#x2F;download.docker.com&#x2F;https:\&#x2F;\&#x2F;mirrors.aliyun.com\&#x2F;docker-ce&#x2F;g</span><br></pre></td></tr></table></figure><h2 id="DockerHub-仓库"><a href="#DockerHub-仓库" class="headerlink" title="DockerHub 仓库"></a>DockerHub 仓库</h2><h3 id="配置Docker-镜像加速"><a href="#配置Docker-镜像加速" class="headerlink" title="配置Docker 镜像加速"></a>配置Docker 镜像加速</h3><h4 id="国内加速站点"><a href="#国内加速站点" class="headerlink" title="国内加速站点"></a>国内加速站点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;registry.docker-cn.com</span><br><span class="line">http:&#x2F;&#x2F;hub-mirror.c.163.com</span><br><span class="line">https:&#x2F;&#x2F;3laho3y3.mirror.aliyuncs.com</span><br><span class="line">http:&#x2F;&#x2F;f1361db2.m.daocloud.io</span><br><span class="line">https:&#x2F;&#x2F;mirror.ccs.tencentyun.com</span><br></pre></td></tr></table></figure><h4 id="使用命令来配置加速站点"><a href="#使用命令来配置加速站点" class="headerlink" title="使用命令来配置加速站点"></a>使用命令来配置加速站点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p &#x2F;etc&#x2F;docker</span><br><span class="line">sudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-&#39;EOF&#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;&lt;your accelerate address&gt;&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用脚本来配置加速站点"><a href="#使用脚本来配置加速站点" class="headerlink" title="使用脚本来配置加速站点"></a>使用脚本来配置加速站点</h4><p>该脚本可以将 –registry-mirror 加入到你的 Docker 配置文件 /etc/docker/daemon.json 中。适用于 Ubuntu14.04、Debian、CentOS6 、CentOS7、Fedora、Arch Linux、openSUSE Leap 42.1，其他版本可能有细微不同。更多详情请访问文档。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;wss434631143&#x2F;xiaoshujiang&#x2F;master&#x2F;articles&#x2F;Docker&#x2F;shell&#x2F;set_mirror.sh | sh -s &lt;your accelerate address&gt;</span><br></pre></td></tr></table></figure><h4 id="通过修改启动脚本配置加速站点"><a href="#通过修改启动脚本配置加速站点" class="headerlink" title="通过修改启动脚本配置加速站点"></a>通过修改启动脚本配置加速站点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 直接修改 &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;docker.service 启动脚本</span><br><span class="line">vim &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;docker.service </span><br><span class="line"># 在dockerd后面加参数</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;dockerd --registry-mirror&#x3D;&lt;your accelerate address&gt;</span><br></pre></td></tr></table></figure><p>以上操作后重启一下 Docker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="pip-软件包仓库"><a href="#pip-软件包仓库" class="headerlink" title="pip 软件包仓库"></a>pip 软件包仓库</h2><h3 id="pip改用阿里云镜像源"><a href="#pip改用阿里云镜像源" class="headerlink" title="pip改用阿里云镜像源"></a>pip改用阿里云镜像源</h3><p>vim ~/.pip/pip.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">trusted-host &#x3D;  mirrors.aliyun.com</span><br><span class="line">index-url &#x3D; http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple</span><br></pre></td></tr></table></figure><h3 id="直接使用命令安装"><a href="#直接使用命令安装" class="headerlink" title="直接使用命令安装"></a>直接使用命令安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --trusted-host mirrors.aliyun.com -i http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple -r requirements.txt</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;</summary>
    
    
    
    <category term="mirror" scheme="http://blog.rcant.com/categories/mirror/"/>
    
    
    <category term="mirror" scheme="http://blog.rcant.com/tags/mirror/"/>
    
  </entry>
  
  <entry>
    <title>动态规划算法</title>
    <link href="http://blog.rcant.com/2019/08/03/algorithm/dynamicprogram-algorithm/"/>
    <id>http://blog.rcant.com/2019/08/03/algorithm/dynamicprogram-algorithm/</id>
    <published>2019-08-03T06:50:07.000Z</published>
    <updated>2020-08-07T02:31:56.875Z</updated>
    
    <content type="html"><![CDATA[<p>动态规划算法是通过拆分问题，定义问题状态和状态之间的关系，使得问题能够以递推（或者说分治）的方式去解决。<br>动态规划算法的基本思想与分治法类似，也是将待求解的问题分解为若干个子问题（阶段），按顺序求解子阶段，前一子问题的解，为后一子问题的求解提供了有用的信息。在求解任一子问题时，列出各种可能的局部解，通过决策保留那些有可能达到最优的局部解，丢弃其他局部解。依次解决各子问题，最后一个子问题就是初始问题的解。</p><a id="more"></a><h2 id="算法基本思想-理念"><a href="#算法基本思想-理念" class="headerlink" title="算法基本思想 理念"></a>算法基本思想 理念</h2><p>动态规划算法通常用于求解具有某种最优性质的问题。在这类问题中，可能会有许多可行解。每一个解都对应于一个值，我们希望找到具有最优值的解。</p><p>动态规划算法与分治法类似，其基本思想也是将待求解问题分解成若干个子问题，先求解子问题，然后从这些子问题的解得到原问题的解。</p><p>与分治法不同的是，<font color=blue>适合于用动态规划求解的问题，经分解得到子问题往往不是互相独立的</font>。若用分治法来解这类问题，则分解得到的子问题数目太多，有些子问题被重复计算了很多次。如果我们能够<font color=red>保存已解决的子问题的答案，而在需要时再找出已求得的答案，这样就可以避免大量的重复计算，节省时间</font>。我们可以用一个表来记录所有已解的子问题的答案。不管该子问题以后是否被用到，只要它被计算过，就将其结果填入表中。这就是动态规划法的基本思路。</p><p>具体的动态规划算法多种多样，但它们<font color=red>具有相同的填表格式</font>。</p><p>与<font color=red>分治法最大的差别</font>是：适合于用动态规划法求解的问题，经分解后得到的<font color=blue>子问题往往不是互相独立的</font>（即下一个子阶段的求解是建立在上一个子阶段的解的基础上，进行进一步的求解）</p><h2 id="动态规划分类"><a href="#动态规划分类" class="headerlink" title="动态规划分类"></a>动态规划分类</h2><p>动态规划一般可分为线性动规，区域动规，树形动规，背包动规四类。</p><h3 id="线性动规："><a href="#线性动规：" class="headerlink" title="线性动规："></a>线性动规：</h3><blockquote><ol><li>拦截导弹</li><li>合唱队形</li><li>挖地雷</li><li>建学校</li><li>剑客决斗等</li></ol></blockquote><h3 id="区域动规："><a href="#区域动规：" class="headerlink" title="区域动规："></a>区域动规：</h3><blockquote><ol><li>石子合并</li><li>加分二叉树</li><li>统计单词个数</li><li>炮兵布阵等</li></ol></blockquote><h3 id="树形动规："><a href="#树形动规：" class="headerlink" title="树形动规："></a>树形动规：</h3><blockquote><ol><li>贪吃的九头龙</li><li>二分查找树</li><li>聚会的欢乐</li><li>数字三角形等</li></ol></blockquote><h3 id="背包问题："><a href="#背包问题：" class="headerlink" title="背包问题："></a>背包问题：</h3><blockquote><ol><li>01背包问题</li><li>完全背包问题</li><li>分组背包问题</li><li>二维背包</li><li>装箱问题</li><li>挤牛奶等</li></ol></blockquote><h2 id="算法适用条件"><a href="#算法适用条件" class="headerlink" title="算法适用条件"></a>算法适用条件</h2><p>适用条件<br>任何思想方法都有一定的局限性，超出了特定条件，它就失去了作用。同样，动态规划也并不是万能的。适用动态规划的问题必须满足最优化原理和无后效性。</p><p>1.<font color=blue>最优化原理</font>（最优子结构性质） 最优化原理可这样阐述：一个最优化策略具有这样的性质，不论过去状态和决策如何，对前面的决策所形成的状态而言，余下的诸决策必须构成最优策略。简而言之，一个最优化策略的子策略总是最优的。一个问题满足最优化原理又称其具有最优子结构性质。</p><p>2.无后效性将各阶段按照一定的次序排列好之后，对于某个给定的阶段状态，它以前各阶段的状态无法直接影响它未来的决策，而只能通过当前的这个状态。换句话说，每个状态都是过去历史的一个完整总结。这就是无后向性，又称为无后效性。</p><p>3.子问题的重叠性 动态规划将原来具有指数级时间复杂度的搜索算法改进成了具有多项式时间复杂度的算法。其中的关键在于解决冗余，这是动态规划算法的根本目的。动态规划实质上是一种以空间换时间的技术，它在实现的过程中，不得不存储产生过程中的各种状态，所以它的空间复杂度要大于其它的算法。（<font color=blue>该性质并不是动态规划适用的必要条件，但是如果没有这条性质，动态规划算法同其他算法相比就不具备优势</font>）</p><h2 id="算法的一般解题思路"><a href="#算法的一般解题思路" class="headerlink" title="算法的一般解题思路"></a>算法的一般解题思路</h2><p>动态规划所处理的问题是一个多阶段决策问题，一般由初始状态开始，通过对中间阶段决策的选择，达到结束状态。这些决策形成了一个决策序列，同时确定了完成整个过程的一条活动路线(通常是求最优的活动路线)。如图所示。动态规划的设计都有着一定的模式，一般要经历以下几个步骤。</p><p>    初始状态→│决策１│→│决策２│→…→│决策ｎ│→结束状态</p><p>                      图1 动态规划决策过程示意图</p><p>    (1)划分阶段：按照问题的时间或空间特征，把问题分为若干个阶段。在划分阶段时，注意划分后的阶段一定要是有序的或者是可排序的，否则问题就无法求解。</p><p>    (2)确定状态和状态变量：将问题发展到各个阶段时所处于的各种客观情况用不同的状态表示出来。当然，状态的选择要满足无后效性。</p><p>    (3)确定决策并写出状态转移方程：因为决策和状态转移有着天然的联系，状态转移就是根据上一阶段的状态和决策来导出本阶段的状态。所以如果确定了决策，状态转移方程也就可写出。但事实上常常是反过来做，根据相邻两个阶段的状态之间的关系来确定决策方法和状态转移方程。</p><p>    (4)寻找边界条件：给出的状态转移方程是一个递推式，需要一个递推的终止条件或边界条件。</p><p>    一般，只要解决问题的阶段、状态和状态转移决策确定了，就可以写出状态转移方程（包括边界条件）。</p><p>实际应用中可以按以下几个简化的步骤进行设计：</p><p>    （1）分析最优解的性质，并刻画其结构特征。</p><p>    （2）递归的定义最优解。</p><p>    （3）以自底向上或自顶向下的记忆化方式（备忘录法）计算出最优值</p><p>    （4）根据计算最优值时得到的信息，构造问题的最优解</p><h2 id="算法执行逻辑"><a href="#算法执行逻辑" class="headerlink" title="算法执行逻辑"></a>算法执行逻辑</h2><h2 id="算法例子"><a href="#算法例子" class="headerlink" title="算法例子"></a>算法例子</h2><h3 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h3><p>默认递归实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def Fibonacci(n):</span><br><span class="line">    if n &#x3D;&#x3D; 0:</span><br><span class="line">        return 1</span><br><span class="line">    elif n &#x3D;&#x3D; 1:</span><br><span class="line">        return 1</span><br><span class="line">    else:</span><br><span class="line">        return Fibonacci(n-1) + Fibonacci(n-2)</span><br></pre></td></tr></table></figure><p>使用动态递归实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def Fibonacci(n):</span><br><span class="line">    if n &#x3D;&#x3D; 0:</span><br><span class="line">        return 1</span><br><span class="line">    elif n &#x3D;&#x3D; 1:</span><br><span class="line">        return 1</span><br><span class="line">    else:</span><br><span class="line">        result &#x3D; &#123;0:1,1:1&#125;</span><br><span class="line">        for i in range(n-1):</span><br><span class="line">            result[i+2] &#x3D; result[i+1] + result[i];</span><br><span class="line">        return result[n]</span><br></pre></td></tr></table></figure><p>使用了一个dict 存取每个状态<br>也可以只存上一个状态减少内存消耗</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def Fibonacci(n):</span><br><span class="line">    if n &#x3D;&#x3D; 0:</span><br><span class="line">        return 1</span><br><span class="line">    elif n &#x3D;&#x3D; 1:</span><br><span class="line">        return 1</span><br><span class="line">    else:</span><br><span class="line">        pred &#x3D; 1</span><br><span class="line">        curr &#x3D; 1</span><br><span class="line">        for i in range(n-1):</span><br><span class="line">            pred,curr &#x3D; curr,pred+curr</span><br><span class="line">        return curr</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p><a href="https://blog.csdn.net/zw6161080123/article/details/80639932">https://blog.csdn.net/zw6161080123/article/details/80639932</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;动态规划算法是通过拆分问题，定义问题状态和状态之间的关系，使得问题能够以递推（或者说分治）的方式去解决。&lt;br&gt;动态规划算法的基本思想与分治法类似，也是将待求解的问题分解为若干个子问题（阶段），按顺序求解子阶段，前一子问题的解，为后一子问题的求解提供了有用的信息。在求解任一子问题时，列出各种可能的局部解，通过决策保留那些有可能达到最优的局部解，丢弃其他局部解。依次解决各子问题，最后一个子问题就是初始问题的解。&lt;/p&gt;</summary>
    
    
    
    <category term="algorithm" scheme="http://blog.rcant.com/categories/algorithm/"/>
    
    
    <category term="algorithm" scheme="http://blog.rcant.com/tags/algorithm/"/>
    
    <category term="算法" scheme="http://blog.rcant.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="dynamic program" scheme="http://blog.rcant.com/tags/dynamic-program/"/>
    
    <category term="动态规划" scheme="http://blog.rcant.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>算法目录</title>
    <link href="http://blog.rcant.com/2019/08/03/algorithm/algorithm-readme/"/>
    <id>http://blog.rcant.com/2019/08/03/algorithm/algorithm-readme/</id>
    <published>2019-08-03T06:40:07.000Z</published>
    <updated>2020-08-07T02:31:56.874Z</updated>
    
    <content type="html"><![CDATA[<p>算法目录</p><a id="more"></a><h2 id="算法分支"><a href="#算法分支" class="headerlink" title="算法分支"></a>算法分支</h2><h3 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、<a href="/2019/08/03/algorithm/divideconquer-algorithm/" title="分治算法">分治算法</a></h3><blockquote><p>可以将一个大问题分解成若干个小问题解决的问题</p></blockquote><h3 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、<a href="/2019/08/03/algorithm/dynamicprogram-algorithm/" title="动态规划算法">动态规划算法</a></h3><blockquote><p>根据子问题求解原问题的解（子问题不独立）</p></blockquote><h3 id="贪心法"><a href="#贪心法" class="headerlink" title="贪心法"></a>贪心法</h3><p>　　关键词：局部最优（较好的近似最优解，贪心）、简单、根据当前信息最选择，且不改变、</p><p>　　使用环境：<br>　　1.最优子结构。一个问题的最优解包含了其子问题的最优解。<br>　　2.贪心选择性质。问题的整体最优解可以通过一系列局部最优的选择（贪心选择）来得到</p><p>　　示例：活动选择问题、背包问题、多机调度问题</p><ul><li><p>回溯法</p><p> 关键词：通用的解题法、解空间树（深度优先遍历）、界限函数、所有解（找出满足条件的所有解）</p></li></ul><p>　　步骤：</p><p>　　1.针对所给问题，定义问题的解空间。问题的解空间应至少包含问题的一个（最优）解</p><p>　　2.确定易于搜索的解空间结构。通常将解空间表示为树、图；解空间树的第i层到第i+1层边上的标号给出了变量的值；从树根到叶子的任一路径表示解空间的一个元素。</p><p>　　3.以深度优先的方式搜索整个解空间。如果当前宽展节点处为死节点，则回溯至最近的一个活节点处。（以此方式递归搜索）</p><p>　　算法框架：非递归、递归</p><p>　　界限函数：回溯法的核心。尽可能多、尽可能早地“杀掉”不可能产生最优解的活节点。好的界限函数可以大大减少问题的搜索空间，大大提高算法的效率。</p><p>　　示例：0-1背包、N皇后问题</p><ul><li>分支界限法</li></ul><p>　　关键字：解空间（广度优先、最小耗费优先）、界限函数（队列式、优先队列式）</p><p>　　步骤：</p><p>　　1.针对所给问题，定义问题的解空间。问题的解空间应至少包含问题的一个（最优）解</p><p>　　2.确定易于搜索的解空间结构。通常将解空间表示为树、图；解空间树的第i层到第i+1层边上的标号给出了变量的值；从树根到叶子的任一路径表示解空间的一个元素。</p><p>　　3.以广度优先或最小耗费优先的方式搜索整个解空间。每个活节点只有一次机会成为扩展节点，活节点一旦成为扩展节点，其余儿子节点被加入活节点表中。（以此方式递归搜索）</p><p>　　界限函数：分支界限法的核心。尽可能多、尽可能早地“杀掉”不可能产生最优解的活节点。好的界限函数可以大大减少问题的搜索空间，大大提高算法的效率。</p><p>　　1.队列式（FIFO）分支界限法。先进先出</p><p>　　2.优先队列式分支界限法。组织一个优先队列，按优先级选取。通常用最大堆来实现最大优先队列，最小堆来实现最小优先队列。</p><ul><li>概率算法</li></ul><p>　　关键词：随机性选择、小概率错误（运行时间大幅减少）、不同解（对同一问题求解两次，可能得到完全不同的解，且所需时间、结果可能会有相当大的差别）</p><p>　　基本特征：</p><p>　　1.输入包括两部分。一，原问题的输入；二，供算法进行随机选择的随机数序列<br>　　2.运行过程中，包括一处或多处随机选择，根据随机值来决定算法的运行<br>　　3.结果不能保证一定是正确的，但可以限制出错率。<br>　　4.不同的运行过程中，对于相同的输入实例可以有不同的结果，执行时间也可能不同。</p><p>　　分类：<br>　　1.数值概率算法。常用于数值问题的求解。近似解，近似解的精度随计算时间的增加不断提高。</p><p>　　2.蒙特卡罗（Monte Carlo）算法。精确解，解未必是正确的，正确的概率依赖于算法所用的时间。一般情况下，无法有效地判定所得到的解是否肯定正确。</p><p>　　3.拉斯维加斯（LasVegas）算法。一旦找到解，一定是正确解。找到的概率随计算时间的增加而提高。对实例求解足够多次，使求解失效的概率任意小。</p><p>　　4.舍伍德（Sherwood）算法。总能求得问题的一个解，且所求得的解总是正确的。设法消除最坏情形与特定实例之间的关联性。多用于最快情况下的计算复杂度与其在平均情况下的计算复杂度差别较大。</p><ul><li>近似算法<br>　　关键词：近似解、解的容错界限（近似最优解与最优解之间相差的程度）、不存在多项式时间算法</li></ul><p>　　基本思想：放弃求最优解，用近似最优解替代最优解。使算法简化，时间复杂度降低</p><p>　　衡量性能的标准：</p><p>　　1.算法的时间复杂度。时间复杂度必须是多项式阶的<br>　　2.解的近似程度。与近似算法本身、问题规模、不同的输入实例有关。</p><p>　　示例：NP问题、定点覆盖问题、TSP、子集和数问题、</p><ul><li><p>遗传算法(进化算法)</p></li><li><p>鸟群觅食算法（粒子群算法）</p></li><li><p>A* 算法</p></li></ul><h2 id="算法备注"><a href="#算法备注" class="headerlink" title="算法备注"></a>算法备注</h2><ul><li><p>各种算法分支的理念，最好有流程图</p></li><li><p>每种算法给出例子，源码实现</p></li><li><p>复杂的算法给出框架介绍</p></li><li><p>算法的适应情况</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;算法目录&lt;/p&gt;</summary>
    
    
    
    <category term="algorithm" scheme="http://blog.rcant.com/categories/algorithm/"/>
    
    
    <category term="genetic" scheme="http://blog.rcant.com/tags/genetic/"/>
    
    <category term="algorithm" scheme="http://blog.rcant.com/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>分治算法</title>
    <link href="http://blog.rcant.com/2019/08/03/algorithm/divideconquer-algorithm/"/>
    <id>http://blog.rcant.com/2019/08/03/algorithm/divideconquer-algorithm/</id>
    <published>2019-08-03T06:40:07.000Z</published>
    <updated>2020-08-07T02:31:56.875Z</updated>
    
    <content type="html"><![CDATA[<p>在计算机科学中，分治法是一种很重要的算法。<br>字面上的解释是“分而治之”，就是把一个复杂的问题分成两个或更多的相同或相似的子问题，再把子问题分成更小的子问题……直到最后子问题可以简单的直接求解，原问题的解即子问题的解的合并。<br>这个技巧是很多高效算法的基础，如排序算法(快速排序，归并排序)，傅立叶变换(快速傅立叶变换)。</p><a id="more"></a><h2 id="算法基本思想-理念"><a href="#算法基本思想-理念" class="headerlink" title="算法基本思想 理念"></a>算法基本思想 理念</h2><p>分治法的设计思想是：将一个难以直接解决的大问题，分割成一些规模较小的相同问题，以便各个击破，分而治之。</p><p>适用的情况：</p><blockquote><ol><li>该问题的规模缩小到一定的程度就可以容易地解决</li><li>该问题可以分解为若干个规模较小的相同问题。</li><li>利用该问题分解出的子问题的解可以合并为该问题的解；</li><li>该问题所分解出的各个子问题是相互独立的，即子问题之间不包含公共的子子问题。</li></ol></blockquote><p>第一条特征是绝大多数问题都可以满足的，因为问题的计算复杂性一般是随着问题规模的增加而增加；</p><p>第二条特征是应用分治法的前提它也是大多数问题可以满足的，此特征反映了递归思想的应用；、</p><p>第三条特征是关键，能否利用分治法完全取决于问题是否具有第三条特征，如果具备了第一条和第二条特征，而不具备第三条特征，则可以考虑用贪心法或动态规划法。</p><p>第四条特征涉及到分治法的效率，如果各子问题是不独立的则分治法要做许多不必要的工作，重复地解公共的子问题，此时虽然可用分治法，但一般用动态规划法较好。</p><h2 id="算法执行逻辑"><a href="#算法执行逻辑" class="headerlink" title="算法执行逻辑"></a>算法执行逻辑</h2><blockquote><ol><li>分解：将原问题分解为若干个规模较小，相互独立，与原问题形式相同的子问题。</li><li>解决：若子问题规模较小而容易被解决则直接解，否则递归地解各个子问题。3. 合并：将各个子问题的解合并为原问题的解。</li></ol></blockquote><p>流程图</p><div id="flowchart-0" class="flow-chart"></div>伪代码如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Divide-and-Conquer(P):</span><br><span class="line">    if |P|≤n0:</span><br><span class="line">        return ADHOC(P)</span><br><span class="line">    </span><br><span class="line">    for i←1 to k</span><br><span class="line">        yi ← Divide-and-Conquer(Pi)</span><br><span class="line">    </span><br><span class="line">    T ← MERGE(y1,y2,...,yk) </span><br><span class="line">    return(T)</span><br><span class="line"></span><br><span class="line">ADHOC(P):</span><br><span class="line">    return f(P)</span><br></pre></td></tr></table></figure><p>注：</p><blockquote><ol><li>其中|P|表示问题P的规模</li><li>n0为一阈值，表示当问题P的规模不超过n0时，问题已容易直接解出，不必再继续分解。</li><li>ADHOC(P)是该分治法中的基本子算法，用于直接解小规模的问题P。</li><li>算法MERGE(y1,y2,…,yk)是该分治法中的合并子算法，用于将P的子问题P1 ,P2 ,…,Pk的相应的解y1,y2,…,yk合并为P的解</li></ol></blockquote><h2 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h2><p>一个分治法将规模为n的问题分成k个规模为n／m的子问题去解。设分解阀值n0=1，且adhoc解规模为1的问题耗费1个单位时间。再设将原问题分解为k个子问题以及用merge将k个子问题的解合并为原问题的解需用f(n)个单位时间。用T(n)表示该分治法解规模为|P|=n的问题所需的计算时间，则有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T(n)&#x3D; k*T(n&#x2F;m)+f(n)</span><br></pre></td></tr></table></figure><h2 id="分治法解题例子-TODO-需要扩展"><a href="#分治法解题例子-TODO-需要扩展" class="headerlink" title="分治法解题例子 TODO 需要扩展"></a>分治法解题例子 TODO 需要扩展</h2><p>（1）二分搜索<br>（2）大整数乘法<br>（3）Strassen矩阵乘法<br>（4）棋盘覆盖<br>（5）合并排序<br>（6）快速排序<br>（7）线性时间选择<br>（8）最接近点对问题<br>（9）循环赛日程表<br>（10）汉诺塔</p><h2 id="算法备注"><a href="#算法备注" class="headerlink" title="算法备注"></a>算法备注</h2><p>依据分治法设计程序时的思维过程<br>实际上就是类似于数学归纳法，找到解决本问题的求解方程公式，然后根据方程公式设计递归程序。</p><blockquote><p>1、一定是先找到最小问题规模时的求解方法<br>2、然后考虑随着问题规模增大时的求解方法<br>3、找到求解的递归函数式后（各种规模或因子），设计递归程序即可。</p></blockquote><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: 开始求问题Pe=>end: 结束返回P的解op=>operation: 求问题规模P|pastcond=>condition: P最小规模n0?minP=>operation: ADHOC(P)op2=>operation: 问题P分解为P1,P2..Pkop4=>operation: 求问题Pi合并问题P1,P2..Pk的解st->op->condcond(yes)->minPcond(no)->op2op2->op4op4(left)->opminP->eop4->e</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script>]]></content>
    
    
    <summary type="html">&lt;p&gt;在计算机科学中，分治法是一种很重要的算法。&lt;br&gt;字面上的解释是“分而治之”，就是把一个复杂的问题分成两个或更多的相同或相似的子问题，再把子问题分成更小的子问题……直到最后子问题可以简单的直接求解，原问题的解即子问题的解的合并。&lt;br&gt;这个技巧是很多高效算法的基础，如排序算法(快速排序，归并排序)，傅立叶变换(快速傅立叶变换)。&lt;/p&gt;</summary>
    
    
    
    <category term="algorithm" scheme="http://blog.rcant.com/categories/algorithm/"/>
    
    
    <category term="algorithm" scheme="http://blog.rcant.com/tags/algorithm/"/>
    
    <category term="divide conquer" scheme="http://blog.rcant.com/tags/divide-conquer/"/>
    
    <category term="分治" scheme="http://blog.rcant.com/tags/%E5%88%86%E6%B2%BB/"/>
    
    <category term="算法" scheme="http://blog.rcant.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Genetic Algorithm 使用</title>
    <link href="http://blog.rcant.com/2019/08/01/algorithm/genetic-algorithm-use/"/>
    <id>http://blog.rcant.com/2019/08/01/algorithm/genetic-algorithm-use/</id>
    <published>2019-08-01T06:40:07.000Z</published>
    <updated>2020-08-07T02:31:56.876Z</updated>
    
    <content type="html"><![CDATA[<p>遗传算法</p><a id="more"></a><h2 id="1-什么是遗传算法"><a href="#1-什么是遗传算法" class="headerlink" title="1. 什么是遗传算法"></a>1. 什么是遗传算法</h2><p>是模拟达尔文生物进化论的自然选择和遗传学机理的生物进化过程的计算模型，是一种通过模拟自然进化过程搜索最优解的方法。</p><p>是一类借鉴生物界的进化规律（适者生存，优胜劣汰遗传机制）演化而来的随机化搜索方法。</p><h2 id="2-遗传算法基本运算过程"><a href="#2-遗传算法基本运算过程" class="headerlink" title="2. 遗传算法基本运算过程"></a>2. 遗传算法基本运算过程</h2><h3 id="a-初始化：设置进化代数计数器t-0，设置最大进化代数T，随机生成M个个体作为初始群体P-0-。"><a href="#a-初始化：设置进化代数计数器t-0，设置最大进化代数T，随机生成M个个体作为初始群体P-0-。" class="headerlink" title="a)初始化：设置进化代数计数器t=0，设置最大进化代数T，随机生成M个个体作为初始群体P(0)。"></a>a)初始化：设置进化代数计数器t=0，设置最大进化代数T，随机生成M个个体作为初始群体P(0)。</h3><h3 id="b-个体评价：计算群体P-t-中各个个体的适应度。"><a href="#b-个体评价：计算群体P-t-中各个个体的适应度。" class="headerlink" title="b)个体评价：计算群体P(t)中各个个体的适应度。"></a>b)个体评价：计算群体P(t)中各个个体的适应度。</h3><h3 id="c-选择运算：将选择算子作用于群体。选择的目的是把优化的个体直接遗传到下一代或通过配对交叉产生新的个体再遗传到下一代。选择操作是建立在群体中个体的适应度评估基础上的。"><a href="#c-选择运算：将选择算子作用于群体。选择的目的是把优化的个体直接遗传到下一代或通过配对交叉产生新的个体再遗传到下一代。选择操作是建立在群体中个体的适应度评估基础上的。" class="headerlink" title="c)选择运算：将选择算子作用于群体。选择的目的是把优化的个体直接遗传到下一代或通过配对交叉产生新的个体再遗传到下一代。选择操作是建立在群体中个体的适应度评估基础上的。"></a>c)选择运算：将选择算子作用于群体。选择的目的是把优化的个体直接遗传到下一代或通过配对交叉产生新的个体再遗传到下一代。选择操作是建立在群体中个体的适应度评估基础上的。</h3><h3 id="d-交叉运算：将交叉算子作用于群体。遗传算法中起核心作用的就是交叉算子。"><a href="#d-交叉运算：将交叉算子作用于群体。遗传算法中起核心作用的就是交叉算子。" class="headerlink" title="d)交叉运算：将交叉算子作用于群体。遗传算法中起核心作用的就是交叉算子。"></a>d)交叉运算：将交叉算子作用于群体。遗传算法中起核心作用的就是交叉算子。</h3><h3 id="e-变异运算：将变异算子作用于群体。即是对群体中的个体串的某些基因座上的基因值作变动。群体P-t-经过选择、交叉、变异运算之后得到下一代群体P-t-1-。"><a href="#e-变异运算：将变异算子作用于群体。即是对群体中的个体串的某些基因座上的基因值作变动。群体P-t-经过选择、交叉、变异运算之后得到下一代群体P-t-1-。" class="headerlink" title="e)变异运算：将变异算子作用于群体。即是对群体中的个体串的某些基因座上的基因值作变动。群体P(t)经过选择、交叉、变异运算之后得到下一代群体P(t+1)。"></a>e)变异运算：将变异算子作用于群体。即是对群体中的个体串的某些基因座上的基因值作变动。群体P(t)经过选择、交叉、变异运算之后得到下一代群体P(t+1)。</h3><h3 id="f-终止条件判断：若t-T-则以进化过程中所得到的具有最大适应度个体作为最优解输出，终止计算。"><a href="#f-终止条件判断：若t-T-则以进化过程中所得到的具有最大适应度个体作为最优解输出，终止计算。" class="headerlink" title="f)终止条件判断：若t=T,则以进化过程中所得到的具有最大适应度个体作为最优解输出，终止计算。"></a>f)终止条件判断：若t=T,则以进化过程中所得到的具有最大适应度个体作为最优解输出，终止计算。</h3><h2 id="3-连接ADB客户端"><a href="#3-连接ADB客户端" class="headerlink" title="3. 连接ADB客户端"></a>3. 连接ADB客户端</h2><h2 id="4-模拟器开启Root权限"><a href="#4-模拟器开启Root权限" class="headerlink" title="4. 模拟器开启Root权限"></a>4. 模拟器开启Root权限</h2><h2 id="5-可能出现的问题"><a href="#5-可能出现的问题" class="headerlink" title="5. 可能出现的问题"></a>5. 可能出现的问题</h2><h2 id="6-使用adb-shell调试"><a href="#6-使用adb-shell调试" class="headerlink" title="6. 使用adb shell调试"></a>6. 使用adb shell调试</h2><h2 id="7-用GDB调试程序，dump内存"><a href="#7-用GDB调试程序，dump内存" class="headerlink" title="7. 用GDB调试程序，dump内存"></a>7. 用GDB调试程序，dump内存</h2><h2 id="8-gdb-dump-破解源码"><a href="#8-gdb-dump-破解源码" class="headerlink" title="8. gdb dump 破解源码"></a>8. gdb dump 破解源码</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;遗传算法&lt;/p&gt;</summary>
    
    
    
    <category term="algorithm" scheme="http://blog.rcant.com/categories/algorithm/"/>
    
    
    <category term="genetic" scheme="http://blog.rcant.com/tags/genetic/"/>
    
    <category term="algorithm" scheme="http://blog.rcant.com/tags/algorithm/"/>
    
  </entry>
  
</feed>
