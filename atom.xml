<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chester.Cao Blog</title>
  
  <subtitle>Devlopper in C#</subtitle>
  <link href="http://blog.rcant.com/atom.xml" rel="self"/>
  
  <link href="http://blog.rcant.com/"/>
  <updated>2020-11-13T04:19:25.953Z</updated>
  <id>http://blog.rcant.com/</id>
  
  <author>
    <name>Chester.C</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo 标签插件的使用</title>
    <link href="http://blog.rcant.com/2020/11/14/hexo/hexo-flags/"/>
    <id>http://blog.rcant.com/2020/11/14/hexo/hexo-flags/</id>
    <published>2020-11-14T02:39:17.000Z</published>
    <updated>2020-11-13T04:19:25.953Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>将MarkDown扩展 适应更多编辑的需要</p><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><ul><li>Node</li><li>Git</li></ul><a id="more"></a><h2 id="Hexo-标签插件使用"><a href="#Hexo-标签插件使用" class="headerlink" title="Hexo 标签插件使用"></a>Hexo 标签插件使用</h2><h3 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h3><p>在文章中插入引言，可包含作者、来源和标题，均可选。</p><p>标签方式：使用 blockquote 或者 简写 quote。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote [author] [source_link] [source_link_title] %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><p>例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote wilenwu https:&#x2F;&#x2F;wilenwu.github.io&#x2F;posts&#x2F;hexo&#x2F;Hexo-tag-plugins.html Hexo标签插件的使用 %&#125;</span><br><span class="line">参考</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><br>效果如下：</p><blockquote><p>参考</p><footer><strong>wilenwu</strong><cite><a href="https://wilenwu.github.io/posts/hexo/Hexo-tag-plugins.html" target="_blank" rel="noopener">Hexo标签插件的使用</a></cite></footer></blockquote><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>在文章中插入代码，包含指定语言、附加说明和网址，均可选。<br>标签方式：使用 codeblock 或者 简写 code。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock [title] [lang:language] [url] [link text] %&#125;</span><br><span class="line">code snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock Svn更新 lang:Shell http:&#x2F;&#x2F;blog.rcant.com 参考链接 %&#125;</span><br><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line">cd $SvnDir</span><br><span class="line">svn up .</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><figure class="highlight shell"><figcaption><span>Svn更新</span><a href="http://blog.rcant.com">参考链接</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">cd $SvnDir</span><br><span class="line">svn up .</span><br></pre></td></tr></table></figure><h3 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h3><p>在文章中插入 iframe。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% iframe [url] [width] [height] %&#125;</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% iframe http:&#x2F;&#x2F;blog.rcant.com 800 300 %&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><iframe src="http://blog.rcant.com/" width="800" height="300" frameborder="0" loading="lazy" allowfullscreen></iframe><h3 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h3><p>在文章中插入指定大小的图片。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% img [class names] &#x2F;path&#x2F;to&#x2F;image [width] [height] &quot;title text &#39;alt text&#39;&quot; %&#125;</span><br></pre></td></tr></table></figure><blockquote></blockquote><p>例子：</p><p>请保证图片文件存在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% img default &#x2F;static&#x2F;images&#x2F;tree.jpg 300 100 &quot;测试文字 &#39;提示文字&#39;&quot; %&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><img src="/static/images/tree.jpg" class="default" width="300" height="100" title="测试文字 " alt="提示文字"><h3 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h3><p>在文章中插入链接。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link [text] [url] [title] %&#125;</span><br></pre></td></tr></table></figure><p>例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 百度链接 http:&#x2F;&#x2F;www.baidu.com 百度 %&#125;</span><br></pre></td></tr></table></figure></p><p>效果:</p><a href="http://www.baidu.com/" title="百度" target="">百度链接</a><h3 id="Include-Code"><a href="#Include-Code" class="headerlink" title="Include Code"></a>Include Code</h3><p>插入 source/downloads/code 文件夹内的代码文件。source/downloads/code 不是固定的，取决于你在配置文件中 code_dir 的配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code [title] [lang:language] path&#x2F;to&#x2F;file %&#125;</span><br></pre></td></tr></table></figure><h2 id="NexT-标签插件使用"><a href="#NexT-标签插件使用" class="headerlink" title="NexT 标签插件使用"></a>NexT 标签插件使用</h2><h3 id="文本居中引用"><a href="#文本居中引用" class="headerlink" title="文本居中引用"></a>文本居中引用</h3><p>此标签将生成一个带上下分割线的引用，同时引用内文本将自动居中。 文本居中时，多行文本若长度不等，视觉上会显得不对称，因此建议在引用单行文本的场景下使用。 例如作为文章开篇引用 或者 结束语之前的总结引用</p><p>使用方式</p><p>HTML方式：直接在 Markdown 文件中编写 HTML 来调用，给 img 添加属性 class=”blockquote-center” 即可。<br>标签方式：使用 centerquote 或者 简写 cq。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># HTML方式</span><br><span class="line">&lt;blockquote class&#x3D;&quot;blockquote-center&quot;&gt;blah blah blah&lt;&#x2F;blockquote&gt;</span><br><span class="line"># 标签方式</span><br><span class="line">&#123;% centerquote %&#125;blah blah blah&#123;% endcenterquote %&#125;</span><br></pre></td></tr></table></figure><h3 id="突破容器宽度限制的图片"><a href="#突破容器宽度限制的图片" class="headerlink" title="突破容器宽度限制的图片"></a>突破容器宽度限制的图片</h3><p>当使用此标签引用图片时，图片将自动扩大 26%，并突破文章容器的宽度。 此标签使用于需要突出显示的图片, 图片的扩大与容器的偏差从视觉上提升图片的吸引力。 此标签有两种调用方式（详细参看底下示例）：</p><p>使用方式</p><p>HTML方式：直接在 Markdown 文件中编写 HTML 来调用，为 img 添加属性 class=”full-image”即可。<br>标签方式：使用 fullimage 或者 简写 fi， 并传递图片地址、 alt 和 title 属性即可。 属性之间以逗号分隔。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># HTML方式:</span><br><span class="line">&lt;img src&#x3D;&quot;&#x2F;image-url&quot; class&#x3D;&quot;full-image&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line"># 标签 方式</span><br><span class="line">&#123;% fullimage &#x2F;image-url, alt, title %&#125;</span><br></pre></td></tr></table></figure><h3 id="Note-标签"><a href="#Note-标签" class="headerlink" title="Note 标签"></a>Note 标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [class] [no-icon] %&#125; </span><br><span class="line">content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>[class]: default | primary | success | info | warning | danger<br>[no-icon] : 禁用图标</p></blockquote><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note default %&#125; </span><br><span class="line">default</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default no-icon %&#125; </span><br><span class="line">default</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary %&#125; </span><br><span class="line">primary</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success %&#125; </span><br><span class="line">success</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info %&#125; </span><br><span class="line">info</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning %&#125; </span><br><span class="line">warning</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger %&#125; </span><br><span class="line">danger</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><div class="note default">            <p>default</p>          </div><div class="note default no-icon">            <p>default no-icon</p>          </div><div class="note primary">            <p>primary</p>          </div><div class="note success">            <p>success</p>          </div><div class="note info">            <p>info</p>          </div><div class="note warning">            <p>warning</p>          </div><div class="note danger">            <p>danger</p>          </div><h3 id="Tabs-选项卡"><a href="#Tabs-选项卡" class="headerlink" title="Tabs 选项卡"></a>Tabs 选项卡</h3><p>使用方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs [Uniquename] [index] %&#125;</span><br><span class="line">&lt;!-- tab [caption] [@icon] --&gt;</span><br><span class="line">**This is Tab 1.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Unique name：选项卡唯一名字<br>[index]：活动卡索引号<br>[caption]：标签标题<br>[@icon]：FontAwesome图标名称</p></blockquote><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs unique-name 1 %&#125;</span><br><span class="line">&lt;!-- tab caption @github --&gt;</span><br><span class="line">**This is Tab 1.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab Solution 2 --&gt;</span><br><span class="line">**This is Tab 2.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab Solution 3 @paw --&gt;</span><br><span class="line">**This is Tab 3.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><div class="tabs" id="unique-name-1"><ul class="nav-tabs"><li class="tab active"><a href="#unique-name-1-1"><i class="fa fa-github"></i>caption</a></li><li class="tab"><a href="#unique-name-1-2">Solution 2</a></li><li class="tab"><a href="#unique-name-1-3"><i class="fa fa-paw"></i>Solution 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="unique-name-1-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-pane" id="unique-name-1-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-pane" id="unique-name-1-3"><p><strong>This is Tab 3.</strong></p></div></div></div><h3 id="Label-标签"><a href="#Label-标签" class="headerlink" title="Label 标签"></a>Label 标签</h3><p>使用方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label [class]@Text %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>[class] : default | primary | success | info | warning | danger.</p></blockquote><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Will you choose &#123;% label default@default %&#125;, &#123;% label primary@primary %&#125;, &#123;% label success@success %&#125;, &#123;% label info@info %&#125;, &#123;% label warning@warning %&#125; or &#123;% label danger@danger %&#125; ?</span><br></pre></td></tr></table></figure><p>效果：</p><p>Will you choose <span class="label default">default</span>, <span class="label primary">primary</span>, <span class="label success">success</span>, <span class="label info">info</span>, <span class="label warning">warning</span> or <span class="label danger">danger</span> ?</p><h3 id="Video-标签"><a href="#Video-标签" class="headerlink" title="Video 标签"></a>Video 标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video https:&#x2F;&#x2F;example.com&#x2F;sample.mp4 %&#125;</span><br></pre></td></tr></table></figure><h3 id="Button-标签"><a href="#Button-标签" class="headerlink" title="Button 标签"></a>Button 标签</h3><p>使用 button 或者 简写 btn</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% button url, text, icon [class], [title] %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>url：绝对或相对路径<br>text, icon：按钮文字或FontAwesome图标<br>[class]：FontAwesome类：fa-fw | fa-lg | fa-2x | fa-3x | fa-4x | fa-5x<br>[title]：鼠标悬停时的工具提示</p></blockquote><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% button http:&#x2F;&#x2F;www.baidu.com, Baidu, home fa-fw, 百度 %&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><a class="btn" href="http://www.baidu.com" target="_blank" rel="noopener" title="百度">            <i class="fa fa-home fa-fw"></i>Baidu          </a><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://wilenwu.github.io/posts/hexo/Hexo-tag-plugins.html" target="_blank" rel="noopener">Hexo标签插件的使用</a></p><h2 id="Hexo博客系列"><a href="#Hexo博客系列" class="headerlink" title="Hexo博客系列"></a>Hexo博客系列</h2><ul><li><a href="/2017/03/01/hexo/hexo-firstblog/" title="Hexo博客搭建">Hexo博客搭建</a>  </li><li><a href="/2017/03/01/hexo/hexo-secordblog/" title="Hexo更换博客样式">Hexo更换博客样式</a>  </li><li><a href="/2020/06/01/hexo/hexo-updatenode/" title="Hexo升级Node版本">Hexo升级Node版本</a>  </li><li><a href="/2020/09/20/hexo/hexo-amp-enable/" title="Hexo AMP 支持">Hexo AMP 支持</a>  </li><li><a href="/2017/03/03/others/markdown-first/" title="MarkDown语法">MarkDown语法</a></li><li><a href="/2020/09/24/hexo/hexo-markdown-extends/" title="Hexo-MarkDown扩展">Hexo-MarkDown扩展</a>  </li><li><a href="/2020/11/14/hexo/hexo-flags/" title="Hexo 标签插件的使用">Hexo 标签插件的使用</a>  </li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;将MarkDown扩展 适应更多编辑的需要&lt;/p&gt;
&lt;h2 id=&quot;配置环境&quot;&gt;&lt;a href=&quot;#配置环境&quot; class=&quot;headerlink&quot; title=&quot;配置环境&quot;&gt;&lt;/a&gt;配置环境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Node&lt;/li&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="hexo" scheme="http://blog.rcant.com/categories/hexo/"/>
    
    
    <category term="hexo" scheme="http://blog.rcant.com/tags/hexo/"/>
    
    <category term="markdown" scheme="http://blog.rcant.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>学习Autoconf</title>
    <link href="http://blog.rcant.com/2020/11/13/cpp/cpp-autoconf-0/"/>
    <id>http://blog.rcant.com/2020/11/13/cpp/cpp-autoconf-0/</id>
    <published>2020-11-13T03:39:17.000Z</published>
    <updated>2020-11-12T12:17:38.803Z</updated>
    
    <content type="html"><![CDATA[<p>Makefile其实不难学，对于一些基本概念百度上应该很多，这里分享一个循序渐进的学习方式，保证让你快速掌握Makefile的编写。本文首发于公众号：良许Linux，里面有一个 Makefile 系列，欢迎关注交流！</p><a id="more"></a>]]></content>
    
    
    <summary type="html">&lt;p&gt;Makefile其实不难学，对于一些基本概念百度上应该很多，这里分享一个循序渐进的学习方式，保证让你快速掌握Makefile的编写。本文首发于公众号：良许Linux，里面有一个 Makefile 系列，欢迎关注交流！&lt;/p&gt;</summary>
    
    
    
    <category term="C" scheme="http://blog.rcant.com/categories/C/"/>
    
    
    <category term="c" scheme="http://blog.rcant.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>学习CMake</title>
    <link href="http://blog.rcant.com/2020/11/13/cpp/cpp-cmake-0/"/>
    <id>http://blog.rcant.com/2020/11/13/cpp/cpp-cmake-0/</id>
    <published>2020-11-13T03:39:17.000Z</published>
    <updated>2020-11-13T02:48:33.581Z</updated>
    
    <content type="html"><![CDATA[<p>你或许听过好几种 Make 工具，例如 <a href="https://www.hahack.com/wiki/tools-makefile.html" target="_blank" rel="noopener">GNU Make</a> ，QT 的 <a href="http://qt-project.org/doc/qt-4.8/qmake-manual.html" target="_blank" rel="noopener">qmake</a> ，微软的 <a href="http://msdn.microsoft.com/en-us/library/ms930369.aspx" target="_blank" rel="noopener">MS nmake</a>，BSD Make（<a href="http://www.freebsd.org/doc/en/books/pmake/" target="_blank" rel="noopener">pmake</a>），Makepp，等等。这些 Make 工具遵循着不同的规范和标准，所执行的 Makefile 格式也千差万别。这样就带来了一个严峻的问题：如果软件想跨平台，必须要保证能够在不同平台编译。而如果使用上面的 Make 工具，就得为每一种标准写一次 Makefile ，这将是一件让人抓狂的工作。</p><p>CMake就是针对上面问题所设计的工具：它首先允许开发者编写一种平台无关的 CMakeList.txt 文件来定制整个编译流程，然后再根据目标用户的平台进一步生成所需的本地化 Makefile 和工程文件，如 Unix 的 Makefile 或 Windows 的 Visual Studio 工程。从而做到“Write once, run everywhere”。显然，CMake 是一个比上述几种 make 更高级的编译配置工具。一些使用 CMake 作为项目架构系统的知名开源项目有 VTK、ITK、KDE、OpenCV、OSG 等 [1]。</p><a id="more"></a><p>在 linux 平台下使用 CMake 生成 Makefile 并编译的流程如下：</p><pre><code>1. 编写 CMake 配置文件 CMakeLists.txt 。2. 执行命令 cmake PATH 或者 ccmake PATH 生成 Makefile 1 1ccmake 和 cmake 的区别在于前者提供了一个交互式的界面。。其中， PATH 是 CMakeLists.txt 所在的目录。3. 使用 make 命令进行编译。</code></pre><p>本文将从实例入手，一步步讲解 CMake 的常见用法，文中所有的实例代码可以在这里找到。如果你读完仍觉得意犹未尽，可以继续学习我在文章末尾提供的其他资源。</p><h2 id="入门案例-单个源文件"><a href="#入门案例-单个源文件" class="headerlink" title="入门案例: 单个源文件"></a>入门案例: 单个源文件</h2><p>假设项目中只有一个文件 main.cc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line">* power - Calculate the power of number.</span><br><span class="line">* @param base: Base value.</span><br><span class="line">* @param exponent: Exponent value.</span><br><span class="line">*</span><br><span class="line">* @return base raised to the power exponent.</span><br><span class="line">*&#x2F;</span><br><span class="line">double power(double base, int exponent)</span><br><span class="line">&#123;</span><br><span class="line">    int result &#x3D; base;</span><br><span class="line">    int i;</span><br><span class="line">    if (exponent &#x3D;&#x3D; 0) &#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i &#x3D; 1; i &lt; exponent; ++i)&#123;</span><br><span class="line">        result &#x3D; result * base;</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    if (argc &lt; 3)&#123;</span><br><span class="line">        printf(&quot;Usage: %s base exponent \n&quot;, argv[0]);</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">    double base &#x3D; atof(argv[1]);</span><br><span class="line">    int exponent &#x3D; atoi(argv[2]);</span><br><span class="line">    double result &#x3D; power(base, exponent);</span><br><span class="line">    printf(&quot;%g ^ %d is %g\n&quot;, base, exponent, result);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写-CMakeLists-txt"><a href="#编写-CMakeLists-txt" class="headerlink" title="编写 CMakeLists.txt"></a>编写 CMakeLists.txt</h3><p>首先编写 CMakeLists.txt 文件，并保存在与 main.cc 源文件同个目录下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># CMake 最低版本号要求</span><br><span class="line">cmake_minimum_required (VERSION 2.8)</span><br><span class="line"># 项目信息</span><br><span class="line">project (Demo1)</span><br><span class="line"># 指定生成目标</span><br><span class="line">add_executable(Demo main.cc)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CMakeLists.txt 的语法比较简单，由命令、注释和空格组成，其中命令是不区分大小写的。符号 &lt;font color&#x3D;Blue&gt;#&lt;&#x2F;font&gt; 后面的内容被认为是注释。命令由命令名称、小括号和参数组成，参数之间使用空格进行间隔。</span><br><span class="line"></span><br><span class="line">对于上面的 CMakeLists.txt 文件，依次出现了几个命令：</span><br><span class="line"></span><br><span class="line">    - 1. cmake_minimum_required：指定运行此配置文件所需的 CMake 的最低版本；</span><br><span class="line">    - 2. project：参数值是 Demo1，该命令表示项目的名称是 Demo1 。</span><br><span class="line">    - 3. add_executable： 将名为 main.cc 的源文件编译成一个名称为 Demo 的可执行文件。</span><br><span class="line"></span><br><span class="line">### 编译项目</span><br><span class="line"></span><br><span class="line">之后，在当前目录执行 cmake . ，得到 Makefile 后再使用 make 命令编译得到 Demo1 可执行文件。</span><br></pre></td></tr></table></figure><p>[ehome@xman Demo1]$ cmake .<br>— The C compiler identification is GNU 4.8.2<br>— The CXX compiler identification is GNU 4.8.2<br>— Check for working C compiler: /usr/sbin/cc<br>— Check for working C compiler: /usr/sbin/cc — works<br>— Detecting C compiler ABI info<br>— Detecting C compiler ABI info - done<br>— Check for working CXX compiler: /usr/sbin/c++<br>— Check for working CXX compiler: /usr/sbin/c++ — works<br>— Detecting CXX compiler ABI info<br>— Detecting CXX compiler ABI info - done<br>— Configuring done<br>— Generating done<br>— Build files have been written to: /home/ehome/Documents/programming/C/power/Demo1<br>[ehome@xman Demo1]$ make<br>Scanning dependencies of target Demo<br>[100%] Building C object CMakeFiles/Demo.dir/main.cc.o<br>Linking C executable Demo<br>[100%] Built target Demo<br>[ehome@xman Demo1]$ ./Demo 5 4<br>5 ^ 4 is 625<br>[ehome@xman Demo1]$ ./Demo 7 3<br>7 ^ 3 is 343<br>[ehome@xman Demo1]$ ./Demo 2 10<br>2 ^ 10 is 1024<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">## 多个源文件</span><br><span class="line"></span><br><span class="line">### 同一目录，多个源文件</span><br><span class="line"></span><br><span class="line">现在假如把 power 函数单独写进一个名为 MathFunctions.cc 的源文件里</span><br><span class="line">将上述工程修改下</span><br><span class="line"></span><br><span class="line">MathFunctions.h</span><br></pre></td></tr></table></figure><br>/**</p><ul><li>power - Calculate the power of number.</li><li>@param base: Base value.</li><li>@param exponent: Exponent value.<br>*</li><li>@return base raised to the power exponent.<br>*/<br>double power(double base, int exponent);<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">MathFunctions.cc</span><br></pre></td></tr></table></figure>/**</li><li>power - Calculate the power of number.</li><li>@param base: Base value.</li><li>@param exponent: Exponent value.<br>*</li><li>@return base raised to the power exponent.<br>*/<br>double power(double base, int exponent)<br>{<br>  int result = base;<br>  int i;<br>  if (exponent == 0) {<pre><code>  return 1;</code></pre>  }<br>  for(i = 1; i &lt; exponent; ++i){<pre><code>  result = result * base;</code></pre>  }<br>  return result;<br>}</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">main.cc</span><br></pre></td></tr></table></figure><h1 id="include"><a href="#include" class="headerlink" title="include "></a>include <stdio.h></h1><h1 id="include-1"><a href="#include-1" class="headerlink" title="include "></a>include <stdlib.h></h1><h1 id="include-“MathFunctions-h”"><a href="#include-“MathFunctions-h”" class="headerlink" title="include “MathFunctions.h”"></a>include “MathFunctions.h”</h1><p>int main(int argc, char *argv[])<br>{<br>    if (argc &lt; 3){<br>        printf(“Usage: %s base exponent \n”, argv[0]);<br>        return 1;<br>    }<br>    double base = atof(argv[1]);<br>    int exponent = atoi(argv[2]);<br>    double result = power(base, exponent);<br>    printf(“%g ^ %d is %g\n”, base, exponent, result);<br>    return 0;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">这个时候，CMakeLists.txt 可以改成如下的形式：</span><br></pre></td></tr></table></figure></p><h1 id="CMake-最低版本号要求"><a href="#CMake-最低版本号要求" class="headerlink" title="CMake 最低版本号要求"></a>CMake 最低版本号要求</h1><p>cmake_minimum_required (VERSION 2.8)</p><h1 id="项目信息"><a href="#项目信息" class="headerlink" title="项目信息"></a>项目信息</h1><p>project (Demo2)</p><h1 id="指定生成目标"><a href="#指定生成目标" class="headerlink" title="指定生成目标"></a>指定生成目标</h1><p>add_executable(Demo main.cc MathFunctions.cc)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">文件目录结构如下</span><br></pre></td></tr></table></figure><br>iddddeMac-mini:Demo2 iddd$ tree -L 2<br>.<br>|— CMakeLists.txt<br>|— MathFunctions.cc<br>|— MathFunctions.h<br>`— main.cc<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">唯一的改动只是在 add_executable 命令中增加了一个 MathFunctions.cc 源文件。</span><br><span class="line">存在问题：</span><br><span class="line">    </span><br><span class="line">    - 如果源文件很多，把所有源文件的名字都加进去将是一件烦人的工作。</span><br><span class="line"></span><br><span class="line">更省事的方法是使用 aux_source_directory 命令，该命令会查找指定目录下的所有源文件，然后将结果存进指定变量名。其语法如下：</span><br></pre></td></tr></table></figure><br>aux_source_directory(<dir> <variable>)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">因此，可以修改 CMakeLists.txt 如下：</span><br></pre></td></tr></table></figure></p><h1 id="CMake-最低版本号要求-1"><a href="#CMake-最低版本号要求-1" class="headerlink" title="CMake 最低版本号要求"></a>CMake 最低版本号要求</h1><p>cmake_minimum_required (VERSION 2.8)</p><h1 id="项目信息-1"><a href="#项目信息-1" class="headerlink" title="项目信息"></a>项目信息</h1><p>project (Demo2</p><h1 id="查找当前目录下的所有源文件"><a href="#查找当前目录下的所有源文件" class="headerlink" title="查找当前目录下的所有源文件"></a>查找当前目录下的所有源文件</h1><h1 id="并将名称保存到-DIR-SRCS-变量"><a href="#并将名称保存到-DIR-SRCS-变量" class="headerlink" title="并将名称保存到 DIR_SRCS 变量"></a>并将名称保存到 DIR_SRCS 变量</h1><p>aux_source_directory(. DIR_SRCS)</p><h1 id="指定生成目标-1"><a href="#指定生成目标-1" class="headerlink" title="指定生成目标"></a>指定生成目标</h1><p>add_executable(Demo ${DIR_SRCS})<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">这样，CMake 会将当前目录所有源文件的文件名赋值给变量 DIR_SRCS ，再指示变量 DIR_SRCS 中的源文件需要编译成一个名称为 Demo 的可执行文件。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 多个目录，多个源文件</span><br><span class="line"></span><br><span class="line">现在进一步将 MathFunctions.h 和 MathFunctions.cc 文件移动到 math 目录下。</span><br></pre></td></tr></table></figure><br>iddddeMac-mini:Demo3 iddd$ tree -L 2<br>.<br>|— CMakeLists.txt<br>|— main.cc<br>`— math<br>    |— CMakeLists.txt<br>    |— MathFunctions.cc<br>    |— MathFunctions.h<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">修改main.cc</span><br></pre></td></tr></table></figure></p><h1 id="include-2"><a href="#include-2" class="headerlink" title="include "></a>include <stdio.h></h1><h1 id="include-3"><a href="#include-3" class="headerlink" title="include "></a>include <stdlib.h></h1><h1 id="include-“math-MathFunctions-h”"><a href="#include-“math-MathFunctions-h”" class="headerlink" title="include “math/MathFunctions.h”"></a>include “math/MathFunctions.h”</h1><p>int main(int argc, char *argv[])<br>{<br>    if (argc &lt; 3){<br>        printf(“Usage: %s base exponent \n”, argv[0]);<br>        return 1;<br>    }<br>    double base = atof(argv[1]);<br>    int exponent = atoi(argv[2]);<br>    double result = power(base, exponent);<br>    printf(“%g ^ %d is %g\n”, base, exponent, result);<br>    return 0;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">对于这种情况，需要分别在项目根目录 Demo3 和 math 目录里各编写一个 CMakeLists.txt 文件。为了方便，我们可以先将 math 目录里的文件编译成静态库再由 main 函数调用。</span><br><span class="line"></span><br><span class="line">根目录中的 CMakeLists.txt ：</span><br></pre></td></tr></table></figure></p><h1 id="CMake-最低版本号要求-2"><a href="#CMake-最低版本号要求-2" class="headerlink" title="CMake 最低版本号要求"></a>CMake 最低版本号要求</h1><p>cmake_minimum_required (VERSION 2.8)</p><h1 id="项目信息-2"><a href="#项目信息-2" class="headerlink" title="项目信息"></a>项目信息</h1><p>project (Demo3)</p><h1 id="查找当前目录下的所有源文件-1"><a href="#查找当前目录下的所有源文件-1" class="headerlink" title="查找当前目录下的所有源文件"></a>查找当前目录下的所有源文件</h1><h1 id="并将名称保存到-DIR-SRCS-变量-1"><a href="#并将名称保存到-DIR-SRCS-变量-1" class="headerlink" title="并将名称保存到 DIR_SRCS 变量"></a>并将名称保存到 DIR_SRCS 变量</h1><p>aux_source_directory(. DIR_SRCS)</p><h1 id="添加-math-子目录"><a href="#添加-math-子目录" class="headerlink" title="添加 math 子目录"></a>添加 math 子目录</h1><p>add_subdirectory(math)</p><h1 id="指定生成目标-2"><a href="#指定生成目标-2" class="headerlink" title="指定生成目标"></a>指定生成目标</h1><p>add_executable(Demo main.cc)</p><h1 id="添加链接库"><a href="#添加链接库" class="headerlink" title="添加链接库"></a>添加链接库</h1><p>target_link_libraries(Demo MathFunctions)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">该文件添加了下面的内容: 第3行，使用命令 add_subdirectory 指明本项目包含一个子目录 math，这样 math 目录下的 CMakeLists.txt 文件和源代码也会被处理 。第6行，使用命令 target_link_libraries 指明可执行文件 main 需要连接一个名为 MathFunctions 的链接库 。</span><br><span class="line"></span><br><span class="line">子目录中的 CMakeLists.txt：</span><br></pre></td></tr></table></figure></p><h1 id="查找当前目录下的所有源文件-2"><a href="#查找当前目录下的所有源文件-2" class="headerlink" title="查找当前目录下的所有源文件"></a>查找当前目录下的所有源文件</h1><h1 id="并将名称保存到-DIR-LIB-SRCS-变量"><a href="#并将名称保存到-DIR-LIB-SRCS-变量" class="headerlink" title="并将名称保存到 DIR_LIB_SRCS 变量"></a>并将名称保存到 DIR_LIB_SRCS 变量</h1><p>aux_source_directory(. DIR_LIB_SRCS)</p><h1 id="生成链接库"><a href="#生成链接库" class="headerlink" title="生成链接库"></a>生成链接库</h1><p>add_library (MathFunctions ${DIR_LIB_SRCS})<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">在该文件中使用命令 add_library 将 src 目录中的源文件编译为静态链接库。</span><br><span class="line"></span><br><span class="line">## 自定义编译选项</span><br><span class="line"></span><br><span class="line">CMake 允许为项目增加编译选项，从而可以根据用户的环境和需求选择最合适的编译方案。</span><br><span class="line">例如，可以将 MathFunctions 库设为一个可选的库，如果该选项为 ON ，就使用该库定义的数学函数来进行运算。否则就调用标准库中的数学函数库。</span><br><span class="line"></span><br><span class="line">### 修改 CMakeLists 文件</span><br><span class="line">我们要做的第一步是在顶层的 CMakeLists.txt 文件中添加该选项：</span><br></pre></td></tr></table></figure></p><h1 id="CMake-最低版本号要求-3"><a href="#CMake-最低版本号要求-3" class="headerlink" title="CMake 最低版本号要求"></a>CMake 最低版本号要求</h1><p>cmake_minimum_required (VERSION 2.8)</p><h1 id="项目信息-3"><a href="#项目信息-3" class="headerlink" title="项目信息"></a>项目信息</h1><p>project (Demo4)</p><h1 id="加入一个配置头文件，用于处理-CMake-对源码的设置"><a href="#加入一个配置头文件，用于处理-CMake-对源码的设置" class="headerlink" title="加入一个配置头文件，用于处理 CMake 对源码的设置"></a>加入一个配置头文件，用于处理 CMake 对源码的设置</h1><p>configure_file (<br>“${PROJECT_SOURCE_DIR}/config.h.in”<br>“${PROJECT_BINARY_DIR}/config.h”<br>)</p><h1 id="是否使用自己的-MathFunctions-库"><a href="#是否使用自己的-MathFunctions-库" class="headerlink" title="是否使用自己的 MathFunctions 库"></a>是否使用自己的 MathFunctions 库</h1><p>option (USE_MYMATH<br>“Use provided math implementation” ON)</p><h1 id="是否加入-MathFunctions-库"><a href="#是否加入-MathFunctions-库" class="headerlink" title="是否加入 MathFunctions 库"></a>是否加入 MathFunctions 库</h1><p>if (USE_MYMATH)<br>include_directories (“${PROJECT_SOURCE_DIR}/math”)<br>add_subdirectory (math)<br>set (EXTRA_LIBS ${EXTRA_LIBS} MathFunctions)<br>endif (USE_MYMATH)</p><h1 id="查找当前目录下的所有源文件-3"><a href="#查找当前目录下的所有源文件-3" class="headerlink" title="查找当前目录下的所有源文件"></a>查找当前目录下的所有源文件</h1><h1 id="并将名称保存到-DIR-SRCS-变量-2"><a href="#并将名称保存到-DIR-SRCS-变量-2" class="headerlink" title="并将名称保存到 DIR_SRCS 变量"></a>并将名称保存到 DIR_SRCS 变量</h1><p>aux_source_directory(. DIR_SRCS)</p><h1 id="指定生成目标-3"><a href="#指定生成目标-3" class="headerlink" title="指定生成目标"></a>指定生成目标</h1><p>add_executable(Demo ${DIR_SRCS})<br>target_link_libraries (Demo ${EXTRA_LIBS})<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">其中：</span><br><span class="line"></span><br><span class="line">1. 第7行的 configure_file 命令用于加入一个配置头文件 config.h ，这个文件由 CMake 从 config.h.in 生成，通过这样的机制，将可以通过预定义一些参数和变量来控制代码的生成。</span><br><span class="line">2. 第13行的 option 命令添加了一个 USE_MYMATH 选项，并且默认值为 ON 。</span><br><span class="line">3. 第17行根据 USE_MYMATH 变量的值来决定是否使用我们自己编写的 MathFunctions 库。</span><br><span class="line"></span><br><span class="line">### 修改 main.cc 文件</span><br><span class="line"></span><br><span class="line">代码中添加编译选项 宏定义 USE_MYMATH</span><br></pre></td></tr></table></figure></p><h1 id="include-4"><a href="#include-4" class="headerlink" title="include "></a>include <stdio.h></h1><h1 id="include-5"><a href="#include-5" class="headerlink" title="include "></a>include <stdlib.h></h1><h1 id="include-“config-h”"><a href="#include-“config-h”" class="headerlink" title="include “config.h”"></a>include “config.h”</h1><h1 id="ifdef-USE-MYMATH"><a href="#ifdef-USE-MYMATH" class="headerlink" title="ifdef USE_MYMATH"></a>ifdef USE_MYMATH</h1><h1 id="include-“math-MathFunctions-h”-1"><a href="#include-“math-MathFunctions-h”-1" class="headerlink" title="include “math/MathFunctions.h”"></a>include “math/MathFunctions.h”</h1><h1 id="else"><a href="#else" class="headerlink" title="else"></a>else</h1><h1 id="include-6"><a href="#include-6" class="headerlink" title="include "></a>include <math.h></h1><h1 id="endif"><a href="#endif" class="headerlink" title="endif"></a>endif</h1><p>int main(int argc, char *argv[])<br>{<br>    if (argc &lt; 3){<br>        printf(“Usage: %s base exponent \n”, argv[0]);<br>        return 1;<br>    }<br>    double base = atof(argv[1]);<br>    int exponent = atoi(argv[2]);</p><h1 id="ifdef-USE-MYMATH-1"><a href="#ifdef-USE-MYMATH-1" class="headerlink" title="ifdef USE_MYMATH"></a>ifdef USE_MYMATH</h1><pre><code>printf(&quot;Now we use our own Math library. \n&quot;);double result = power(base, exponent);</code></pre><h1 id="else-1"><a href="#else-1" class="headerlink" title="else"></a>else</h1><pre><code>printf(&quot;Now we use the standard library. \n&quot;);double result = pow(base, exponent);</code></pre><h1 id="endif-1"><a href="#endif-1" class="headerlink" title="endif"></a>endif</h1><pre><code>printf(&quot;%g ^ %d is %g\n&quot;, base, exponent, result);return 0;</code></pre><p>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 编写 config.h.in 文件</span><br><span class="line"></span><br><span class="line">上面的程序值得注意的是第2行，这里引用了一个 config.h 文件，这个文件预定义了 USE_MYMATH 的值。但我们并不直接编写这个文件，为了方便从 CMakeLists.txt 中导入配置，我们编写一个 config.h.in 文件，内容如下：</span><br></pre></td></tr></table></figure></p><h1 id="cmakedefine-USE-MYMATH"><a href="#cmakedefine-USE-MYMATH" class="headerlink" title="cmakedefine USE_MYMATH"></a>cmakedefine USE_MYMATH</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">这样 CMake 会自动根据 CMakeLists 配置文件中的设置自动生成 config.h 文件。</span><br><span class="line"></span><br><span class="line">### 编译项目</span><br><span class="line"></span><br><span class="line">现在编译一下这个项目，为了便于交互式的选择该变量的值，可以使用 ccmake 命令, 该命令会提供一个会话式的交互式配置界面。：</span><br></pre></td></tr></table></figure><p>ccmake .<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;% asset_img ccmake-0.png 交互式配置界面 %&#125;</span><br><span class="line"></span><br><span class="line">从中可以找到刚刚定义的 USE_MYMATH 选项，按键盘的方向键可以在不同的选项窗口间跳转，按下 enter 键可以修改该选项。</span><br><span class="line"></span><br><span class="line">修改完成后可以按下 c 选项完成配置，之后再按 g 键确认生成 Makefile 。</span><br><span class="line"></span><br><span class="line">ccmake 的其他操作可以参考窗口下方给出的指令提示。</span><br><span class="line"></span><br><span class="line">我们可以试试分别将 USE_MYMATH 设为 ON 和 OFF 得到的结果：</span><br><span class="line"></span><br><span class="line">### USE_MYMATH 为 ON</span><br><span class="line"></span><br><span class="line">config.h</span><br></pre></td></tr></table></figure></p><h1 id="define-USE-MYMATH"><a href="#define-USE-MYMATH" class="headerlink" title="define USE_MYMATH"></a>define USE_MYMATH</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">运行结果</span><br></pre></td></tr></table></figure><p>iddddeMac-mini:Demo4 iddd$ ./Demo 4 8<br>Now we use our own Math library.<br>4 ^ 8 is 65536<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### USE_MYMATH 为 OFF</span><br><span class="line"></span><br><span class="line">config.h</span><br></pre></td></tr></table></figure><br>/<em> #undef USE_MYMATH </em>/<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">运行结果</span><br></pre></td></tr></table></figure><br>iddddeMac-mini:Demo4 iddd$ ./Demo 4 8<br>Now we use the standard library.<br>4 ^ 8 is 65536<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 安装和测试</span><br><span class="line"></span><br><span class="line">CMake 也可以指定安装规则，以及添加测试。这两个功能分别可以通过在产生 Makefile 后使用 make install 和 make test 来执行。在以前的 GNU Makefile 里，你可能需要为此编写 install 和 test 两个伪目标和相应的规则，但在 CMake 里，这样的工作同样只需要简单的调用几条命令。</span><br><span class="line"></span><br><span class="line">### 定制安装规则</span><br><span class="line"></span><br><span class="line">首先先在 math&#x2F;CMakeLists.txt 文件里添加下面两行：</span><br></pre></td></tr></table></figure></p><h1 id="指定-MathFunctions-库的安装路径"><a href="#指定-MathFunctions-库的安装路径" class="headerlink" title="指定 MathFunctions 库的安装路径"></a>指定 MathFunctions 库的安装路径</h1><p>install (TARGETS MathFunctions DESTINATION bin)<br>install (FILES MathFunctions.h DESTINATION include)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">指明 MathFunctions 库的安装路径。之后同样修改根目录的 CMakeLists 文件，在末尾添加下面几行：</span><br></pre></td></tr></table></figure></p><h1 id="指定安装路径"><a href="#指定安装路径" class="headerlink" title="指定安装路径"></a>指定安装路径</h1><p>install (TARGETS Demo DESTINATION bin)<br>install (FILES “${PROJECT_BINARY_DIR}/config.h”<br>DESTINATION include)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">通过上面的定制，生成的 Demo 文件和 MathFunctions 函数库 libMathFunctions.o 文件将会被复制到 &#x2F;usr&#x2F;local&#x2F;bin 中，而 MathFunctions.h 和生成的 config.h 文件则会被复制到 &#x2F;usr&#x2F;local&#x2F;include 中。</span><br><span class="line"></span><br><span class="line">### 我们可以验证一下</span><br></pre></td></tr></table></figure><br>iddddeMac-mini:Demo5 iddd$ make install<br>[ 50%] Built target MathFunctions<br>[100%] Built target Demo<br>Install the project…<br>— Install configuration: “”<br>— Installing: /usr/local/bin/Demo<br>— Installing: /usr/local/include/config.h<br>— Installing: /usr/local/bin/libMathFunctions.a<br>— Installing: /usr/local/include/MathFunctions.h<br>iddddeMac-mini:Demo5 iddd$ ls /usr/local/bin/Demo<br>/usr/local/bin/Demo<br>iddddeMac-mini:Demo5 iddd$ ls /usr/local/bin/libMathFunctions.a<br>/usr/local/bin/libMathFunctions.a<br>iddddeMac-mini:Demo5 iddd$ ls /usr/local/include/config.h<br>/usr/local/include/config.h<br>iddddeMac-mini:Demo5 iddd$ ls /usr/local/include/MathFunctions.h<br>/usr/local/include/MathFunctions.h<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">顺带一提的是，这里的 &#x2F;usr&#x2F;local&#x2F; 是默认安装到的根目录，可以通过修改 CMAKE_INSTALL_PREFIX 变量的值来指定这些文件应该拷贝到哪个根目录。</span><br><span class="line"></span><br><span class="line">### 卸载安装的软件</span><br><span class="line"></span><br><span class="line">通过CMake 安装的软件都会有一个安装文件列表</span><br><span class="line"></span><br><span class="line">install_manifest.txt 内容</span><br></pre></td></tr></table></figure><br>/usr/local/bin/Demo<br>/usr/local/include/config.h<br>/usr/local/bin/libMathFunctions.a<br>/usr/local/include/MathFunctions.h<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">只要删除就好</span><br></pre></td></tr></table></figure><br>cat install_manifest.txt |xargs rm<br>```</p><h3 id="为工程添加测试"><a href="#为工程添加测试" class="headerlink" title="为工程添加测试"></a>为工程添加测试</h3><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.hahack.com/codes/cmake/" target="_blank" rel="noopener">CMake 入门实战</a></li><li><a href="https://blog.csdn.net/zhuiyunzhugang/article/details/88142908" target="_blank" rel="noopener">超详细的cmake教程</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;你或许听过好几种 Make 工具，例如 &lt;a href=&quot;https://www.hahack.com/wiki/tools-makefile.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GNU Make&lt;/a&gt; ，QT 的 &lt;a href=&quot;http://qt-project.org/doc/qt-4.8/qmake-manual.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;qmake&lt;/a&gt; ，微软的 &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms930369.aspx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MS nmake&lt;/a&gt;，BSD Make（&lt;a href=&quot;http://www.freebsd.org/doc/en/books/pmake/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;pmake&lt;/a&gt;），Makepp，等等。这些 Make 工具遵循着不同的规范和标准，所执行的 Makefile 格式也千差万别。这样就带来了一个严峻的问题：如果软件想跨平台，必须要保证能够在不同平台编译。而如果使用上面的 Make 工具，就得为每一种标准写一次 Makefile ，这将是一件让人抓狂的工作。&lt;/p&gt;
&lt;p&gt;CMake就是针对上面问题所设计的工具：它首先允许开发者编写一种平台无关的 CMakeList.txt 文件来定制整个编译流程，然后再根据目标用户的平台进一步生成所需的本地化 Makefile 和工程文件，如 Unix 的 Makefile 或 Windows 的 Visual Studio 工程。从而做到“Write once, run everywhere”。显然，CMake 是一个比上述几种 make 更高级的编译配置工具。一些使用 CMake 作为项目架构系统的知名开源项目有 VTK、ITK、KDE、OpenCV、OSG 等 [1]。&lt;/p&gt;</summary>
    
    
    
    <category term="C" scheme="http://blog.rcant.com/categories/C/"/>
    
    
    <category term="c" scheme="http://blog.rcant.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>学习MakeFile(前言)</title>
    <link href="http://blog.rcant.com/2020/11/12/cpp/cpp-makefile-0/"/>
    <id>http://blog.rcant.com/2020/11/12/cpp/cpp-makefile-0/</id>
    <published>2020-11-12T03:39:17.000Z</published>
    <updated>2020-11-12T12:22:36.802Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>为了让逐个编译的过程变成一条命令</p><a id="more"></a><h2 id="前提：了解MakeFile是什么？"><a href="#前提：了解MakeFile是什么？" class="headerlink" title="前提：了解MakeFile是什么？"></a>前提：了解MakeFile是什么？</h2><p><strong>Makefile</strong> 关系到了整个工程的编译规则。一个工程中的源文件不计数，其按类型、功能、模块分别放在若干个目录中，<strong>Makefile</strong> 定义了一系列的规则来指定，哪些文件需要先编译，哪些文件需要后编译，哪些文件需要重新编译，甚至于进行更复杂的功能操作，因为 <strong>Makefile</strong> 就像一个 <strong>Makefile</strong> 脚本一样，其中也可以执行操作系统的命令。</p><p><strong>Makefile</strong> 带来的好处就是——“自动化编译”，一旦写好，只需要一个 <strong>make</strong> 命令，整个工程完全自动编译，极大的提高了软件开发的效率。 </p><p><strong>make</strong> 是一个命令工具，是一个解释 <strong>Makefile</strong> 中指令的命令工具，一般来说，大多数的IDE都有这个命令，比如：Delphi的 <strong>make</strong> ，Visual C++ 的<strong>nmake</strong>，Linux下GNU的 <strong>make</strong>。可见， <strong>Makefile</strong> 都成为了一种在工程方面的编译方法。</p><p>在这篇文档中，将以C/C++的源码作为我们基础，所以必然涉及一些关于C/C++的编译的知识，相关于这方面的内容，还请各位查看相关的编译器的文档。这里所默认的编译器是UNIX下的GCC和CC。</p><h3 id="前提-0-1：关于编译和链接"><a href="#前提-0-1：关于编译和链接" class="headerlink" title="前提 0.1：关于编译和链接"></a>前提 0.1：关于编译和链接</h3><p>一般来说，无论是C、C++、还是pas，首先要把源文件编译成中间代码文件，在Windows下也就是 .obj 文件，UNIX下是 .o 文件，即 Object File，这个动作叫做编译（compile）。然后再把大量的Object File合成执行文件，这个动作叫作链接（link）。   </p><p>编译时，编译器需要的是语法的正确，函数与变量的声明的正确。对于后者，通常是你需要告诉编译器头文件的所在位置（头文件中应该只是声明，而定义应该放在C/C++文件中），只要所有的语法正确，编译器就可以编译出中间目标文件。一般来说，每个源文件都应该对应于一个中间目标文件（O文件或是OBJ文件）。 </p><p>链接时，主要是链接函数和全局变量，所以，我们可以使用这些中间目标文件（O文件或是OBJ文件）来链接我们的应用程序。链接器并不管函数所在的源文件，只管函数的中间目标文件（Object File），在大多数时候，由于源文件太多，编译生成的中间目标文件太多，而在链接时需要明显地指出中间目标文件名，这对于编译很不方便，所以，我们要给中间目标文件打个包，在Windows下这种包叫“库文件”（Library File)，也就是 .lib 文件，在UNIX下，是Archive File，也就是 .a 文件。</p><p>总结一下，源文件首先会生成中间目标文件，再由中间目标文件生成执行文件。在编译时，编译器只检测程序语法，和函数、变量是否被声明。如果函数未被声明，编译器会给出一个警告，但可以生成Object File。而在链接程序时，链接器会在所有的Object File中找寻函数的实现，如果找不到，那到就会报链接错误码（Linker Error），在VC下，这种错误一般是：Link 2001错误，意思说是说，链接器未能找到函数的实现。你需要指定函数的ObjectFile.</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://wiki.ubuntu.org.cn/%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E5%86%99Makefile" target="_blank" rel="noopener">跟我一起写Makefile</a></li><li><a href="https://blog.csdn.net/weixin_38391755/article/details/80380786" target="_blank" rel="noopener">Makefile教程（绝对经典，所有问题看这一篇足够了</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;&lt;p&gt;为了让逐个编译的过程变成一条命令&lt;/p&gt;</summary>
    
    
    
    <category term="C" scheme="http://blog.rcant.com/categories/C/"/>
    
    
    <category term="c" scheme="http://blog.rcant.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>学习MakeFile(介绍)</title>
    <link href="http://blog.rcant.com/2020/11/12/cpp/cpp-makefile-1/"/>
    <id>http://blog.rcant.com/2020/11/12/cpp/cpp-makefile-1/</id>
    <published>2020-11-12T03:39:17.000Z</published>
    <updated>2020-11-12T10:21:51.095Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>为了让逐个编译的过程变成一条命令</p><a id="more"></a><h2 id="1、Makefile-介绍"><a href="#1、Makefile-介绍" class="headerlink" title="1、Makefile 介绍"></a>1、Makefile 介绍</h2><p>make命令执行时，需要一个 Makefile 文件，以告诉make命令需要怎么样的去编译和链接程序。</p><p>首先，我们用一个示例来说明Makefile的书写规则。以便给大家一个感性认识。这个示例来源于GNU的make使用手册，在这个示例中，我们的工程有8个C文件，和3个头文件，我们要写一个Makefile来告诉make命令如何编译和链接这几个文件。我们的规则是：</p><ol><li>如果这个工程没有编译过，那么我们的所有C文件都要编译并被链接。</li><li>如果这个工程的某几个C文件被修改，那么我们只编译被修改的C文件，并链接目标程序。</li><li>如果这个工程的头文件被改变了，那么我们需要编译引用了这几个头文件的C文件，并链接目标程序。</li></ol><p>只要我们的Makefile写得够好，所有的这一切，我们只用一个make命令就可以完成，make命令会自动智能地根据当前的文件修改的情况来确定哪些文件需要重编译，从而自己编译所需要的文件和链接目标程序。</p><h3 id="1-1-Makefile的规则"><a href="#1-1-Makefile的规则" class="headerlink" title="1.1 Makefile的规则"></a>1.1 Makefile的规则</h3><p>在讲述这个Makefile之前，还是让我们先来粗略地看一看Makefile的规则。</p><h2 id=""><a href="#" class="headerlink" title=""></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">target... : prerequisites ...</span><br><span class="line">command</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></h2><p>target也就是一个目标文件，可以是Object File，也可以是执行文件。还可以是一个标签（Label），对于标签这种特性，在后续的“伪目标”章节中会有叙述。</p><p>prerequisites就是，要生成那个target所需要的文件或是目标。</p><p>command也就是make需要执行的命令。（任意的Shell命令）</p><p>这是一个文件的依赖关系，也就是说，target这一个或多个的目标文件依赖于prerequisites中的文件，其生成规则定义在command中。说白一点就是说，prerequisites中如果有一个以上的文件比target文件要新的话，command所定义的命令就会被执行。这就是Makefile的规则。也就是Makefile中最核心的内容。</p><p>说到底，Makefile的东西就是这样一点，好像我的这篇文档也该结束了。呵呵。还不尽然，这是Makefile的主线和核心，但要写好一个Makefile还不够，我会以后面一点一点地结合我的工作经验给你慢慢到来。内容还多着呢。：）</p><p>【注】：在看别人写的Makefile文件时，你可能会碰到以下三个变量：$@，$^，$&lt;代表的意义分别是： </p><p> 他们三个是十分重要的三个变量，所代表的含义分别是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$@ -- 目标文件，</span><br><span class="line">$^ -- 所有的依赖文件，</span><br><span class="line">$&lt; -- 第一个依赖文件。</span><br></pre></td></tr></table></figure><h3 id="1-2-一个示例"><a href="#1-2-一个示例" class="headerlink" title="1.2 一个示例"></a>1.2 一个示例</h3><p>正如前面所说的，如果一个工程有3个头文件，和8个C文件，我们为了完成前面所述的那三个规则，我们的Makefile应该是下面的这个样子的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">edit : main.o kbd.o command.o display.o \</span><br><span class="line">insert.o search.o files.o utils.o</span><br><span class="line">  cc -o edit main.o kbd.o command.o display.o \</span><br><span class="line">insert.o search.o files.o utils.o</span><br><span class="line"></span><br><span class="line">main.o : main.c defs.h</span><br><span class="line">  cc -c main.c</span><br><span class="line"></span><br><span class="line">kbd.o : kbd.c defs.h command.h</span><br><span class="line">  cc -c kbd.c</span><br><span class="line"></span><br><span class="line">command.o : command.c defs.h command.h</span><br><span class="line">  cc -c command.c</span><br><span class="line"></span><br><span class="line">display.o : display.c defs.h buffer.h</span><br><span class="line">  cc -c display.c</span><br><span class="line"></span><br><span class="line">insert.o : insert.c defs.h buffer.h</span><br><span class="line">  cc -c insert.c</span><br><span class="line"></span><br><span class="line">search.o : search.c defs.h buffer.h</span><br><span class="line">  cc -c search.c</span><br><span class="line"></span><br><span class="line">files.o : files.c defs.h buffer.h command.h</span><br><span class="line">  cc -c files.c</span><br><span class="line"></span><br><span class="line">utils.o : utils.c defs.h</span><br><span class="line">  cc -c utils.c</span><br><span class="line"></span><br><span class="line">clean :</span><br><span class="line">  rm edit main.o kbd.o command.o display.o \</span><br><span class="line">insert.o search.o files.o utils.o</span><br></pre></td></tr></table></figure></p><p>反斜杠（\）是换行符的意思。这样比较便于Makefile的易读。我们可以把这个内容保存在文件为“Makefile”或“makefile”的文件中，然后在该目录下直接输入命令“make”就可以生成执行文件edit。如果要删除执行文件和所有的中间目标文件，那么，只要简单地执行一下“make clean”就可以了。</p><p>在这个makefile中，目标文件（target）包含：执行文件edit和中间目标文件（*.o），依赖文件（prerequisites）就是冒号后面的那些 .c 文件和 .h文件。每一个 .o 文件都有一组依赖文件，而这些 .o 文件又是执行文件 edit 的依赖文件。依赖关系的实质上就是说明了目标文件是由哪些文件生成的，换言之，目标文件是哪些文件更新的。</p><p>在定义好依赖关系后，后续的那一行定义了如何生成目标文件的操作系统命令，一定要以一个 <strong>Tab键作为开头</strong> 。记住，make并不管命令是怎么工作的，他只管执行所定义的命令。make会比较targets文件和prerequisites文件的修改日期，如果prerequisites文件的日期要比targets文件的日期要新，或者target不存在的话，那么，make就会执行后续定义的命令。</p><p>这里要说明一点的是，clean不是一个文件，它只不过是一个动作名字，有点像C语言中的lable一样，其冒号后什么也没有，那么，make就不会自动去找文件的依赖性，也就不会自动执行其后所定义的命令。要执行其后的命令，就要在make命令后明显得指出这个lable的名字。这样的方法非常有用，我们可以在一个makefile中定义不用的编译或是和编译无关的命令，比如程序的打包，程序的备份，等等。</p><h3 id="1-3-make是如何工作的"><a href="#1-3-make是如何工作的" class="headerlink" title="1.3 make是如何工作的"></a>1.3 make是如何工作的</h3><p>在默认的方式下，也就是我们只输入make命令。那么，</p><ol><li>make会在当前目录下找名字叫“Makefile”或“makefile”的文件。</li><li>如果找到，它会找文件中的第一个目标文件（target），在上面的例子中，他会找到“edit”这个文件，并把这个文件作为最终的目标文件。</li><li>如果edit文件不存在，或是edit所依赖的后面的 .o 文件的文件修改时间要比edit这个文件新，那么，他就会执行后面所定义的命令来生成edit这个文件。</li><li>如果edit所依赖的.o文件也存在，那么make会在当前文件中找目标为.o文件的依赖性，如果找到则再根据那一个规则生成.o文件。（这有点像一个堆栈的过程）</li><li>当然，你的C文件和H文件是存在的啦，于是make会生成 .o 文件，然后再用 .o 文件声明make的终极任务，也就是执行文件edit了。</li></ol><p>这就是整个make的依赖性，make会一层又一层地去找文件的依赖关系，直到最终编译出第一个目标文件。在找寻的过程中，如果出现错误，比如最后被依赖的文件找不到，那么make就会直接退出，并报错，而对于所定义的命令的错误，或是编译不成功，make根本不理。make只管文件的依赖性，即，如果在我找了依赖关系之后，冒号后面的文件还是不在，那么对不起，我就不工作啦。</p><p>通过上述分析，我们知道，像clean这种，没有被第一个目标文件直接或间接关联，那么它后面所定义的命令将不会被自动执行，不过，我们可以显示要make执行。即命令——“make clean”，以此来清除所有的目标文件，以便重编译。</p><p>于是在我们编程中，如果这个工程已被编译过了，当我们修改了其中一个源文件，比如file.c，那么根据我们的依赖性，我们的目标file.o会被重编译（也就是在这个依性关系后面所定义的命令），于是file.o的文件也是最新的啦，于是file.o的文件修改时间要比edit要新，所以edit也会被重新链接了（详见edit目标文件后定义的命令）。</p><p>而如果我们改变了“command.h”，那么，kdb.o、command.o和files.o都会被重编译，并且，edit会被重链接。</p><h3 id="1-4-makefile中使用变量"><a href="#1-4-makefile中使用变量" class="headerlink" title="1.4 makefile中使用变量"></a>1.4 makefile中使用变量</h3><p>在上面的例子中，先让我们看看edit的规则：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">edit : main.o kbd.o command.o display.o \</span><br><span class="line">           insert.o search.o files.o utils.o</span><br><span class="line">     cc -o edit main.o kbd.o command.o display.o \</span><br><span class="line">                insert.o search.o files.o utils.o</span><br></pre></td></tr></table></figure></p><p>我们可以看到[.o]文件的字符串被重复了两次，如果我们的工程需要加入一个新的[.o]文件，那么我们需要在两个地方加（应该是三个地方，还有一个地方在clean中）。当然，我们的makefile并不复杂，所以在两个地方加也不累，但如果makefile变得复杂，那么我们就有可能会忘掉一个需要加入的地方，而导致编译失败。所以，为了makefile的易维护，在makefile中我们可以使用变量。makefile的变量也就是一个字符串，理解成C语言中的宏可能会更好。</p><p>比如，我们声明一个变量，叫objects, OBJECTS, objs, OBJS, obj, 或是 OBJ，反正不管什么啦，只要能够表示obj文件就行了。我们在makefile一开始就这样定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">objects &#x3D; main.o kbd.o command.o display.o \</span><br><span class="line">         insert.o search.o files.o utils.o</span><br></pre></td></tr></table></figure><p>于是，我们就可以很方便地在我们的makefile中以“$(objects)”的方式来使用这个变量了，于是我们的改良版makefile就变成下面这个样子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">objects &#x3D; main.o kbd.o command.o display.o \</span><br><span class="line">         insert.osearch.o files.o utils.o </span><br><span class="line">edit : $(objects)</span><br><span class="line">       cc -o edit $(objects)</span><br><span class="line">main.o : main.c defs.h</span><br><span class="line">       cc -c main.c</span><br><span class="line">kbd.o : kbd.c defs.h command.h</span><br><span class="line">       cc -c kbd.c</span><br><span class="line">command.o : command.c defs.h command.h</span><br><span class="line">       cc -c command.c</span><br><span class="line">display.o : display.c defs.h buffer.h</span><br><span class="line">       cc -c display.c</span><br><span class="line">insert.o : insert.c defs.h buffer.h</span><br><span class="line">       cc -c insert.c</span><br><span class="line">search.o : search.c defs.h buffer.h</span><br><span class="line">       cc -c search.c</span><br><span class="line">files.o : files.c defs.h buffer.h command.h</span><br><span class="line">       cc -c files.c</span><br><span class="line">utils.o : utils.c defs.h</span><br><span class="line">       cc -c utils.c</span><br><span class="line">clean :</span><br><span class="line">       rm edit $(objects)</span><br></pre></td></tr></table></figure><p>于是如果有新的 .o 文件加入，我们只需简单地修改一下 objects 变量就可以了。</p><p>关于变量更多的话题，我会在后续给你一一道来。</p><h3 id="1-5-让make自动推导"><a href="#1-5-让make自动推导" class="headerlink" title="1.5 让make自动推导"></a>1.5 让make自动推导</h3><p>GNU的make很强大，它可以自动推导文件以及文件依赖关系后面的命令，于是我们就没必要去在每一个[.o]文件后都写上类似的命令，因为，我们的make会自动识别，并自己推导命令。</p><p>只要make看到一个[.o]文件，它就会自动的把[.c]文件加在依赖关系中，如果make找到一个whatever.o，那么whatever.c，就会是whatever.o的依赖文件。并且 cc -c whatever.c 也会被推导出来，于是，我们的makefile再也不用写得这么复杂。我们的是新的makefile又出炉了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">objects &#x3D; main.o kbd.o command.o display.o \</span><br><span class="line">         insert.o search.o files.o utils.o</span><br><span class="line"></span><br><span class="line">edit : $(objects)</span><br><span class="line">       cc -o edit $(objects)</span><br><span class="line"></span><br><span class="line">main.o : defs.h</span><br><span class="line">kbd.o : defs.h command.h</span><br><span class="line">command.o : defs.h command.h</span><br><span class="line">display.o : defs.h buffer.h</span><br><span class="line">insert.o : defs.h buffer.h</span><br><span class="line">search.o : defs.h buffer.h</span><br><span class="line">files.o : defs.h buffer.h command.h</span><br><span class="line">utils.o : defs.h</span><br><span class="line"></span><br><span class="line">.PHONY : clean</span><br><span class="line">clean :</span><br><span class="line">       rm edit $(objects)</span><br></pre></td></tr></table></figure><p>这种方法，也就是make的“隐晦规则”。上面文件内容中，“.PHONY”表示，clean是个伪目标文件。</p><p>关于更为详细的“隐晦规则”和“伪目标文件”，我会在后续给你一一道来。</p><h3 id="1-6-另类风格的makefile"><a href="#1-6-另类风格的makefile" class="headerlink" title="1.6 另类风格的makefile"></a>1.6 另类风格的makefile</h3><p>即然我们的make可以自动推导命令，那么我看到那堆[.o]和[.h]的依赖就有点不爽，那么多的重复的[.h]，能不能把其收拢起来，好吧，没有问题，这个对于make来说很容易，谁叫它提供了自动推导命令和文件的功能呢？来看看最新风格的makefile吧。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">objects &#x3D; main.o kbd.o command.o display.o \</span><br><span class="line">         insert.o search.o files.o utils.o</span><br><span class="line"></span><br><span class="line">edit : $(objects)</span><br><span class="line">       cc -o edit $(objects)</span><br><span class="line"></span><br><span class="line">$(objects) : defs.h</span><br><span class="line">kbd.o command.o files.o : command.h</span><br><span class="line">display.o insert.o search.o files.o : buffer.h</span><br><span class="line"></span><br><span class="line">.PHONY : clean</span><br><span class="line">clean :</span><br><span class="line">       rm edit $(objects)</span><br></pre></td></tr></table></figure><p>这种风格，让我们的makefile变得很简单，但我们的文件依赖关系就显得有点凌乱了。鱼和熊掌不可兼得。还看你的喜好了。我是不喜欢这种风格的，一是文件的依赖关系看不清楚，二是如果文件一多，要加入几个新的.o文件，那就理不清楚了。</p><h3 id="1-7-清空目标文件的规则"><a href="#1-7-清空目标文件的规则" class="headerlink" title="1.7 清空目标文件的规则"></a>1.7 清空目标文件的规则</h3><p>每个Makefile中都应该写一个清空目标文件（.o和执行文件）的规则，这不仅便于重编译，也很利于保持文件的清洁。这是一个“修养”（呵呵，还记得我的《编程修养》吗）。一般的风格都是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clean:</span><br><span class="line">    rm edit $(objects)</span><br></pre></td></tr></table></figure><p>更为稳健的做法是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.PHONY : clean</span><br><span class="line">clean :</span><br><span class="line">    -rm edit $(objects)</span><br></pre></td></tr></table></figure><p>前面说过，.PHONY意思表示clean是一个“伪目标”，。而在rm命令前面加了一个小减号的意思就是，也许某些文件出现问题，但不要管，继续做后面的事。当然，clean的规则不要放在文件的开头，不然，这就会变成make的默认目标，相信谁也不愿意这样。不成文的规矩是——“clean从来都是放在文件的最后”。</p><p>上面就是一个makefile的概貌，也是makefile的基础，下面还有很多makefile的相关细节，准备好了吗？准备好了就来。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;&lt;p&gt;为了让逐个编译的过程变成一条命令&lt;/p&gt;</summary>
    
    
    
    <category term="C" scheme="http://blog.rcant.com/categories/C/"/>
    
    
    <category term="c" scheme="http://blog.rcant.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>学习MakeFile(总述)</title>
    <link href="http://blog.rcant.com/2020/11/12/cpp/cpp-makefile-2/"/>
    <id>http://blog.rcant.com/2020/11/12/cpp/cpp-makefile-2/</id>
    <published>2020-11-12T03:39:17.000Z</published>
    <updated>2020-11-12T10:21:39.320Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>为了让逐个编译的过程变成一条命令</p><a id="more"></a><h2 id="2-Makefile-总述"><a href="#2-Makefile-总述" class="headerlink" title="2 Makefile 总述"></a>2 Makefile 总述</h2><h3 id="2-1-Makefile里有什么？"><a href="#2-1-Makefile里有什么？" class="headerlink" title="2.1 Makefile里有什么？"></a>2.1 Makefile里有什么？</h3><p>Makefile里主要包含了五个东西：显式规则、隐晦规则、变量定义、文件指示和注释。</p><ol><li>显式规则。显式规则说明了，如何生成一个或多的的目标文件。这是由Makefile的书写者明显指出，要生成的文件，文件的依赖文件，生成的命令。</li><li>隐晦规则。由于我们的make有自动推导的功能，所以隐晦的规则可以让我们比较粗糙地简略地书写Makefile，这是由make所支持的。</li><li>变量的定义。在Makefile中我们要定义一系列的变量，变量一般都是字符串，这个有点你C语言中的宏，当Makefile被执行时，其中的变量都会被扩展到相应的引用位置上。</li><li>文件指示。其包括了三个部分，一个是在一个Makefile中引用另一个Makefile，就像C语言中的include一样；另一个是指根据某些情况指定Makefile中的有效部分，就像C语言中的预编译#if一样；还有就是定义一个多行的命令。有关这一部分的内容，我会在后续的部分中讲述。</li><li>注释。Makefile中只有行注释，和UNIX的Shell脚本一样，其注释是用“#”字符，这个就像C/C++中的“//”一样。如果你要在你的Makefile中使用“#”字符，可以用反斜框进行转义，如：“#”。</li></ol><p>最后，还值得一提的是，在Makefile中的命令，必须要以[Tab]键开始。</p><h3 id="2-2-Makefile的文件名"><a href="#2-2-Makefile的文件名" class="headerlink" title="2.2 Makefile的文件名"></a>2.2 Makefile的文件名</h3><p>默认的情况下，make命令会在当前目录下按顺序找寻文件名为“GNUmakefile”、“makefile”、“Makefile”的文件，找到了解释这个文件。在这三个文件名中，最好使用“Makefile”这个文件名，因为，这个文件名第一个字符为大写，这样有一种显目的感觉。最好不要用“GNUmakefile”，这个文件是GNU的make识别的。有另外一些make只对全小写的“makefile”文件名敏感，但是基本上来说，大多数的make都支持“makefile”和“Makefile”这两种默认文件名。</p><p>当然，你可以使用别的文件名来书写Makefile，比如：“Make.Linux”，“Make.Solaris”，“Make.AIX”等，如果要指定特定的Makefile，你可以使用make的“-f”和“—file”参数，如：make -f Make.Linux或make —file Make.AIX。</p><h3 id="2-3-引用其它的Makefile"><a href="#2-3-引用其它的Makefile" class="headerlink" title="2.3 引用其它的Makefile"></a>2.3 引用其它的Makefile</h3><p>在Makefile使用include关键字可以把别的Makefile包含进来，这很像C语言的#include，被包含的文件会原模原样的放在当前文件的包含位置。include的语法是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include&lt;filename&gt;</span><br></pre></td></tr></table></figure><p>filename可以是当前操作系统Shell的文件模式（可以保含路径和通配符）</p><p>在include前面可以有一些空字符，但是绝不能是[Tab]键开始。include和可以用一个或多个空格隔开。举个例子，你有这样几个Makefile：a.mk、b.mk、c.mk，还有一个文件叫foo.make，以及一个变量$(bar)，其包含了e.mk和f.mk，那么，下面的语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include foo.make *.mk $(bar)</span><br></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include foo.make a.mk b.mk c.mk e.mk f.mk</span><br></pre></td></tr></table></figure><p>make命令开始时，会把找寻include所指出的其它Makefile，并把其内容安置在当前的位置。就好像C/C++的#include指令一样。如果文件都没有指定绝对路径或是相对路径的话，make会在当前目录下首先寻找，如果当前目录下没有找到，那么，make还会在下面的几个目录下找：</p><p>  1.如果make执行时，有“-I”或“—include-dir”参数，那么make就会在这个参数所指定的目录下去寻找。<br>  2.如果目录/include（一般是：/usr/local/bin或/usr/include）存在的话，make也会去找。</p><p>如果有文件没有找到的话，make会生成一条警告信息，但不会马上出现致命错误。它会继续载入其它的文件，一旦完成makefile的读取，make会再重试这些没有找到，或是不能读取的文件，如果还是不行，make才会出现一条致命信息。如果你想让make不理那些无法读取的文件，而继续执行，你可以在include前加一个减号“-”。如：</p><p>-include<filename></p><p>其表示，无论include过程中出现什么错误，都不要报错继续执行。和其它版本make兼容的相关命令是sinclude，其作用和这一个是一样的。</p><h3 id="2-4-环境变量-MAKEFILES"><a href="#2-4-环境变量-MAKEFILES" class="headerlink" title="2.4 环境变量 MAKEFILES"></a>2.4 环境变量 MAKEFILES</h3><p>如果你的当前环境中定义了环境变量MAKEFILES，那么，make会把这个变量中的值做一个类似于include的动作。这个变量中的值是其它的Makefile，用空格分隔。只是，它和include不同的是，从这个环境变中引入的Makefile的“目标”不会起作用，如果环境变量中定义的文件发现错误，make也会不理。</p><p>但是在这里我还是建议不要使用这个环境变量，因为只要这个变量一被定义，那么当你使用make时，所有的Makefile都会受到它的影响，这绝不是你想看到的。在这里提这个事，只是为了告诉大家，也许有时候你的Makefile出现了怪事，那么你可以看看当前环境中有没有定义这个变量。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;&lt;p&gt;为了让逐个编译的过程变成一条命令&lt;/p&gt;</summary>
    
    
    
    <category term="C" scheme="http://blog.rcant.com/categories/C/"/>
    
    
    <category term="c" scheme="http://blog.rcant.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>学习MakeFile</title>
    <link href="http://blog.rcant.com/2020/11/12/cpp/cpp-makefile-simple/"/>
    <id>http://blog.rcant.com/2020/11/12/cpp/cpp-makefile-simple/</id>
    <published>2020-11-12T03:39:17.000Z</published>
    <updated>2020-11-12T12:15:45.076Z</updated>
    
    <content type="html"><![CDATA[<p>Makefile其实不难学，对于一些基本概念百度上应该很多，这里分享一个循序渐进的学习方式，保证让你快速掌握Makefile的编写。本文首发于公众号：良许Linux，里面有一个 Makefile 系列，欢迎关注交流！</p><a id="more"></a><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>通过之前章节的学习，我们对Makefile有个基础的认识，现在开始自己动手写Makefile。目前网络上有不少可以自动生成Makefile的工具，但很多项目其实没必要那么复杂，完全可以自己动手写出来。而且对于初学者来说，自己动手写一遍Makefile可以顶看十遍高手写的Makefile，也可以加深对Makefile的理解，将来公司的Makefile有需要修改的时候自己就可以动手搞定，不需要依靠他人，何乐而不为？</p><h2 id="2-源代码"><a href="#2-源代码" class="headerlink" title="2. 源代码"></a>2. 源代码</h2><p>介绍在本教程中用于示例的代码很简单，仅仅是在main函数中调用了fun1及fun2函数，而fun1及fun2独立写在fun1.c及fun2.c里。代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;main.c  </span><br><span class="line">int main()  </span><br><span class="line">&#123;  </span><br><span class="line">    printf(&quot;hello world\n&quot;);  </span><br><span class="line">    fun1();  </span><br><span class="line">    fun2();  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;fun1.c  </span><br><span class="line">void fun1()  </span><br><span class="line">&#123;  </span><br><span class="line">    printf(&quot;this is fun1\n&quot;);  </span><br><span class="line">&#125;  </span><br><span class="line">&#x2F;&#x2F;fun2.c  </span><br><span class="line">void fun2()  </span><br><span class="line">&#123;  </span><br><span class="line">    printf(&quot;this is fun2\n&quot;);  </span><br><span class="line">&#125;</span><br><span class="line">&#96;&#96;&#96;  </span><br><span class="line"></span><br><span class="line">## 3. 第一版Makefile</span><br><span class="line"></span><br><span class="line">对于我们的示例代码，不通过Makefile编译其实也很简单：gcc main.c fun1.c fun2.c -o app  我们知道，Makefile其实就是按规则一条条的执行。所以，我们完全可以把上面那条命令写成Makefile的一个规则。我们的目标是app，按此写法依赖是main.c fun1.c fun2.c，则最终的Makefile如下：</span><br></pre></td></tr></table></figure><br>app: main.c fun1.c fun2.c<br>    gcc main.c fun1.c fun2.c -o app<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">但这个版本的Makefile有两个很重要的不足：</span><br><span class="line"></span><br><span class="line">    1. 对于简单代码还好，而对于大型项目，具有成千上万代码来说，仅用一行规则是完全不够的，即使够的话也需要写很长的一条规则；</span><br><span class="line">    2. 任何文件只要稍微做了修改就需要整个项目完整的重要编译。</span><br><span class="line"></span><br><span class="line">基于此，我们在第一版的基础上优化出第二版。</span><br><span class="line"></span><br><span class="line">## 4. 第二版Makefile</span><br><span class="line"></span><br><span class="line">在第二版Makefile中，为了避免改动任何代码就需要重新编译整个项目的问题，我们将主规则的各个依赖替换成各自的中间文件，即main.c --&gt; main.o，fun1.c --&gt; fun1.o，fun2.c --&gt; fun2.o，再对每个中间文件的生成各自写条规则比如对于main.o，规则为：</span><br></pre></td></tr></table></figure><br>main.o: main.c<br>    gcc -c main.c -o main.o<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这样做的好处是，当有一个文件发生改动时，只需重新编译此文件即可，而无需重新编译整个项目。完整Makefile如下：</span><br></pre></td></tr></table></figure><br>app: main.o fun1.o fun2.o<br>    gcc main.o fun1.o fun2.o -o app<br>​<br>main.o: main.c<br>    gcc -c main.c -o main.o<br>​<br>fun1.o: fun1.c<br>    gcc -c fun1.c -o fun1.o<br>​<br>fun2.o: fun2.c<br>    gcc -c fun2.c -o fun2.o<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">第二版Makefile同样具有一些缺陷：</span><br><span class="line"></span><br><span class="line">    1. 里面存在一些重复的内容，可以考虑用变量代替；</span><br><span class="line">    2. 后面三条规则非常类似，可以考虑用一条模式规则代替。</span><br><span class="line"></span><br><span class="line">基于此，我们在第二版的基础上优化出第三版。</span><br><span class="line"></span><br><span class="line">## 5. 第三版Makefile</span><br><span class="line">在第三版Makefile中，我们使用变量及模式规则使Makefile更加简洁。使用的三个变量如下：</span><br></pre></td></tr></table></figure><br>obj = main.o fun1.o fun2.o<br>target = app<br>CC = gcc<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">使用的模式规则为：</span><br></pre></td></tr></table></figure><br>%.o: %.c<br>        $(CC) -c $&lt; -o $@<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">这条模式规则表示：所有的.o文件都由对应的.c文件生成。在规则里，我们又看到了两个自动变量：$&lt;和$@。其实自动变量有很多，常用的有三个：        </span><br><span class="line">    - $&lt;：第一个依赖文件；        </span><br><span class="line">    - $@：目标；        </span><br><span class="line">    - $^：所有不重复的依赖文件，以空格分开</span><br></pre></td></tr></table></figure><br>obj = main.o fun1.o fun2.o<br>target = app<br>CC = gcc<br>​<br>$(target): $(obj)<br>    $(CC) $(obj) -o $(target)<br>​<br>%.o: %.c<br>    $(CC) -c $&lt; -o $@<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">第三版Makefile依然存在一些缺陷：</span><br><span class="line">    1. obj对应的文件需要一个个输入，工作量大；</span><br><span class="line">    2. 文件数目比较少时还好，文件数目一旦很多的话，obj将很长；</span><br><span class="line">    3. 而且每增加&#x2F;除一个文件，都需要修改Makefile。</span><br><span class="line"></span><br><span class="line">基于此，我们在第二版的基础上优化出第四版。</span><br><span class="line"></span><br><span class="line">## 6. 第四版Makefile</span><br><span class="line">在第四版Makefile中，我们隆重推出了两个函数：wildcard和patsubst。</span><br><span class="line"></span><br><span class="line">### wildcard：</span><br><span class="line">扩展通配符，搜索指定文件。在此我们使用src &#x3D; $(wildcard .&#x2F;*.c)，代表在当前目录下搜索所有的.c文件，并赋值给src。函数执行结束后，src的值为：main.c fun1.c fun2.c。</span><br><span class="line"></span><br><span class="line">### patsubst：</span><br><span class="line">替换通配符，按指定规则做替换。在此我们使用</span><br></pre></td></tr></table></figure><br>obj = $(patsubst %.c, %.o, $(src))<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">代表将src里的每个文件都由.c替换成.o。函数执行结束后，obj的值为main.o fun1.o fun2.o，其实跟第三版Makefile的obj值一模一样，只不过在这里它更智能一些，也更灵活。除了使用patsubst函数外，我们也可以使用模式规则达到同样的效果，比如：</span><br></pre></td></tr></table></figure><br>obj = $(src:%.c=%.o)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">也是代表将src里的每个文件都由.c替换成.o。几乎每个Makefile里都会有一个伪目标clean，这样我们通过执行make clean命令就是将中间文件如.o文件及目标文件全部删除，留下干净的空间。一般是如下写法：</span><br></pre></td></tr></table></figure><br>.PHONY: clean<br>clean:<br>    rm -rf $(obj) $(target)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.PHONY代表声明clean是一个伪目标，这样每次执行make clean时，下面的规则都会被执行。</span><br></pre></td></tr></table></figure><br>src = $(wildcard ./*.c)<br>obj = $(patsubst %.c, %.o, $(src))  </p><h1 id="obj-src-c-o"><a href="#obj-src-c-o" class="headerlink" title="obj = $(src:%.c=%.o)"></a>obj = $(src:%.c=%.o)</h1><p>target = app<br>CC = gcc<br>​<br>$(target): $(obj)<br>    $(CC) $(obj) -o $(target)<br>​<br>%.o: %.c<br>    $(CC) -c $&lt; -o $@<br>​<br>.PHONY: clean<br>clean:<br>    rm -rf $(obj) $(target)<br>```</p><h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h2><p>Makefile其实也并不难，但关键的是一定要自己动手写，这样才会更加加深理解，否则也容易造成眼高手低。如果实在不知道从何下手，可以尝试按上面的教程，一步步写下来，也只需要写四个版本而已，写完了相信就有了初步的理解。我是良许，世界500强外企 Linux 开发工程师，专业生产 Linux 方面干货，欢迎点赞、收藏！</p><p>作者：程序员良许<br>链接：<a href="https://www.zhihu.com/question/23792247/answer/600773044" target="_blank" rel="noopener">https://www.zhihu.com/question/23792247/answer/600773044</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Makefile其实不难学，对于一些基本概念百度上应该很多，这里分享一个循序渐进的学习方式，保证让你快速掌握Makefile的编写。本文首发于公众号：良许Linux，里面有一个 Makefile 系列，欢迎关注交流！&lt;/p&gt;</summary>
    
    
    
    <category term="C" scheme="http://blog.rcant.com/categories/C/"/>
    
    
    <category term="c" scheme="http://blog.rcant.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ 发布者确认</title>
    <link href="http://blog.rcant.com/2020/10/24/mq/rabbitmq-model-publish-confirm/"/>
    <id>http://blog.rcant.com/2020/10/24/mq/rabbitmq-model-publish-confirm/</id>
    <published>2020-10-24T13:39:17.000Z</published>
    <updated>2020-10-24T10:30:07.585Z</updated>
    
    <content type="html"><![CDATA[<p>发布者确认</p><a id="more"></a><h2 id="发布者确认"><a href="#发布者确认" class="headerlink" title="发布者确认"></a>发布者确认</h2><p>发布者确认是RabbitMQ的扩展，可以实现可靠的发布。在channel上启用发布者确认后，代理将异步确认客户端发布的消息，这意味着他们已在服务器端处理。</p><h2 id="在频道上启用发布者确认"><a href="#在频道上启用发布者确认" class="headerlink" title="在频道上启用发布者确认"></a>在频道上启用发布者确认</h2><p>发布者确认是AMQP 0.9.1协议的RabbitMQ扩展，因此默认情况下未启用它们。发布者确认是通过ConfirmSelect方法在通道级别启用的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var channel &#x3D; connection.CreateModel();</span><br><span class="line">channel.ConfirmSelect();</span><br></pre></td></tr></table></figure><p>必须在希望使用发布者确认的每个频道上调用此方法。确认仅应启用一次，而不是对每个已发布的消息都启用</p><h3 id="策略1：Publishing-Messages-Individually"><a href="#策略1：Publishing-Messages-Individually" class="headerlink" title="策略1：Publishing Messages Individually"></a>策略1：Publishing Messages Individually</h3><p>每条消息发步后,等待确认<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">private static void PublishMessagesIndividually()</span><br><span class="line">&#123;</span><br><span class="line">    using (var connection &#x3D; CreateConnection())</span><br><span class="line">    using (var channel &#x3D; connection.CreateModel())</span><br><span class="line">    &#123;</span><br><span class="line">        var queueName &#x3D; channel.QueueDeclare().QueueName;</span><br><span class="line">        channel.ConfirmSelect();</span><br><span class="line"></span><br><span class="line">        var timer &#x3D; new Stopwatch();</span><br><span class="line">        timer.Start();</span><br><span class="line">        for (int i &#x3D; 0; i &lt; MESSAGE_COUNT; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            var body &#x3D; Encoding.UTF8.GetBytes(i.ToString());</span><br><span class="line">            channel.BasicPublish(exchange: &quot;&quot;, routingKey: queueName, basicProperties: null, body: body);</span><br><span class="line">            channel.WaitForConfirmsOrDie(new TimeSpan(0, 0, 5));</span><br><span class="line">        &#125;</span><br><span class="line">        timer.Stop();</span><br><span class="line">        Console.WriteLine($&quot;Published &#123;MESSAGE_COUNT:N0&#125; messages individually in &#123;timer.ElapsedMilliseconds:N0&#125; ms&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在前面的示例中，我们像往常一样发布一条消息，并等待通过Channel＃WaitForConfirmsOrDie(TimeSpan)方法进行确认。确认消息后，该方法立即返回。如果未在超时时间内确认该消息或该消息没有被确认(这意味着代理出于某种原因无法处理该消息)，则该方法将引发异常。异常的处理通常包括记录错误消息和/或重试发送消息。</p><p>此方法非常简单，但也有一个主要缺点：由于消息的确认会阻止所有后续消息的发布，因此它会大大降低发布速度。这种方法不会提供每秒超过数百条已发布消息的吞吐量。但是，对于某些应用程序来说这可能已经足够了。</p><p>发布者确认异步吗？</p><p>我们在一开始提到代理程序以异步方式确认发布的消息，但是在第一个示例中，代码同步等待直到消息被确认。<br>客户端实际上异步接收确认，并相应地取消阻止对WaitForConfirmsOrDie的调用 。将WaitForConfirmsOrDie视为依赖于后台异步通知的同步。</p><h3 id="策略2：批量发布消息"><a href="#策略2：批量发布消息" class="headerlink" title="策略2：批量发布消息"></a>策略2：批量发布消息</h3><p>为了改进前面的示例，我们可以发布一批消息，并等待整个批次被确认。以下示例使用了100个批次：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">private static void PublishMessagesInBatch()</span><br><span class="line">&#123;</span><br><span class="line">    using (var connection &#x3D; CreateConnection())</span><br><span class="line">    using (var channel &#x3D; connection.CreateModel())</span><br><span class="line">    &#123;</span><br><span class="line">        var queueName &#x3D; channel.QueueDeclare().QueueName;</span><br><span class="line">        channel.ConfirmSelect();</span><br><span class="line"></span><br><span class="line">        var batchSize &#x3D; 100;</span><br><span class="line">        var outstandingMessageCount &#x3D; 0;</span><br><span class="line">        var timer &#x3D; new Stopwatch();</span><br><span class="line">        timer.Start();</span><br><span class="line">        for (int i &#x3D; 0; i &lt; MESSAGE_COUNT; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            var body &#x3D; Encoding.UTF8.GetBytes(i.ToString());</span><br><span class="line">            channel.BasicPublish(exchange: &quot;&quot;, routingKey: queueName, basicProperties: null, body: body);</span><br><span class="line">            outstandingMessageCount++;</span><br><span class="line"></span><br><span class="line">            if (outstandingMessageCount &#x3D;&#x3D; batchSize)</span><br><span class="line">            &#123;</span><br><span class="line">                channel.WaitForConfirmsOrDie(new TimeSpan(0, 0, 5));</span><br><span class="line">                outstandingMessageCount &#x3D; 0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (outstandingMessageCount &gt; 0)</span><br><span class="line">            channel.WaitForConfirmsOrDie(new TimeSpan(0, 0, 5));</span><br><span class="line"></span><br><span class="line">        timer.Stop();</span><br><span class="line">        Console.WriteLine($&quot;Published &#123;MESSAGE_COUNT:N0&#125; messages in batch in &#123;timer.ElapsedMilliseconds:N0&#125; ms&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与等待确认单个消息相比，等待一批消息被确认可以极大地提高吞吐量（对于远程RabbitMQ节点，这最多可以达到20-30倍）。<br>缺点之一是我们不知道发生故障时到底出了什么问题，因此我们可能必须将整个批处理保存在内存中，以记录有意义的内容或重新发布消息。而且该解决方案仍然是同步的，因此它阻止了消息的发布。</p><h3 id="策略3：处理发布者异步确认"><a href="#策略3：处理发布者异步确认" class="headerlink" title="策略3：处理发布者异步确认"></a>策略3：处理发布者异步确认</h3><p>代理异步确认已发布的消息，只需在客户端上注册一个回调即可收到这些确认的通知：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var channel &#x3D; connection.CreateModel();</span><br><span class="line">channel.ConfirmSelect();</span><br><span class="line">channel.BasicAcks +&#x3D; (sender, ea) &#x3D;&gt;</span><br><span class="line">&#123;</span><br><span class="line">  &#x2F;&#x2F; RabbitMQ 确认的消息</span><br><span class="line">&#125;;</span><br><span class="line">channel.BasicNacks +&#x3D; (sender, ea) &#x3D;&gt;</span><br><span class="line">&#123;</span><br><span class="line">  &#x2F;&#x2F; RabbitMQ 未确认的消息(可以认为是丢失的消息)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>有2个回调：一个用于确认的消息，另一个用于未确认的消息（代理可以认为丢失的消息）。这两个回调都有一个对应的 <strong>EventArgs</strong> 参数（ea），其中包含：</p><ul><li>DeliveryTag : 标识 <strong>已确认或丢失</strong> 消息的序列号。</li><li>multiple : 这是一个布尔值。如果为false，则仅 <strong>确认/丢失</strong> 一条消息；如果为true，则将 <strong>确认/丢失</strong> 序列号较低或相等的所有消息。</li></ul><p>可以在消息发布之前通过 <strong>Channel＃NextPublishSeqNo</strong> 获取序列号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var sequenceNumber &#x3D; channel.NextPublishSeqNo;</span><br><span class="line">channel.BasicPublish(exchange, queue, properties, body);</span><br></pre></td></tr></table></figure><p>将消息与序列号关联的一种简单方法是使用字典。假设我们要发布字符串，因为它们很容易变成要发布的字节数组。这是一个代码示例，该示例使用字典将发布序列号与消息的字符串主体相关联：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var outstandingConfirms &#x3D; new ConcurrentDictionary&lt;ulong, string&gt;();</span><br><span class="line">&#x2F;&#x2F; ... code for confirm callbacks will come later</span><br><span class="line">var body &#x3D; &quot;...&quot;;</span><br><span class="line">outstandingConfirms.TryAdd(channel.NextPublishSeqNo, body);</span><br><span class="line">channel.BasicPublish(exchange, queue, properties, Encoding.UTF8.GetBytes(body));</span><br></pre></td></tr></table></figure><p>现在，发布消息 使用字典来跟踪 消息是否被确认。<br>我们需要在消息确认回调时清理此字典，并做一些类似在消息丢失警告的操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">var outstandingConfirms &#x3D; new ConcurrentDictionary&lt;ulong, string&gt;();</span><br><span class="line"></span><br><span class="line">void ​cleanOutstandingConfirms(ulong sequenceNumber, bool multiple)</span><br><span class="line">&#123;</span><br><span class="line">   ​if (multiple)</span><br><span class="line">   ​&#123;</span><br><span class="line">       ​var confirmed &#x3D; outstandingConfirms.Where(k &#x3D;&gt; k.Key &lt;&#x3D; sequenceNumber);</span><br><span class="line">       ​foreach (var entry in confirmed)</span><br><span class="line">       ​&#123;</span><br><span class="line">           ​outstandingConfirms.TryRemove(entry.Key, out _);</span><br><span class="line">       ​&#125;</span><br><span class="line">   ​&#125;</span><br><span class="line">   ​else</span><br><span class="line">   ​&#123;</span><br><span class="line">       ​outstandingConfirms.TryRemove(sequenceNumber, out _);</span><br><span class="line">   ​&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">channel.BasicAcks +&#x3D; (sender, ea) &#x3D;&gt; cleanOutstandingConfirms(ea.DeliveryTag, ea.Multiple);</span><br><span class="line">channel.BasicNacks +&#x3D; (sender, ea) &#x3D;&gt;</span><br><span class="line">&#123;</span><br><span class="line">   ​outstandingConfirms.TryGetValue(ea.DeliveryTag, out string body);</span><br><span class="line">   ​Console.WriteLine($&quot;Message with body &#123;body&#125; has been nack-ed. Sequence number: &#123;ea.DeliveryTag&#125;, multiple: &#123;ea.Multiple&#125;&quot;);</span><br><span class="line">   ​cleanOutstandingConfirms(ea.DeliveryTag, ea.Multiple);</span><br><span class="line">&#125;;</span><br><span class="line">&#x2F;&#x2F; ... publishing code</span><br></pre></td></tr></table></figure><h3 id="所有代码"><a href="#所有代码" class="headerlink" title="所有代码"></a>所有代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line">using RabbitMQ.Client;</span><br><span class="line">using System;</span><br><span class="line">using System.Collections.Concurrent;</span><br><span class="line">using System.Diagnostics;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Threading;</span><br><span class="line"></span><br><span class="line">class PublisherConfirms</span><br><span class="line">&#123;</span><br><span class="line">    private const int MESSAGE_COUNT &#x3D; 50_000;</span><br><span class="line"></span><br><span class="line">    public static void Main()</span><br><span class="line">    &#123;</span><br><span class="line">        PublishMessagesIndividually();</span><br><span class="line">        PublishMessagesInBatch();</span><br><span class="line">        HandlePublishConfirmsAsynchronously();</span><br><span class="line">        Console.ReadLine();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static IConnection CreateConnection()</span><br><span class="line">    &#123;</span><br><span class="line">        var factory &#x3D; new ConnectionFactory &#123; HostName &#x3D; &quot;localhost&quot;, VirtualHost &#x3D; &quot;frexport&quot; &#125;;</span><br><span class="line">        return factory.CreateConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void PublishMessagesIndividually()</span><br><span class="line">    &#123;</span><br><span class="line">        using (var connection &#x3D; CreateConnection())</span><br><span class="line">        using (var channel &#x3D; connection.CreateModel())</span><br><span class="line">        &#123;</span><br><span class="line">            var queueName &#x3D; channel.QueueDeclare().QueueName;</span><br><span class="line">            channel.ConfirmSelect();</span><br><span class="line"></span><br><span class="line">            var timer &#x3D; new Stopwatch();</span><br><span class="line">            timer.Start();</span><br><span class="line">            for (int i &#x3D; 0; i &lt; MESSAGE_COUNT; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                var body &#x3D; Encoding.UTF8.GetBytes(i.ToString());</span><br><span class="line">                channel.BasicPublish(exchange: &quot;&quot;, routingKey: queueName, basicProperties: null, body: body);</span><br><span class="line">                channel.WaitForConfirmsOrDie(new TimeSpan(0, 0, 5));</span><br><span class="line">            &#125;</span><br><span class="line">            timer.Stop();</span><br><span class="line">            Console.WriteLine($&quot;Published &#123;MESSAGE_COUNT:N0&#125; messages individually in &#123;timer.ElapsedMilliseconds:N0&#125; ms&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void PublishMessagesInBatch()</span><br><span class="line">    &#123;</span><br><span class="line">        using (var connection &#x3D; CreateConnection())</span><br><span class="line">        using (var channel &#x3D; connection.CreateModel())</span><br><span class="line">        &#123;</span><br><span class="line">            var queueName &#x3D; channel.QueueDeclare().QueueName;</span><br><span class="line">            channel.ConfirmSelect();</span><br><span class="line"></span><br><span class="line">            var batchSize &#x3D; 100;</span><br><span class="line">            var outstandingMessageCount &#x3D; 0;</span><br><span class="line">            var timer &#x3D; new Stopwatch();</span><br><span class="line">            timer.Start();</span><br><span class="line">            for (int i &#x3D; 0; i &lt; MESSAGE_COUNT; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                var body &#x3D; Encoding.UTF8.GetBytes(i.ToString());</span><br><span class="line">                channel.BasicPublish(exchange: &quot;&quot;, routingKey: queueName, basicProperties: null, body: body);</span><br><span class="line">                outstandingMessageCount++;</span><br><span class="line"></span><br><span class="line">                if (outstandingMessageCount &#x3D;&#x3D; batchSize)</span><br><span class="line">                &#123;</span><br><span class="line">                    channel.WaitForConfirmsOrDie(new TimeSpan(0, 0, 5));</span><br><span class="line">                    outstandingMessageCount &#x3D; 0;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (outstandingMessageCount &gt; 0)</span><br><span class="line">                channel.WaitForConfirmsOrDie(new TimeSpan(0, 0, 5));</span><br><span class="line"></span><br><span class="line">            timer.Stop();</span><br><span class="line">            Console.WriteLine($&quot;Published &#123;MESSAGE_COUNT:N0&#125; messages in batch in &#123;timer.ElapsedMilliseconds:N0&#125; ms&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void HandlePublishConfirmsAsynchronously()</span><br><span class="line">    &#123;</span><br><span class="line">        using (var connection &#x3D; CreateConnection())</span><br><span class="line">        using (var channel &#x3D; connection.CreateModel())</span><br><span class="line">        &#123;</span><br><span class="line">            var queueName &#x3D; channel.QueueDeclare().QueueName;</span><br><span class="line">            channel.ConfirmSelect();</span><br><span class="line"></span><br><span class="line">            var outstandingConfirms &#x3D; new ConcurrentDictionary&lt;ulong, string&gt;();</span><br><span class="line"></span><br><span class="line">            void cleanOutstandingConfirms(ulong sequenceNumber, bool multiple)</span><br><span class="line">            &#123;</span><br><span class="line">                if (multiple)</span><br><span class="line">                &#123;</span><br><span class="line">                    var confirmed &#x3D; outstandingConfirms.Where(k &#x3D;&gt; k.Key &lt;&#x3D; sequenceNumber);</span><br><span class="line">                    foreach (var entry in confirmed)</span><br><span class="line">                        outstandingConfirms.TryRemove(entry.Key, out _);</span><br><span class="line">                &#125;</span><br><span class="line">                else</span><br><span class="line">                    outstandingConfirms.TryRemove(sequenceNumber, out _);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            channel.BasicAcks +&#x3D; (sender, ea) &#x3D;&gt; cleanOutstandingConfirms(ea.DeliveryTag, ea.Multiple);</span><br><span class="line">            channel.BasicNacks +&#x3D; (sender, ea) &#x3D;&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                outstandingConfirms.TryGetValue(ea.DeliveryTag, out string body);</span><br><span class="line">                Console.WriteLine($&quot;Message with body &#123;body&#125; has been nack-ed. Sequence number: &#123;ea.DeliveryTag&#125;, multiple: &#123;ea.Multiple&#125;&quot;);</span><br><span class="line">                cleanOutstandingConfirms(ea.DeliveryTag, ea.Multiple);</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            var timer &#x3D; new Stopwatch();</span><br><span class="line">            timer.Start();</span><br><span class="line">            for (int i &#x3D; 0; i &lt; MESSAGE_COUNT; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                var body &#x3D; i.ToString();</span><br><span class="line">                outstandingConfirms.TryAdd(channel.NextPublishSeqNo, i.ToString());</span><br><span class="line">                channel.BasicPublish(exchange: &quot;&quot;, routingKey: queueName, basicProperties: null, body: Encoding.UTF8.GetBytes(body));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (!WaitUntil(60, () &#x3D;&gt; outstandingConfirms.IsEmpty))</span><br><span class="line">                throw new Exception(&quot;All messages could not be confirmed in 60 seconds&quot;);</span><br><span class="line"></span><br><span class="line">            timer.Stop();</span><br><span class="line">            Console.WriteLine($&quot;Published &#123;MESSAGE_COUNT:N0&#125; messages and handled confirm asynchronously &#123;timer.ElapsedMilliseconds:N0&#125; ms&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static bool WaitUntil(int numberOfSeconds, Func&lt;bool&gt; condition)</span><br><span class="line">    &#123;</span><br><span class="line">        int waited &#x3D; 0;</span><br><span class="line">        while (!condition() &amp;&amp; waited &lt; numberOfSeconds * 1000)</span><br><span class="line">        &#123;</span><br><span class="line">            Thread.Sleep(100);</span><br><span class="line">            waited +&#x3D; 100;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return condition();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RabbitMQ在本机运行的效果"><a href="#RabbitMQ在本机运行的效果" class="headerlink" title="RabbitMQ在本机运行的效果"></a>RabbitMQ在本机运行的效果</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Published 50,000 messages individually in 5,549 ms</span><br><span class="line">Published 50,000 messages in batch in 2,331 ms</span><br><span class="line">Published 50,000 messages and handled confirms asynchronously in 4,054 ms</span><br></pre></td></tr></table></figure><h2 id="RabbitMQ在远程运行的效果"><a href="#RabbitMQ在远程运行的效果" class="headerlink" title="RabbitMQ在远程运行的效果"></a>RabbitMQ在远程运行的效果</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Published 50,000 messages individually in 231,541 ms</span><br><span class="line">Published 50,000 messages in batch in 7,232 ms</span><br><span class="line">Published 50,000 messages and handled confirms asynchronously in 6,332 ms</span><br></pre></td></tr></table></figure><h2 id="RabbitMQ-Model介绍"><a href="#RabbitMQ-Model介绍" class="headerlink" title="RabbitMQ Model介绍"></a>RabbitMQ Model介绍</h2><ul><li><a href="/2020/10/24/mq/rabbitmq-model-simple/" title="RabbitMQ Hello Model">RabbitMQ Hello Model</a>  </li><li><a href="/2020/10/24/mq/rabbitmq-model-work/" title="RabbitMQ WorkQueue Model">RabbitMQ WorkQueue Model</a>  </li><li><a href="/2020/10/24/mq/rabbitmq-model-subscribe/" title="RabbitMQ Subscribe Model">RabbitMQ Subscribe Model</a>  </li><li><a href="/2020/10/24/mq/rabbitmq-model-routing/" title="RabbitMQ Routing Model">RabbitMQ Routing Model</a>  </li><li><a href="/2020/10/24/mq/rabbitmq-model-topics/" title="RabbitMQ Topics Model">RabbitMQ Topics Model</a>  </li><li><a href="/2020/10/24/mq/rabbitmq-model-rpc/" title="RabbitMQ RPC Model">RabbitMQ RPC Model</a>  </li><li><a href="/2020/10/24/mq/rabbitmq-model-publish-confirm/" title="RabbitMQ 发布确认">RabbitMQ 发布确认</a>  </li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;发布者确认&lt;/p&gt;</summary>
    
    
    
    <category term="MQ" scheme="http://blog.rcant.com/categories/MQ/"/>
    
    
    <category term="rabbitmq" scheme="http://blog.rcant.com/tags/rabbitmq/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ 路由模式</title>
    <link href="http://blog.rcant.com/2020/10/24/mq/rabbitmq-model-routing/"/>
    <id>http://blog.rcant.com/2020/10/24/mq/rabbitmq-model-routing/</id>
    <published>2020-10-24T13:39:17.000Z</published>
    <updated>2020-10-24T10:30:10.922Z</updated>
    
    <content type="html"><![CDATA[<p>路由模式</p><a id="more"></a><h3 id="Routing-路由模式"><a href="#Routing-路由模式" class="headerlink" title="Routing 路由模式"></a>Routing 路由模式</h3><pre class="mermaid">graph LR;    id1([Product]);    id2([ExChange]);    id3([amq.gen-DjtYso1eaz52eM3mAJToaw])    id4([amq.gen-nLrD6gHpPBMY-oqM-tBVcQ])    id5([C1])    id6([C2])    style id1 fill:#0ff,stroke:#333;    style id2 fill:#33c,stroke:#333;    style id3 fill:#f00,stroke:#333;    style id4 fill:#f00,stroke:#333;    style id5 fill:#3cf,stroke:#333;    style id6 fill:#3cf,stroke:#333;    id1-->id2;    id2-->|error|id3;    id3-->id5;    id2-->|error|id4;    id2-->|info|id4;    id4-->id6;</pre><p>注意</p><ol><li>生产者发送消息到交换机，要指定路由Key</li><li>消费者将队列绑定到交换机时需要指定路由Key</li></ol><p>这个是一种 <strong>完全匹配</strong> 只有匹配到的消费者才能消费消息</p><p>消息中的路由键值如果和Binding中的binding key 一致，交换机就将消息发送到对应的队列中。<br>路由键与队列名完全匹配，如果一个队列绑定到交换机要求路由键为”dog”,则只转发routingkey 标记为”dog”的消息,不会转发”dog.puppy”,也不会转发”dog.guard”等等。这个是时 <strong>完全匹配</strong>、单播的模式</p><h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者:"></a>生产者:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using RabbitMQ.Client;</span><br><span class="line"></span><br><span class="line">namespace RoutingMQProduct</span><br><span class="line">&#123;</span><br><span class="line">    class EmitLogDirect</span><br><span class="line">    &#123;</span><br><span class="line">        static string ExchangeName &#x3D; &quot;direct_logs&quot;;</span><br><span class="line"></span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            var factory &#x3D; new ConnectionFactory()</span><br><span class="line">            &#123;</span><br><span class="line">                HostName &#x3D; &quot;localhost&quot;,</span><br><span class="line">                VirtualHost &#x3D; &quot;frexport&quot;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            using (var connection &#x3D; factory.CreateConnection())</span><br><span class="line">            &#123;</span><br><span class="line">                using (var channel &#x3D; connection.CreateModel())</span><br><span class="line">                &#123;</span><br><span class="line">                    &#x2F;&#x2F;指定交换机以及交换机模式</span><br><span class="line">                    channel.ExchangeDeclare(exchange: ExchangeName,</span><br><span class="line">                        type: ExchangeType.Direct,</span><br><span class="line">                        durable: true);</span><br><span class="line"></span><br><span class="line">                    var severity &#x3D; (args.Length &gt; 0) ? args[0] : &quot;info&quot;;</span><br><span class="line">                    var message &#x3D; (args.Length &gt; 1) ? args[1] : &quot;HelloWorld!&quot;;</span><br><span class="line"></span><br><span class="line">                    var body &#x3D; System.Text.Encoding.UTF8.GetBytes(message);</span><br><span class="line">                    </span><br><span class="line">                    channel.BasicPublish(exchange: ExchangeName,</span><br><span class="line">                        routingKey:severity,</span><br><span class="line">                        basicProperties:null,</span><br><span class="line">                        body:body);</span><br><span class="line"></span><br><span class="line">                    Console.WriteLine(&quot; [x] Sent &#39;&#123;0&#125;&#39;:&#39;&#123;1&#125;&#39;&quot;, severity, message);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot; Press [enter] to exit.&quot;);</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消费者："><a href="#消费者：" class="headerlink" title="消费者："></a>消费者：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">using RabbitMQ.Client;</span><br><span class="line">using RabbitMQ.Client.Events;</span><br><span class="line">using System;</span><br><span class="line">using System.Text;</span><br><span class="line"></span><br><span class="line">namespace RoutingMQConsumer1</span><br><span class="line">&#123;</span><br><span class="line">    class ReceiveLogsDirect</span><br><span class="line">    &#123;</span><br><span class="line">        static string ExchangeName &#x3D; &quot;direct_logs&quot;;</span><br><span class="line"></span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            var factory &#x3D; new ConnectionFactory()</span><br><span class="line">            &#123;</span><br><span class="line">                HostName &#x3D; &quot;localhost&quot;,</span><br><span class="line">                VirtualHost &#x3D; &quot;frexport&quot;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            using (var connection &#x3D; factory.CreateConnection())</span><br><span class="line">            &#123;</span><br><span class="line">                using (var channel &#x3D; connection.CreateModel())</span><br><span class="line">                &#123;</span><br><span class="line">                    &#x2F;&#x2F; 设置交换机以及交换机模式</span><br><span class="line">                    channel.ExchangeDeclare(exchange: ExchangeName,</span><br><span class="line">                        type: ExchangeType.Direct,</span><br><span class="line">                        durable:true);</span><br><span class="line"></span><br><span class="line">                    &#x2F;&#x2F;获取当前消息队列名称</span><br><span class="line">                    var queueName &#x3D; channel.QueueDeclare().QueueName;</span><br><span class="line"></span><br><span class="line">                    if (args.Length &lt; 1)</span><br><span class="line">                    &#123;</span><br><span class="line">                        Console.Error.WriteLine(&quot;Usage: &#123;0&#125; [info] [warning] [error]&quot;,</span><br><span class="line">                                        Environment.GetCommandLineArgs()[0]);</span><br><span class="line">                        Console.WriteLine(&quot; Press [enter] to exit.&quot;);</span><br><span class="line">                        Console.ReadLine();</span><br><span class="line">                        Environment.ExitCode &#x3D; 1;</span><br><span class="line">                        return;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    &#x2F;&#x2F;当前消息队列 和 指定交换机的路由进行 绑定</span><br><span class="line">                    foreach (var severity in args)</span><br><span class="line">                    &#123;</span><br><span class="line">                        channel.QueueBind(queue: queueName,</span><br><span class="line">                            exchange: ExchangeName,</span><br><span class="line">                            routingKey: severity);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    Console.WriteLine(&quot; [*] Waiting for message.&quot;);</span><br><span class="line"></span><br><span class="line">                    var consumer &#x3D; new EventingBasicConsumer(channel);</span><br><span class="line">                    consumer.Received +&#x3D; (sender, ea) &#x3D;&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        var body &#x3D; ea.Body;</span><br><span class="line">                        var message &#x3D; Encoding.UTF8.GetString(body);</span><br><span class="line">                        var routingKey &#x3D; ea.RoutingKey;</span><br><span class="line">                        Console.WriteLine(&quot; [x] Received &#39;&#123;0&#125;&#39;:&#39;&#123;1&#125;&#39;&quot;,</span><br><span class="line">                                          routingKey, message);</span><br><span class="line">                    &#125;;</span><br><span class="line"></span><br><span class="line">                    channel.BasicConsume(queue: queueName,</span><br><span class="line">                        noAck: true,</span><br><span class="line">                        consumer: consumer);</span><br><span class="line"></span><br><span class="line">                    Console.WriteLine(&quot; Press [enter] to exit.&quot;);</span><br><span class="line">                    Console.ReadLine();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置RabbitMQ"><a href="#配置RabbitMQ" class="headerlink" title="配置RabbitMQ"></a>配置RabbitMQ</h3><p>添加交换机</p><img src="/2020/10/24/mq/rabbitmq-model-routing/routingmq-addexchange.png" class="" title="Queue"> <img src="/2020/10/24/mq/rabbitmq-model-routing/routingmq-addexchange2.png" class="" title="Queue"> <h3 id="测试"><a href="#测试" class="headerlink" title="测试:"></a>测试:</h3><p>消费者1 监听 <strong>error</strong> 和 <strong>info</strong> 两个路由</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ .&#x2F;bin&#x2F;Debug&#x2F;RoutingMQConsumer1.exe error info</span><br></pre></td></tr></table></figure><p>消费者2 只监听 <strong>error</strong> 路由<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ .&#x2F;bin&#x2F;Debug&#x2F;RoutingMQConsumer1.exe error</span><br></pre></td></tr></table></figure></p><p>生产者 分别对 <strong>info/error/warn</strong> 路由 各发送一条纤细<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ .&#x2F;bin&#x2F;Debug&#x2F;RoutingMQProduct.exe info hhh</span><br><span class="line">$ .&#x2F;bin&#x2F;Debug&#x2F;RoutingMQProduct.exe error 11111</span><br><span class="line">$ .&#x2F;bin&#x2F;Debug&#x2F;RoutingMQProduct.exe warn www</span><br></pre></td></tr></table></figure></p><img src="/2020/10/24/mq/rabbitmq-model-routing/routingmq-test.png" class="" title="Queue"> <h3 id="RabbitMQ-Model介绍"><a href="#RabbitMQ-Model介绍" class="headerlink" title="RabbitMQ Model介绍"></a>RabbitMQ Model介绍</h3><ul><li><a href="/2020/10/24/mq/rabbitmq-model-simple/" title="RabbitMQ Hello Model">RabbitMQ Hello Model</a>  </li><li><a href="/2020/10/24/mq/rabbitmq-model-work/" title="RabbitMQ WorkQueue Model">RabbitMQ WorkQueue Model</a>  </li><li><a href="/2020/10/24/mq/rabbitmq-model-subscribe/" title="RabbitMQ Subscribe Model">RabbitMQ Subscribe Model</a>  </li><li><a href="/2020/10/24/mq/rabbitmq-model-routing/" title="RabbitMQ Routing Model">RabbitMQ Routing Model</a>  </li><li><a href="/2020/10/24/mq/rabbitmq-model-topics/" title="RabbitMQ Topics Model">RabbitMQ Topics Model</a>  </li><li><a href="/2020/10/24/mq/rabbitmq-model-rpc/" title="RabbitMQ RPC Model">RabbitMQ RPC Model</a>  </li><li><a href="/2020/10/24/mq/rabbitmq-model-publish-confirm/" title="RabbitMQ 发布确认">RabbitMQ 发布确认</a>  </li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;路由模式&lt;/p&gt;</summary>
    
    
    
    <category term="MQ" scheme="http://blog.rcant.com/categories/MQ/"/>
    
    
    <category term="rabbitmq" scheme="http://blog.rcant.com/tags/rabbitmq/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ RPC Model</title>
    <link href="http://blog.rcant.com/2020/10/24/mq/rabbitmq-model-rpc/"/>
    <id>http://blog.rcant.com/2020/10/24/mq/rabbitmq-model-rpc/</id>
    <published>2020-10-24T13:39:17.000Z</published>
    <updated>2020-10-24T10:30:14.482Z</updated>
    
    <content type="html"><![CDATA[<p>RPC——Remote Procedure Call，远程过程调用。 那RabbitMQ如何进行远程调用呢？</p><a id="more"></a><h2 id="示意图"><a href="#示意图" class="headerlink" title="示意图"></a>示意图</h2><p>如下：</p><img src="/2020/10/24/mq/rabbitmq-model-rpc/rpc.png" class="" title="RPC"> <pre class="mermaid">graph TB;    C([Client]);    mq1([rpc_queue])    mq2([reply_to=amq.gen-..])    S([Server])    style C fill:#3cf,stroke:#333;    style mq1 fill:#f00,stroke:#333;    style mq2 fill:#f00,stroke:#333;    style S fill:#3cf,stroke:#333;    C-->|Request reply_to=amq.gen-.. correlation_id=abc |mq1;    mq1-->S;    S-->mq2;    mq2-->|Reply correlation_id=abc|C;</pre><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><ul><li>第一步，主要是进行远程调用的客户端需要指定接收远程回调的队列，并申明消费者监听此队列。 </li><li>第二步，远程调用的服务端除了要申明消费端接收远程调用请求外，还要将结果发送到客户端用来监听回调结果的队列中去。</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>客户端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Concurrent;</span><br><span class="line">using System.Text;</span><br><span class="line">using RabbitMQ.Client;</span><br><span class="line">using RabbitMQ.Client.Events;</span><br><span class="line"></span><br><span class="line">public class RpcClient</span><br><span class="line">&#123;</span><br><span class="line">    private readonly IConnection connection;</span><br><span class="line">    private readonly IModel channel;</span><br><span class="line">    private readonly string replyQueueName;</span><br><span class="line">    private readonly EventingBasicConsumer consumer;</span><br><span class="line">    private readonly BlockingCollection&lt;string&gt; respQueue &#x3D; new BlockingCollection&lt;string&gt;();</span><br><span class="line">    private readonly IBasicProperties props;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 队列名</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    static string QueueName &#x3D; &quot;rpc_queue&quot;;</span><br><span class="line"></span><br><span class="line">    public RpcClient()</span><br><span class="line">    &#123;</span><br><span class="line">        var factory &#x3D; new ConnectionFactory()</span><br><span class="line">        &#123;</span><br><span class="line">            HostName &#x3D; &quot;localhost&quot;,</span><br><span class="line">            VirtualHost &#x3D; &quot;frexport&quot;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        connection &#x3D; factory.CreateConnection();</span><br><span class="line">        channel &#x3D; connection.CreateModel();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;创建一个回调MQ队列,获取消息队列名</span><br><span class="line">        replyQueueName &#x3D; channel.QueueDeclare().QueueName;</span><br><span class="line">        &#x2F;&#x2F;创建自动队列的消费者，接收此队列的消息</span><br><span class="line">        consumer &#x3D; new EventingBasicConsumer(channel);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;创建消息信息,在信息里面填入消息回调参数，让服务器知道消息来源</span><br><span class="line">        props &#x3D; channel.CreateBasicProperties();</span><br><span class="line">        var correlationId &#x3D; Guid.NewGuid().ToString();</span><br><span class="line">        props.CorrelationId &#x3D; correlationId;</span><br><span class="line">        props.ReplyTo &#x3D; replyQueueName;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;消息消费</span><br><span class="line">        consumer.Received +&#x3D; (model, ea) &#x3D;&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            var body &#x3D; ea.Body;</span><br><span class="line">            var response &#x3D; Encoding.UTF8.GetString(body);</span><br><span class="line">            if (ea.BasicProperties.CorrelationId &#x3D;&#x3D; correlationId)</span><br><span class="line">            &#123;</span><br><span class="line">                respQueue.Add(response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public string Call(string message)</span><br><span class="line">    &#123;</span><br><span class="line">        var messageBytes &#x3D; Encoding.UTF8.GetBytes(message);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;发送消息</span><br><span class="line">        channel.BasicPublish(</span><br><span class="line">            exchange: &quot;&quot;,</span><br><span class="line">            routingKey: QueueName,</span><br><span class="line">            basicProperties: props,</span><br><span class="line">            body: messageBytes);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;接收回调消息</span><br><span class="line">        channel.BasicConsume(</span><br><span class="line">            consumer: consumer,</span><br><span class="line">            queue: replyQueueName,</span><br><span class="line">            noAck: true);</span><br><span class="line">        &#x2F;&#x2F;如果有回调，则respQueue有数据，返回，否则线程会阻塞在这个位置</span><br><span class="line">        return respQueue.Take();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void Close()</span><br><span class="line">    &#123;</span><br><span class="line">        connection.Close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Rpc</span><br><span class="line">&#123;</span><br><span class="line">    public static void Main()</span><br><span class="line">    &#123;</span><br><span class="line">        var rpcClient &#x3D; new RpcClient();</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(&quot; [x] Requesting fib(30)&quot;);</span><br><span class="line">        var response &#x3D; rpcClient.Call(&quot;30&quot;);</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(&quot; [.] Got &#39;&#123;0&#125;&#39;&quot;, response);</span><br><span class="line">        rpcClient.Close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">using RabbitMQ.Client;</span><br><span class="line">using RabbitMQ.Client.Events;</span><br><span class="line">using System;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading;</span><br><span class="line"></span><br><span class="line">namespace RPCServer</span><br><span class="line">&#123;</span><br><span class="line">    class RPCServer</span><br><span class="line">    &#123;</span><br><span class="line">        static string QueueName &#x3D; &quot;rpc_queue&quot;;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            var factory &#x3D; new ConnectionFactory()</span><br><span class="line">            &#123;</span><br><span class="line">                HostName &#x3D; &quot;localhost&quot;,</span><br><span class="line">                VirtualHost &#x3D; &quot;frexport&quot;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            using (var conn &#x3D; factory.CreateConnection())</span><br><span class="line">            &#123;</span><br><span class="line">                using (var channel &#x3D; conn.CreateModel())</span><br><span class="line">                &#123;</span><br><span class="line">                    &#x2F;&#x2F;定义消息队列</span><br><span class="line">                    channel.QueueDeclare(queue: QueueName,</span><br><span class="line">                        durable: true,</span><br><span class="line">                        exclusive: false,</span><br><span class="line">                        autoDelete: false,</span><br><span class="line">                        arguments: null);</span><br><span class="line">                    &#x2F;&#x2F;消费者建立</span><br><span class="line">                    var consumer &#x3D; new EventingBasicConsumer(channel);</span><br><span class="line">                    Console.WriteLine(&quot; [x] Awaiting RPC requests&quot;);</span><br><span class="line"></span><br><span class="line">                    &#x2F;&#x2F;消息处理</span><br><span class="line">                    consumer.Received +&#x3D; (sender, ea) &#x3D;&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        string response &#x3D; null;</span><br><span class="line"></span><br><span class="line">                        var body &#x3D; ea.Body;</span><br><span class="line"></span><br><span class="line">                        var props &#x3D; ea.BasicProperties;</span><br><span class="line"></span><br><span class="line">                        &#x2F;&#x2F;回调属性带上 CorrelationId，以便客户端识别</span><br><span class="line">                        var replyProps &#x3D; channel.CreateBasicProperties();</span><br><span class="line">                        replyProps.CorrelationId &#x3D; props.CorrelationId; </span><br><span class="line"></span><br><span class="line">                        try</span><br><span class="line">                        &#123;</span><br><span class="line">                            var message &#x3D; Encoding.UTF8.GetString(body);</span><br><span class="line">                            int n &#x3D; int.Parse(message);</span><br><span class="line">                            Console.WriteLine(&quot; [.] fib(&#123;0&#125;)&quot;, message);</span><br><span class="line">                            response &#x3D; fib(n).ToString();</span><br><span class="line">                        &#125;</span><br><span class="line">                        catch (Exception e)</span><br><span class="line">                        &#123;</span><br><span class="line">                            Console.WriteLine(&quot; [.] &quot; + e.Message);</span><br><span class="line">                            response &#x3D; &quot;&quot;;</span><br><span class="line">                        &#125;</span><br><span class="line">                        finally</span><br><span class="line">                        &#123;</span><br><span class="line">                            var responseBytes &#x3D; Encoding.UTF8.GetBytes(response);</span><br><span class="line"></span><br><span class="line">                            &#x2F;&#x2F;消息从回调通道，发送RabbitMQ</span><br><span class="line">                            channel.BasicPublish(exchange: &quot;&quot;, </span><br><span class="line">                                routingKey: props.ReplyTo, </span><br><span class="line">                                basicProperties: replyProps, </span><br><span class="line">                                body: responseBytes);</span><br><span class="line">                            &#x2F;&#x2F;手动完成消息</span><br><span class="line">                            channel.BasicAck(deliveryTag: ea.DeliveryTag, </span><br><span class="line">                                multiple: false);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;;</span><br><span class="line"></span><br><span class="line">                    &#x2F;&#x2F;消费消息</span><br><span class="line">                    channel.BasicConsume(queue: QueueName,</span><br><span class="line">                        noAck: false,</span><br><span class="line">                        consumer: consumer);</span><br><span class="line"></span><br><span class="line">                    Console.WriteLine(&quot; Press [enter] to exit.&quot;);</span><br><span class="line">                    &#x2F;&#x2F;这个位置必须要加入 Console.ReadLine(); 否则程序继续往下执行，channel和conn 会被销毁，通道会断开</span><br><span class="line">                    Console.ReadLine();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; 求 fib 数</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;n&quot;&gt;&lt;&#x2F;param&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;returns&gt;&lt;&#x2F;returns&gt;</span><br><span class="line">        private static int fib(int n)</span><br><span class="line">        &#123;</span><br><span class="line">            if (n &#x3D;&#x3D; 0 || n &#x3D;&#x3D; 1)</span><br><span class="line">            &#123;</span><br><span class="line">                return n;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            return fib(n - 1) + fib(n - 2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>演示</p><img src="/2020/10/24/mq/rabbitmq-model-rpc/rpc-test.png" class="" title="RPC"> <h2 id="RabbitMQ-Model介绍"><a href="#RabbitMQ-Model介绍" class="headerlink" title="RabbitMQ Model介绍"></a>RabbitMQ Model介绍</h2><ul><li><a href="/2020/10/24/mq/rabbitmq-model-simple/" title="RabbitMQ Hello Model">RabbitMQ Hello Model</a>  </li><li><a href="/2020/10/24/mq/rabbitmq-model-work/" title="RabbitMQ WorkQueue Model">RabbitMQ WorkQueue Model</a>  </li><li><a href="/2020/10/24/mq/rabbitmq-model-subscribe/" title="RabbitMQ Subscribe Model">RabbitMQ Subscribe Model</a>  </li><li><a href="/2020/10/24/mq/rabbitmq-model-routing/" title="RabbitMQ Routing Model">RabbitMQ Routing Model</a>  </li><li><a href="/2020/10/24/mq/rabbitmq-model-topics/" title="RabbitMQ Topics Model">RabbitMQ Topics Model</a>  </li><li><a href="/2020/10/24/mq/rabbitmq-model-rpc/" title="RabbitMQ RPC Model">RabbitMQ RPC Model</a>  </li><li><a href="/2020/10/24/mq/rabbitmq-model-publish-confirm/" title="RabbitMQ 发布确认">RabbitMQ 发布确认</a>  </li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;RPC——Remote Procedure Call，远程过程调用。 那RabbitMQ如何进行远程调用呢？&lt;/p&gt;</summary>
    
    
    
    <category term="MQ" scheme="http://blog.rcant.com/categories/MQ/"/>
    
    
    <category term="rabbitmq" scheme="http://blog.rcant.com/tags/rabbitmq/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ Hello Model</title>
    <link href="http://blog.rcant.com/2020/10/24/mq/rabbitmq-model-simple/"/>
    <id>http://blog.rcant.com/2020/10/24/mq/rabbitmq-model-simple/</id>
    <published>2020-10-24T13:39:17.000Z</published>
    <updated>2020-10-24T10:30:17.562Z</updated>
    
    <content type="html"><![CDATA[<p>简单模式</p><a id="more"></a><h3 id="简单模式"><a href="#简单模式" class="headerlink" title="简单模式"></a>简单模式</h3><p>一个生产者对一个消费者</p><pre class="mermaid">graph LR;    id1([Product]);    id2([Consumer]);    id3([Message Quene])    style id1 fill:#0ff,stroke:#333;    style id2 fill:#3cf,stroke:#333;    style id3 fill:#f00,stroke:#333;    id1-->id3;    id3-->id2;</pre><ul><li>Product : 发送消息</li><li>Consumer : 消费者 接受消息</li><li>Message Quene 消息队列,消息只会存储在队列中，不会处理，等待Consumer处理</li></ul><p>请注意，生产者，消费者和经纪人不必位于同一主机上。实际上，在大多数应用程序中它们不是。一个应用程序既可以是生产者，也可以是消费者。</p><p>RabbitMQ使用多种协议。本教程使用AMQP 0-9-1，这是一种开放的通用消息传递协议。RabbitMQ有许多不同语言的客户。我们将使用RabbitMQ提供的.NET客户端。</p><p>环境</p><ul><li>Net 35</li><li>RabbitMQ 3.4.3 <a href="RabbitMQ.Client.dll" title="源码下载">点击下载</a> </li></ul><h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><p>新建项目 .net35 控制台项目 </p><p>SimpleMQProduct</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">using RabbitMQ.Client;</span><br><span class="line">using System;</span><br><span class="line">using System.Text;</span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">&#x2F;&#x2F;&#x2F; 生产者</span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">namespace SimpleMQProduct</span><br><span class="line">&#123;</span><br><span class="line">    class Send</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;定义连接工厂</span><br><span class="line">            var factory &#x3D; new ConnectionFactory() &#123; HostName &#x3D; &quot;127.0.0.1&quot; &#125;;</span><br><span class="line">            &#x2F;&#x2F;通过工厂获取连接</span><br><span class="line">            using (var connection &#x3D; factory.CreateConnection())</span><br><span class="line">            &#123;</span><br><span class="line">                &#x2F;&#x2F;创建通道</span><br><span class="line">                using (var channel &#x3D; connection.CreateModel())</span><br><span class="line">                &#123;</span><br><span class="line">                    &#x2F;&#x2F;声明创建队列</span><br><span class="line">                    channel.QueueDeclare(queue: &quot;hello&quot;,</span><br><span class="line">                                        durable: false,</span><br><span class="line">                                        exclusive: false,</span><br><span class="line">                                        autoDelete: false,</span><br><span class="line">                                        arguments: null);</span><br><span class="line">                    &#x2F;&#x2F;消息内容</span><br><span class="line">                    string message &#x3D; &quot;Hello,World!&quot;;</span><br><span class="line">                    var body &#x3D; Encoding.UTF8.GetBytes(message);</span><br><span class="line">                    &#x2F;&#x2F;发送消息</span><br><span class="line">                    channel.BasicPublish(exchange: &quot;&quot;,</span><br><span class="line">                        routingKey: &quot;hello&quot;,</span><br><span class="line">                        basicProperties: null,</span><br><span class="line">                        body: body);</span><br><span class="line"></span><br><span class="line">                    Console.WriteLine(&quot; [x] Send &#123;0&#125;&quot;, message);</span><br><span class="line">                    Console.ReadLine();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><p>新建项目 .net35 控制台项目 </p><p>SimpleMQConsumer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">using RabbitMQ.Client;</span><br><span class="line">using RabbitMQ.Client.Events;</span><br><span class="line">using System.Text;</span><br><span class="line">using System;</span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">&#x2F;&#x2F;&#x2F; 消费者</span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">namespace SimpleMQConsumer</span><br><span class="line">&#123;</span><br><span class="line">    class Receive</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;定义连接工厂</span><br><span class="line">            var factory &#x3D; new ConnectionFactory() &#123; HostName &#x3D; &quot;localhost&quot; &#125;;</span><br><span class="line">            &#x2F;&#x2F;通过工厂获取连接</span><br><span class="line">            using (var connection &#x3D; factory.CreateConnection())</span><br><span class="line">            &#123;</span><br><span class="line">                &#x2F;&#x2F;创建通道</span><br><span class="line">                using (var channel &#x3D; connection.CreateModel())</span><br><span class="line">                &#123;</span><br><span class="line">                    &#x2F;&#x2F;声明通道</span><br><span class="line">                    channel.QueueDeclare(queue: &quot;hello&quot;,</span><br><span class="line">                        durable: false,</span><br><span class="line">                        exclusive: false,</span><br><span class="line">                        autoDelete: false,</span><br><span class="line">                        arguments: null);</span><br><span class="line"></span><br><span class="line">                    &#x2F;&#x2F;定义消费者</span><br><span class="line">                    var consumer &#x3D; new EventingBasicConsumer(channel);</span><br><span class="line">                    &#x2F;&#x2F;消息接收后处理</span><br><span class="line">                    consumer.Received +&#x3D; (model, ea) &#x3D;&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        var body &#x3D; ea.Body;</span><br><span class="line">                        var message &#x3D; Encoding.UTF8.GetString(body);</span><br><span class="line">                        Console.WriteLine(&quot; [x] Received &#123;0&#125;&quot;, message);</span><br><span class="line">                    &#125;;</span><br><span class="line">                    &#x2F;&#x2F;监听队列 noAck:True ,自动消费模式; 消息消费时无需给MQ返回Ack</span><br><span class="line">                    channel.BasicConsume(queue: &quot;hello&quot;,</span><br><span class="line">                        noAck: true,</span><br><span class="line">                        consumer: consumer);</span><br><span class="line"></span><br><span class="line">                    Console.WriteLine(&quot; Press [enter] to exit!&quot;);</span><br><span class="line">                    Console.ReadLine();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 ConnectionFactory 设置 RabbitMQ 连接参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var factory &#x3D; new ConnectionFactory() &#123; HostName &#x3D; &quot;localhost&quot;, Port&#x3D;5672, UserName &#x3D; &quot;guest&quot;, Password &#x3D; &quot;guest&quot;, VirtualHost &#x3D; &quot;frexport&quot; &#125;;</span><br></pre></td></tr></table></figure></p><p>这里的参数</p><div class="table-container"><table><thead><tr><th>参数</th><th>参数类型</th><th>参数说明</th><th>默认值</th></tr></thead><tbody><tr><td>HostName</td><td>string</td><td>主机的IP</td><td></td></tr><tr><td>Port</td><td>int</td><td>主机通信端口</td><td>5672</td></tr><tr><td>UserName</td><td>string</td><td>连接账户</td><td>guest</td></tr><tr><td>Password</td><td>string</td><td>连接账户密码</td><td>guest</td></tr><tr><td>VirtualHost</td><td>string</td><td>访问的虚拟主机,可以理解为一个应用MQ</td><td>/</td></tr></tbody></table></div><p>对应的RabbitMQ操作</p><h3 id="RabbitMQ-控制台操作"><a href="#RabbitMQ-控制台操作" class="headerlink" title="RabbitMQ 控制台操作"></a>RabbitMQ 控制台操作</h3><ol><li>添加guest用户</li></ol><p>guest用户设置密码为 guest</p><img src="/2020/10/24/mq/rabbitmq-model-simple/rabbitmq-adduser1.png" class="" title="添加guest"> <img src="/2020/10/24/mq/rabbitmq-model-simple/rabbitmq-adduser2.png" class="" title="添加guest2"> <ol><li>添加 vhost -&gt; frexport</li></ol><img src="/2020/10/24/mq/rabbitmq-model-simple/rabbitmq-addvhost1.png" class="" title="添加vhost"> <p>设置VHost权限，添加guest用户权限</p><img src="/2020/10/24/mq/rabbitmq-model-simple/rabbitmq-setvhost1.png" class="" title="设置权限"> <p>设置后如下</p><img src="/2020/10/24/mq/rabbitmq-model-simple/rabbitmq-setvhost2.png" class="" title="添加vhost"> <p>回到User界面</p><img src="/2020/10/24/mq/rabbitmq-model-simple/rabbitmq-setvhost3.png" class="" title="添加vhost"> <ol><li>添加Quene 队列 hello</li></ol><p>我们使用 frexport 虚拟主机创建一个队列 hello</p><img src="/2020/10/24/mq/rabbitmq-model-simple/rabbitmq-addquene1.png" class="" title="添加队列1"> <p>添加后</p><img src="/2020/10/24/mq/rabbitmq-model-simple/rabbitmq-addquene2.png" class="" title="添加队列2"> <h3 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h3><p>Product</p><img src="/2020/10/24/mq/rabbitmq-model-simple/samplemq-product.png" class="" title="生产者"> <p>Consumer</p><img src="/2020/10/24/mq/rabbitmq-model-simple/samplemq-consumer.png" class="" title="消费者"> <h3 id="RabbitMQ-Model介绍"><a href="#RabbitMQ-Model介绍" class="headerlink" title="RabbitMQ Model介绍"></a>RabbitMQ Model介绍</h3><ul><li><a href="/2020/10/24/mq/rabbitmq-model-simple/" title="RabbitMQ Hello Model">RabbitMQ Hello Model</a>  </li><li><a href="/2020/10/24/mq/rabbitmq-model-work/" title="RabbitMQ WorkQueue Model">RabbitMQ WorkQueue Model</a>  </li><li><a href="/2020/10/24/mq/rabbitmq-model-subscribe/" title="RabbitMQ Subscribe Model">RabbitMQ Subscribe Model</a>  </li><li><a href="/2020/10/24/mq/rabbitmq-model-routing/" title="RabbitMQ Routing Model">RabbitMQ Routing Model</a>  </li><li><a href="/2020/10/24/mq/rabbitmq-model-topics/" title="RabbitMQ Topics Model">RabbitMQ Topics Model</a>  </li><li><a href="/2020/10/24/mq/rabbitmq-model-rpc/" title="RabbitMQ RPC Model">RabbitMQ RPC Model</a>  </li><li><a href="/2020/10/24/mq/rabbitmq-model-publish-confirm/" title="RabbitMQ 发布确认">RabbitMQ 发布确认</a>  </li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;简单模式&lt;/p&gt;</summary>
    
    
    
    <category term="MQ" scheme="http://blog.rcant.com/categories/MQ/"/>
    
    
    <category term="rabbitmq" scheme="http://blog.rcant.com/tags/rabbitmq/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ 发布/订阅模式</title>
    <link href="http://blog.rcant.com/2020/10/24/mq/rabbitmq-model-subscribe/"/>
    <id>http://blog.rcant.com/2020/10/24/mq/rabbitmq-model-subscribe/</id>
    <published>2020-10-24T13:39:17.000Z</published>
    <updated>2020-10-24T10:30:21.616Z</updated>
    
    <content type="html"><![CDATA[<p>发布/订阅模式</p><a id="more"></a><h3 id="Publish-Subscribe-发布-订阅模式"><a href="#Publish-Subscribe-发布-订阅模式" class="headerlink" title="Publish/Subscribe 发布/订阅模式"></a>Publish/Subscribe 发布/订阅模式</h3><p>一个生成者对应多个消费者</p><p>之前我们创建了一个工作队列。工作队列背后的假设是，每个任务都恰好交付给一个工人。<br>在这一部分中，我们将做一些完全不同的事情-我们将消息传达给多个消费者。这种模式称为“发布/订阅”。</p><p>为了说明这种模式，我们将构建一个简单的日志记录系统。它包含两个程序-第一个程序将发出日志消息，第二个程序将接收并打印它们。</p><pre class="mermaid">graph LR;    id1([Product]);    id2([ExChange]);    id3([amq.gen-2G4YaJ2P3JcJEwHHiRL5JA])    id4([amq.gen-tsfVrHogVGKF3vGv6-rPWg])    id5([C1])    id6([C2])    style id1 fill:#0ff,stroke:#333;    style id2 fill:#33c,stroke:#333;    style id3 fill:#f00,stroke:#333;    style id4 fill:#f00,stroke:#333;    style id5 fill:#3cf,stroke:#333;    style id6 fill:#3cf,stroke:#333;    id1-->id2;    id2-->id3-->id5;    id2-->id4-->id6;</pre><ul><li>生产者：将消息发送到 交换机/队列</li><li>消费者：只能从队列中获取消息</li><li>队列可以绑定交换机</li></ul><p>如果消息发送到没有队列绑定的交换机上,那么消息将丢失</p><h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">using RabbitMQ.Client;</span><br><span class="line">using System;</span><br><span class="line">using System.Text;</span><br><span class="line"></span><br><span class="line">namespace SubscribeMQProduct</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 发布订阅模式生产者 </span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line"></span><br><span class="line">    class EmitLog</span><br><span class="line">    &#123;</span><br><span class="line">        static string EXCHANGE_NAME &#x3D; &quot;logs&quot;;</span><br><span class="line"></span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            var factory &#x3D; new ConnectionFactory() &#123; HostName &#x3D; &quot;localhost&quot;, VirtualHost &#x3D; &quot;frexport&quot; &#125;;</span><br><span class="line"></span><br><span class="line">            using (var connection &#x3D; factory.CreateConnection())</span><br><span class="line">            &#123;</span><br><span class="line">                using (var channel &#x3D; connection.CreateModel())</span><br><span class="line">                &#123;</span><br><span class="line">                    &#x2F;&#x2F;声明交换机 fanout：交换机类型 主要有fanout,direct,topics三种</span><br><span class="line">                    channel.ExchangeDeclare(exchange: EXCHANGE_NAME,</span><br><span class="line">                        type: ExchangeType.Fanout,</span><br><span class="line">                        durable: true);</span><br><span class="line">                    for (int i &#x3D; 0; i &lt; 10; i++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        var message &#x3D; &quot;Message-&quot; + i;</span><br><span class="line">                        var body &#x3D; Encoding.UTF8.GetBytes(message);</span><br><span class="line"></span><br><span class="line">                        &#x2F;&#x2F;发送消息</span><br><span class="line">                        channel.BasicPublish(exchange: EXCHANGE_NAME,</span><br><span class="line">                            routingKey: &quot;&quot;,</span><br><span class="line">                            basicProperties: null,</span><br><span class="line">                            body: body);</span><br><span class="line">                        Console.WriteLine(&quot; [x] Sent &#123;0&#125;&quot;, message);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Console.WriteLine(&quot; Press [enter] to exit.&quot;);</span><br><span class="line">                Console.ReadLine();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">using RabbitMQ.Client;</span><br><span class="line">using RabbitMQ.Client.Events;</span><br><span class="line">using System;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Text;</span><br><span class="line"></span><br><span class="line">namespace SubscribeMQConsumer</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 发布订阅模式消费者</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    class ReceiveLogs</span><br><span class="line">    &#123;</span><br><span class="line">        static string EXCHANGE_NAME &#x3D; &quot;logs&quot;;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            var factory &#x3D; new ConnectionFactory() &#123; HostName &#x3D; &quot;localhost&quot;, VirtualHost &#x3D; &quot;frexport&quot; &#125;;</span><br><span class="line"></span><br><span class="line">            using (var connection &#x3D; factory.CreateConnection())</span><br><span class="line">            &#123;</span><br><span class="line">                using (var channel &#x3D; connection.CreateModel())</span><br><span class="line">                &#123;</span><br><span class="line">                    &#x2F;&#x2F;声明 交换机</span><br><span class="line">                    channel.ExchangeDeclare(exchange: EXCHANGE_NAME,</span><br><span class="line">                        type: ExchangeType.Fanout,</span><br><span class="line">                        durable:true);</span><br><span class="line"></span><br><span class="line">                    var queueName &#x3D; channel.QueueDeclare().QueueName;</span><br><span class="line"></span><br><span class="line">                    &#x2F;&#x2F;队列和交换机绑定</span><br><span class="line">                    channel.QueueBind(queue: queueName,</span><br><span class="line">                        exchange: EXCHANGE_NAME,</span><br><span class="line">                        routingKey: &quot;&quot;);</span><br><span class="line"></span><br><span class="line">                    Console.WriteLine(&quot; [*] Waiting for logs.&quot;);</span><br><span class="line"></span><br><span class="line">                    var consumer &#x3D; new EventingBasicConsumer(channel);</span><br><span class="line">                    consumer.Received +&#x3D; (sender, ea) &#x3D;&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        var body &#x3D; ea.Body;</span><br><span class="line">                        var message &#x3D; Encoding.UTF8.GetString(body);</span><br><span class="line">                        Console.WriteLine(&quot; [x] &#123;0&#125;&quot;, message);</span><br><span class="line">                    &#125;;</span><br><span class="line"></span><br><span class="line">                    channel.BasicConsume(queue: queueName,</span><br><span class="line">                        noAck: true,</span><br><span class="line">                        consumer: consumer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    Console.WriteLine(&quot; Press [enter] to exit.&quot;);</span><br><span class="line">                    Console.ReadLine();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置RabbitMQ"><a href="#配置RabbitMQ" class="headerlink" title="配置RabbitMQ"></a>配置RabbitMQ</h3><p>添加交换机</p><img src="/2020/10/24/mq/rabbitmq-model-subscribe/subsrcibemq-addexchange1.png" class="" title="Queue"> <img src="/2020/10/24/mq/rabbitmq-model-subscribe/subsrcibemq-addexchange2.png" class="" title="Queue"> <h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><img src="/2020/10/24/mq/rabbitmq-model-subscribe/subsrcibemq-test.png" class="" title="Queue"> <p>还可以看RabbitMQ 自动生成了两个队列绑定路由</p><img src="/2020/10/24/mq/rabbitmq-model-subscribe/subsrcibemq-autoqueue.png" class="" title="Queue"> <h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>这个模式下，消息会被交换机转发给每个订阅者，每个订阅消费者都会在MQ端有一个Queue队列。<br>生产者的消息会转到所有绑定交换机的队列上，消费者消费所有队列消息</p><h3 id="RabbitMQ-Model介绍"><a href="#RabbitMQ-Model介绍" class="headerlink" title="RabbitMQ Model介绍"></a>RabbitMQ Model介绍</h3><ul><li><a href="/2020/10/24/mq/rabbitmq-model-simple/" title="RabbitMQ Hello Model">RabbitMQ Hello Model</a>  </li><li><a href="/2020/10/24/mq/rabbitmq-model-work/" title="RabbitMQ WorkQueue Model">RabbitMQ WorkQueue Model</a>  </li><li><a href="/2020/10/24/mq/rabbitmq-model-subscribe/" title="RabbitMQ Subscribe Model">RabbitMQ Subscribe Model</a>  </li><li><a href="/2020/10/24/mq/rabbitmq-model-routing/" title="RabbitMQ Routing Model">RabbitMQ Routing Model</a>  </li><li><a href="/2020/10/24/mq/rabbitmq-model-topics/" title="RabbitMQ Topics Model">RabbitMQ Topics Model</a>  </li><li><a href="/2020/10/24/mq/rabbitmq-model-rpc/" title="RabbitMQ RPC Model">RabbitMQ RPC Model</a>  </li><li><a href="/2020/10/24/mq/rabbitmq-model-publish-confirm/" title="RabbitMQ 发布确认">RabbitMQ 发布确认</a>  </li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;发布/订阅模式&lt;/p&gt;</summary>
    
    
    
    <category term="MQ" scheme="http://blog.rcant.com/categories/MQ/"/>
    
    
    <category term="rabbitmq" scheme="http://blog.rcant.com/tags/rabbitmq/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ Topics 主题模式</title>
    <link href="http://blog.rcant.com/2020/10/24/mq/rabbitmq-model-topics/"/>
    <id>http://blog.rcant.com/2020/10/24/mq/rabbitmq-model-topics/</id>
    <published>2020-10-24T13:39:17.000Z</published>
    <updated>2020-10-24T10:30:25.520Z</updated>
    
    <content type="html"><![CDATA[<p>主题模式</p><a id="more"></a><h3 id="Topics-主题模式"><a href="#Topics-主题模式" class="headerlink" title="Topics 主题模式"></a>Topics 主题模式</h3><p>主题模式类似 路由模式</p><p>路由模式是 <strong>完全匹配</strong> 模式，主题模式匹配 通配符</p><pre class="mermaid">graph LR;    p([Product]);    ex([ExChange]);    mq1([amq.gen-fMFRcKxaTxM-o_ApPe_AHw])    mq2([amq.gen-jWFR9bCh4_b52j6KUDt1Sw])    mq3([amq.gen-kkOjkWx9if2mQB_3gcfO4w])    mq4([amq.gen-tNqCT75w_QqSJbVKrJapQQ])    c1([C1])    c2([C2])    c3([C3])    c4([C4])    style p fill:#0ff,stroke:#333;    style ex fill:#33c,stroke:#333;    style mq1 fill:#f00,stroke:#333;    style mq2 fill:#f00,stroke:#333;    style mq3 fill:#f00,stroke:#333;    style mq4 fill:#f00,stroke:#333;    style c1 fill:#3cf,stroke:#333;    style c2 fill:#3cf,stroke:#333;    style c3 fill:#3cf,stroke:#333;    style c4 fill:#3cf,stroke:#333;    p-->ex;    ex-->|#|mq1;    mq1-->c1;    ex-->|kern.*|mq2;    mq2-->c2;    ex-->|*.critical|mq3;    mq3-->c3;    ex-->|kern.*|mq4;    ex-->|*.critical|mq4;    mq4-->c4;</pre><h3 id="生产者代码"><a href="#生产者代码" class="headerlink" title="生产者代码:"></a>生产者代码:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">using RabbitMQ.Client;</span><br><span class="line">using System;</span><br><span class="line">using System.Text;</span><br><span class="line"></span><br><span class="line">namespace TopicsMQConsumer</span><br><span class="line">&#123;</span><br><span class="line">    class EmitLogTopic</span><br><span class="line">    &#123;</span><br><span class="line">        static string ExchangeName &#x3D; &quot;topic_logs&quot;;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            var factory &#x3D; new ConnectionFactory()</span><br><span class="line">            &#123;</span><br><span class="line">                HostName &#x3D; &quot;localhost&quot;,</span><br><span class="line">                VirtualHost &#x3D; &quot;frexport&quot;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            using (var connection &#x3D; factory.CreateConnection())</span><br><span class="line">            using (var channel &#x3D; connection.CreateModel())</span><br><span class="line">            &#123;</span><br><span class="line">                &#x2F;&#x2F; 设置交换机以及交换机模式  durable 不设置的话,默认为false</span><br><span class="line">                channel.ExchangeDeclare(exchange: ExchangeName,</span><br><span class="line">                                        type: ExchangeType.Topic,</span><br><span class="line">                                        durable: false);</span><br><span class="line">                &#x2F;&#x2F;路由信息</span><br><span class="line">                var routingKey &#x3D; (args.Length &gt; 0) ? args[0] : &quot;anonymous.info&quot;;</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F;消息</span><br><span class="line">                var message &#x3D; (args.Length &gt; 1) ? args[1] : &quot;HelloWorld!&quot;;</span><br><span class="line">                var body &#x3D; Encoding.UTF8.GetBytes(message);</span><br><span class="line"></span><br><span class="line">                channel.BasicPublish(exchange: ExchangeName,</span><br><span class="line">                                     routingKey: routingKey,</span><br><span class="line">                                     basicProperties: null,</span><br><span class="line">                                     body: body);</span><br><span class="line"></span><br><span class="line">                Console.WriteLine(&quot; [x] Sent &#39;&#123;0&#125;&#39;:&#39;&#123;1&#125;&#39;&quot;, routingKey, message);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot; Press [enter] to exit.&quot;);</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消费者代码"><a href="#消费者代码" class="headerlink" title="消费者代码"></a>消费者代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">using RabbitMQ.Client;</span><br><span class="line">using RabbitMQ.Client.Events;</span><br><span class="line">using System;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Text;</span><br><span class="line"></span><br><span class="line">namespace TopicsMQConsumer</span><br><span class="line">&#123;</span><br><span class="line">    class ReceiveLogsTopic</span><br><span class="line">    &#123;</span><br><span class="line">        static string ExchangeName &#x3D; &quot;topic_logs&quot;;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            var factory &#x3D; new ConnectionFactory()</span><br><span class="line">            &#123;</span><br><span class="line">                HostName &#x3D; &quot;localhost&quot;,</span><br><span class="line">                VirtualHost &#x3D; &quot;frexport&quot;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            using (var connection &#x3D; factory.CreateConnection())</span><br><span class="line">            using (var channel &#x3D; connection.CreateModel())</span><br><span class="line">            &#123;</span><br><span class="line">                &#x2F;&#x2F; 设置交换机以及交换机模式  durable 不设置的话,默认为false</span><br><span class="line">                channel.ExchangeDeclare(exchange: ExchangeName,</span><br><span class="line">                                        type: ExchangeType.Topic,</span><br><span class="line">                                        durable: false);</span><br><span class="line"></span><br><span class="line">                var queueName &#x3D; channel.QueueDeclare().QueueName;</span><br><span class="line"></span><br><span class="line">                if (args.Length &lt; 1)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.Error.WriteLine(&quot;Usage: &#123;0&#125; [binding_key...]&quot;,</span><br><span class="line">                                            Environment.GetCommandLineArgs()[0]);</span><br><span class="line">                    Console.WriteLine(&quot; Press [enter] to exit.&quot;);</span><br><span class="line">                    Console.ReadLine();</span><br><span class="line">                    Environment.ExitCode &#x3D; 1;</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F;消息队列 绑定到 对应交换机的路由上</span><br><span class="line">                foreach (var bindingKey in args)</span><br><span class="line">                &#123;</span><br><span class="line">                    channel.QueueBind(queue: queueName,</span><br><span class="line">                                      exchange: ExchangeName,</span><br><span class="line">                                      routingKey: bindingKey);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Console.WriteLine(&quot; [*] Waiting for messages. To exit press CTRL+C&quot;);</span><br><span class="line"></span><br><span class="line">                var consumer &#x3D; new EventingBasicConsumer(channel);</span><br><span class="line">                consumer.Received +&#x3D; (model, ea) &#x3D;&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    var body &#x3D; ea.Body.ToArray();</span><br><span class="line">                    var message &#x3D; Encoding.UTF8.GetString(body);</span><br><span class="line">                    var routingKey &#x3D; ea.RoutingKey;</span><br><span class="line">                    Console.WriteLine(&quot; [x] Received &#39;&#123;0&#125;&#39;:&#39;&#123;1&#125;&#39;&quot;,</span><br><span class="line">                                      routingKey,</span><br><span class="line">                                      message);</span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">                channel.BasicConsume(queue: queueName,</span><br><span class="line">                                     noAck: true,</span><br><span class="line">                                     consumer: consumer);</span><br><span class="line"></span><br><span class="line">                Console.WriteLine(&quot; Press [enter] to exit.&quot;);</span><br><span class="line">                Console.ReadLine();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置RabbitMQ"><a href="#配置RabbitMQ" class="headerlink" title="配置RabbitMQ"></a>配置RabbitMQ</h3><p>添加交换机</p><img src="/2020/10/24/mq/rabbitmq-model-topics/topicmq-addexchange.png" class="" title="Queue"> <img src="/2020/10/24/mq/rabbitmq-model-topics/topicmq-addexchange2.png" class="" title="Queue"> <h3 id="测试"><a href="#测试" class="headerlink" title="测试:"></a>测试:</h3><p>消费者1 监听 “#” 所有消息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ .&#x2F;bin&#x2F;Debug&#x2F;TopicsMQConsumer.exe &quot;#&quot;</span><br></pre></td></tr></table></figure><p>消费者2 只监听 kern.* 通配符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ .&#x2F;bin&#x2F;Debug&#x2F;TopicsMQConsumer.exe &quot;kern.*&quot;</span><br></pre></td></tr></table></figure></p><p>消费者3 只监听 “*.critical” 通配符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ .&#x2F;bin&#x2F;Debug&#x2F;TopicsMQConsumer.exe &quot;*.critical&quot;</span><br></pre></td></tr></table></figure></p><p>消费者4 监听 “kern.<em>“ “</em>.critical” 通配符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ .&#x2F;bin&#x2F;Debug&#x2F;TopicsMQConsumer.exe &quot;kern.*&quot; &quot;*.critical&quot;</span><br></pre></td></tr></table></figure></p><p>生产者发送消息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ .&#x2F;bin&#x2F;Debug&#x2F;TopicsMQProduct.exe kern.critic wwww</span><br><span class="line">$ .&#x2F;bin&#x2F;Debug&#x2F;TopicsMQProduct.exe kern.1 wwww</span><br><span class="line">$ .&#x2F;bin&#x2F;Debug&#x2F;TopicsMQProduct.exe kwww wwww</span><br><span class="line">$ .&#x2F;bin&#x2F;Debug&#x2F;TopicsMQProduct.exe kwww.critic wwww</span><br><span class="line">$ .&#x2F;bin&#x2F;Debug&#x2F;TopicsMQProduct.exe kwww.criticical wwww</span><br><span class="line">$ .&#x2F;bin&#x2F;Debug&#x2F;TopicsMQProduct.exe kwww.critical wwww</span><br></pre></td></tr></table></figure></p><p>输出结果</p><img src="/2020/10/24/mq/rabbitmq-model-topics/topicmq-test.png" class="" title="Queue"> <h3 id="RabbitMQ-Model介绍"><a href="#RabbitMQ-Model介绍" class="headerlink" title="RabbitMQ Model介绍"></a>RabbitMQ Model介绍</h3><ul><li><a href="/2020/10/24/mq/rabbitmq-model-simple/" title="RabbitMQ Hello Model">RabbitMQ Hello Model</a>  </li><li><a href="/2020/10/24/mq/rabbitmq-model-work/" title="RabbitMQ WorkQueue Model">RabbitMQ WorkQueue Model</a>  </li><li><a href="/2020/10/24/mq/rabbitmq-model-subscribe/" title="RabbitMQ Subscribe Model">RabbitMQ Subscribe Model</a>  </li><li><a href="/2020/10/24/mq/rabbitmq-model-routing/" title="RabbitMQ Routing Model">RabbitMQ Routing Model</a>  </li><li><a href="/2020/10/24/mq/rabbitmq-model-topics/" title="RabbitMQ Topics Model">RabbitMQ Topics Model</a>  </li><li><a href="/2020/10/24/mq/rabbitmq-model-rpc/" title="RabbitMQ RPC Model">RabbitMQ RPC Model</a>  </li><li><a href="/2020/10/24/mq/rabbitmq-model-publish-confirm/" title="RabbitMQ 发布确认">RabbitMQ 发布确认</a>  </li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;主题模式&lt;/p&gt;</summary>
    
    
    
    <category term="MQ" scheme="http://blog.rcant.com/categories/MQ/"/>
    
    
    <category term="rabbitmq" scheme="http://blog.rcant.com/tags/rabbitmq/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ Work Queues</title>
    <link href="http://blog.rcant.com/2020/10/24/mq/rabbitmq-model-work/"/>
    <id>http://blog.rcant.com/2020/10/24/mq/rabbitmq-model-work/</id>
    <published>2020-10-24T13:39:17.000Z</published>
    <updated>2020-10-24T10:30:29.016Z</updated>
    
    <content type="html"><![CDATA[<p>工作队列</p><a id="more"></a><h3 id="Work-Queues-工作队列"><a href="#Work-Queues-工作队列" class="headerlink" title="Work Queues 工作队列"></a>Work Queues 工作队列</h3><p>工作队列背后的假设是，每个任务都恰好交付给一个工人</p><p>一个生成者对应多个消费者</p><pre class="mermaid">graph LR;    id1([Product]);    id2([Message Quene])    id3([Consumer1]);    id4([Consumer2]);    style id1 fill:#0ff,stroke:#333;    style id2 fill:#f00,stroke:#333;    style id3 fill:#3cf,stroke:#333;    style id4 fill:#3cf,stroke:#333;    id1-->id2;    id2-->id3;    id2-->id4;</pre><p>将比较复杂比较耗时的任务放在任务队列中，不必立即执行。</p><p>任务队列用来管理任务列表,我们在后台的工作可以交给多个线程来完成。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>创建两个工程一个作为生产者，一个作为消费者</p><p>这个时候的消费者，不能立即处理完一个事情，需要消耗一定时间</p><p>我们同时开启多个消费者消费任务。</p><p>生产者不停的生产新的任务</p><p>以下是代码</p><h4 id="生产者代码"><a href="#生产者代码" class="headerlink" title="生产者代码"></a>生产者代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">using RabbitMQ.Client;</span><br><span class="line">using System;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading;</span><br><span class="line"></span><br><span class="line">namespace WorkMQProduct</span><br><span class="line">&#123;</span><br><span class="line">    class NewTask</span><br><span class="line">    &#123;</span><br><span class="line">        static string QueueName &#x3D; &quot;task_queue&quot;;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            var factory &#x3D; new ConnectionFactory()</span><br><span class="line">            &#123;</span><br><span class="line">                HostName &#x3D; &quot;localhost&quot;,</span><br><span class="line">                VirtualHost &#x3D; &quot;frexport&quot;,</span><br><span class="line">                UserName &#x3D; &quot;guest&quot;,</span><br><span class="line">                Password &#x3D; &quot;guest&quot;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            using (var connection &#x3D; factory.CreateConnection())</span><br><span class="line">            using (var channel &#x3D; connection.CreateModel())</span><br><span class="line">            &#123;</span><br><span class="line">                channel.QueueDeclare(queue: QueueName,</span><br><span class="line">                                     durable: true,</span><br><span class="line">                                     exclusive: false,</span><br><span class="line">                                     autoDelete: false,</span><br><span class="line">                                     arguments: null);</span><br><span class="line"></span><br><span class="line">                var properties &#x3D; channel.CreateBasicProperties();</span><br><span class="line">                properties.SetPersistent(true);</span><br><span class="line"></span><br><span class="line">                for (int i &#x3D; 0; i &lt; 40; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    var message &#x3D; &quot;Task&quot; + i;</span><br><span class="line">                    var body &#x3D; Encoding.UTF8.GetBytes(message);</span><br><span class="line"></span><br><span class="line">                    channel.BasicPublish(exchange: &quot;&quot;,</span><br><span class="line">                                     routingKey: QueueName,</span><br><span class="line">                                     basicProperties: properties,</span><br><span class="line">                                     body: body);</span><br><span class="line">                    Console.WriteLine(&quot; [x] Sent &#123;0&#125;&quot;, message);</span><br><span class="line">                    Thread.Sleep(100);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot; Press [enter] to exit.&quot;);</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消费者代码"><a href="#消费者代码" class="headerlink" title="消费者代码"></a>消费者代码</h4><p>同一队列可以有多个消费者同时消费<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">using RabbitMQ.Client;</span><br><span class="line">using RabbitMQ.Client.Events;</span><br><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading;</span><br><span class="line"></span><br><span class="line">namespace WorkMQConsumer</span><br><span class="line">&#123;</span><br><span class="line">    class Worker</span><br><span class="line">    &#123;</span><br><span class="line">        static string QueueName &#x3D; &quot;task_queue&quot;;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            var factory &#x3D; new ConnectionFactory() &#123; &#125;;</span><br><span class="line">            factory.HostName &#x3D; &quot;localhost&quot;;</span><br><span class="line">            factory.VirtualHost &#x3D; &quot;frexport&quot;;</span><br><span class="line">            factory.UserName &#x3D; &quot;guest&quot;;</span><br><span class="line">            factory.Password &#x3D; &quot;guest&quot;;</span><br><span class="line"></span><br><span class="line">            using (var connection &#x3D; factory.CreateConnection())</span><br><span class="line">            &#123;</span><br><span class="line">                using (var channel &#x3D; connection.CreateModel())</span><br><span class="line">                &#123;</span><br><span class="line">                    channel.QueueDeclare(queue: QueueName,</span><br><span class="line">                        durable: true,</span><br><span class="line">                        exclusive: false,</span><br><span class="line">                        autoDelete: false,</span><br><span class="line">                        arguments: null);</span><br><span class="line"></span><br><span class="line">                    &#x2F;&#x2F;同一时刻服务器只发送一条消息给消费端</span><br><span class="line">                    channel.BasicQos(prefetchCount: 1, prefetchSize: 0, global: false);</span><br><span class="line"></span><br><span class="line">                    Console.WriteLine(&quot; [*] Waiting for message.&quot;);</span><br><span class="line"></span><br><span class="line">                    var consumer &#x3D; new EventingBasicConsumer(channel);</span><br><span class="line"></span><br><span class="line">                    consumer.Received +&#x3D; (sender, ea) &#x3D;&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        var body &#x3D; ea.Body;</span><br><span class="line">                        var message &#x3D; System.Text.Encoding.UTF8.GetString(body);</span><br><span class="line"></span><br><span class="line">                        Console.WriteLine(&quot; [x] Receive &#123;0&#125; &#123;1&#125;&quot;, message, DateTime.Now);</span><br><span class="line"></span><br><span class="line">                        Thread.Sleep(1000);</span><br><span class="line"></span><br><span class="line">                        &#x2F;&#x2F;消息消费完给服务器返回确认状态，表示该消息已被消费</span><br><span class="line">                        channel.BasicAck(deliveryTag: ea.DeliveryTag, multiple: false);</span><br><span class="line">                    &#125;;</span><br><span class="line"></span><br><span class="line">                    channel.BasicConsume(queue: QueueName,</span><br><span class="line">                        noAck: false,</span><br><span class="line">                        consumer: consumer);</span><br><span class="line"></span><br><span class="line">                    Console.WriteLine(&quot; Press [enter] to exit.&quot;);</span><br><span class="line">                    Console.ReadLine();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><img src="/2020/10/24/mq/rabbitmq-model-work/workmq.png" class="" title="消费者"> <h3 id="当然需要添加Queue"><a href="#当然需要添加Queue" class="headerlink" title="当然需要添加Queue"></a>当然需要添加Queue</h3><img src="/2020/10/24/mq/rabbitmq-model-work/workmq-addqueue.png" class="" title="Queue"> <h3 id="消息消费的两种模式"><a href="#消息消费的两种模式" class="headerlink" title="消息消费的两种模式"></a>消息消费的两种模式</h3><h4 id="1-自动模式"><a href="#1-自动模式" class="headerlink" title="1. 自动模式"></a>1. 自动模式</h4><p>消费者从消息队列获取消息后，服务端就认为该消息已经成功消费。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var consumer &#x3D; new EventingBasicConsumer(channel);</span><br><span class="line">consumer.Received +&#x3D; (model, ea) &#x3D;&gt;</span><br><span class="line">&#123;</span><br><span class="line">    var body &#x3D; ea.Body;</span><br><span class="line">    var message &#x3D; Encoding.UTF8.GetString(body);</span><br><span class="line">    Console.WriteLine(&quot; [x] Received &#123;0&#125;&quot;, message);</span><br><span class="line">    &#x2F;&#x2F;无需反馈</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">channel.BasicConsume(queue: &quot;hello&quot;,</span><br><span class="line">    noAck: true,</span><br><span class="line">    consumer: consumer);</span><br></pre></td></tr></table></figure><h4 id="2-手动模式"><a href="#2-手动模式" class="headerlink" title="2. 手动模式"></a>2. 手动模式</h4><p>消费者从消息队列获取消息后，服务端并没有标记为成功消费<br>​消费者成功消费后需要将状态返回到服务端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var consumer &#x3D; new EventingBasicConsumer(channel);</span><br><span class="line"></span><br><span class="line">consumer.Received +&#x3D; (sender, ea) &#x3D;&gt;</span><br><span class="line">&#123;</span><br><span class="line">    var body &#x3D; ea.Body;</span><br><span class="line">    var message &#x3D; System.Text.Encoding.UTF8.GetString(body);</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(&quot; [x] Receive &#123;0&#125; &#123;1&#125;&quot;, message, DateTime.Now);</span><br><span class="line"></span><br><span class="line">    Thread.Sleep(1000);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;消息消费完给服务器返回确认状态，表示该消息已被消费</span><br><span class="line">    channel.BasicAck(deliveryTag: ea.DeliveryTag, multiple: false);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">channel.BasicConsume(queue: QueueName,</span><br><span class="line">                noAck: false,</span><br><span class="line">                consumer: consumer);</span><br></pre></td></tr></table></figure><h3 id="RabbitMQ-Model介绍"><a href="#RabbitMQ-Model介绍" class="headerlink" title="RabbitMQ Model介绍"></a>RabbitMQ Model介绍</h3><ul><li><a href="/2020/10/24/mq/rabbitmq-model-simple/" title="RabbitMQ Hello Model">RabbitMQ Hello Model</a>  </li><li><a href="/2020/10/24/mq/rabbitmq-model-work/" title="RabbitMQ WorkQueue Model">RabbitMQ WorkQueue Model</a>  </li><li><a href="/2020/10/24/mq/rabbitmq-model-subscribe/" title="RabbitMQ Subscribe Model">RabbitMQ Subscribe Model</a>  </li><li><a href="/2020/10/24/mq/rabbitmq-model-routing/" title="RabbitMQ Routing Model">RabbitMQ Routing Model</a>  </li><li><a href="/2020/10/24/mq/rabbitmq-model-topics/" title="RabbitMQ Topics Model">RabbitMQ Topics Model</a>  </li><li><a href="/2020/10/24/mq/rabbitmq-model-rpc/" title="RabbitMQ RPC Model">RabbitMQ RPC Model</a>  </li><li><a href="/2020/10/24/mq/rabbitmq-model-publish-confirm/" title="RabbitMQ 发布确认">RabbitMQ 发布确认</a>  </li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;工作队列&lt;/p&gt;</summary>
    
    
    
    <category term="MQ" scheme="http://blog.rcant.com/categories/MQ/"/>
    
    
    <category term="rabbitmq" scheme="http://blog.rcant.com/tags/rabbitmq/"/>
    
  </entry>
  
  <entry>
    <title>阿里巴巴为什么能抗住90秒100亿？</title>
    <link href="http://blog.rcant.com/2020/10/23/framework/framework-alibaba/"/>
    <id>http://blog.rcant.com/2020/10/23/framework/framework-alibaba/</id>
    <published>2020-10-23T14:39:17.000Z</published>
    <updated>2020-10-23T07:24:06.441Z</updated>
    
    <content type="html"><![CDATA[<p>本文以淘宝作为例子，介绍从一百个并发到千万级并发情况下服务端的架构的演进过程</p><a id="more"></a><h2 id="1、-概述"><a href="#1、-概述" class="headerlink" title="1、 概述"></a>1、 概述</h2><p>本文以淘宝作为例子，介绍从一百个并发到千万级并发情况下服务端的架构的演进过程，同时列举出每个演进阶段会遇到的相关技术，让大家对架构的演进有一个整体的认知，文章最后汇总了一些架构设计的原则。</p><h2 id="2、基本概念"><a href="#2、基本概念" class="headerlink" title="2、基本概念"></a>2、基本概念</h2><p>在介绍架构之前，为了避免部分读者对架构设计中的一些概念不了解，下面对几个最基础的概念进行介绍。</p><h3 id="1）什么是分布式？"><a href="#1）什么是分布式？" class="headerlink" title="1）什么是分布式？"></a>1）什么是分布式？</h3><p>系统中的多个模块在不同服务器上部署，即可称为分布式系统，如Tomcat和数据库分别部署在不同的服务器上，或两个相同功能的Tomcat分别部署在不同服务器上。</p><h3 id="2）什么是高可用？"><a href="#2）什么是高可用？" class="headerlink" title="2）什么是高可用？"></a>2）什么是高可用？</h3><p>系统中部分节点失效时，其他节点能够接替它继续提供服务，则可认为系统具有高可用性。</p><h3 id="3）什么是集群？"><a href="#3）什么是集群？" class="headerlink" title="3）什么是集群？"></a>3）什么是集群？</h3><p>一个特定领域的软件部署在多台服务器上并作为一个整体提供一类服务，这个整体称为集群。<br>如Zookeeper中的Master和Slave分别部署在多台服务器上，共同组成一个整体提供集中配置服务。<br>在常见的集群中，客户端往往能够连接任意一个节点获得服务，并且当集群中一个节点掉线时，其他节点往往能够自动的接替它继续提供服务，这时候说明集群具有高可用性。</p><h3 id="4）什么是负载均衡？"><a href="#4）什么是负载均衡？" class="headerlink" title="4）什么是负载均衡？"></a>4）什么是负载均衡？</h3><p>请求发送到系统时，通过某些方式把请求均匀分发到多个节点上，使系统中每个节点能够均匀的处理请求负载，则可认为系统是负载均衡的。</p><h3 id="5）什么是正向代理和反向代理？"><a href="#5）什么是正向代理和反向代理？" class="headerlink" title="5）什么是正向代理和反向代理？"></a>5）什么是正向代理和反向代理？</h3><p>系统内部要访问外部网络时，统一通过一个代理服务器把请求转发出去，在外部网络看来就是代理服务器发起的访问，此时代理服务器实现的是正向代理；<br>当外部请求进入系统时，代理服务器把该请求转发到系统中的某台服务器上，对外部请求来说，与之交互的只有代理服务器，此时代理服务器实现的是反向代理。<br>简单来说，正向代理是代理服务器代替系统内部来访问外部网络的过程，反向代理是外部请求访问系统时通过代理服务器转发到内部服务器的过程。</p><h2 id="3、架构演进"><a href="#3、架构演进" class="headerlink" title="3、架构演进"></a>3、架构演进</h2><h3 id="3-1-单机架构"><a href="#3-1-单机架构" class="headerlink" title="3.1 单机架构"></a>3.1 单机架构</h3><img src="/2020/10/23/framework/framework-alibaba/1.webp" class="" title="单机架构"> <p>以淘宝作为例子：在网站最初时，应用数量与用户数都较少，可以把Tomcat和数据库部署在同一台服务器上。</p><p>浏览器往www.taobao.com发起请求时，首先经过DNS服务器（域名系统）把域名转换为实际IP地址10.102.4.1，浏览器转而访问该IP对应的Tomcat。</p><p>架构瓶颈：随着用户数的增长，Tomcat和数据库之间竞争资源，单机性能不足以支撑业务。</p><h3 id="3-2第一次演进：Tomcat与数据库分开部署"><a href="#3-2第一次演进：Tomcat与数据库分开部署" class="headerlink" title="3.2第一次演进：Tomcat与数据库分开部署"></a>3.2第一次演进：Tomcat与数据库分开部署</h3><img src="/2020/10/23/framework/framework-alibaba/2.webp" class="" title="Tomcat与数据库分开部署"> <p>Tomcat和数据库分别独占服务器资源，显著提高两者各自性能。</p><p>架构瓶颈：随着用户数的增长，并发读写数据库成为瓶颈。</p><p>Tips：欢迎关注微信公众号：Java后端，获取更多技术博文推送。</p><h3 id="3-3-第二次演进：引入本地缓存和分布式缓存"><a href="#3-3-第二次演进：引入本地缓存和分布式缓存" class="headerlink" title="3.3 第二次演进：引入本地缓存和分布式缓存"></a>3.3 第二次演进：引入本地缓存和分布式缓存</h3><img src="/2020/10/23/framework/framework-alibaba/3.webp" class="" title="引入本地缓存和分布式缓存"> <p>在Tomcat同服务器上或同JVM中增加本地缓存，并在外部增加分布式缓存，缓存热门商品信息或热门商品的html页面等。通过缓存能把绝大多数请求在读写数据库前拦截掉，大大降低数据库压力。</p><p>其中涉及的技术包括：使用memcached作为本地缓存，使用Redis作为分布式缓存，还会涉及缓存一致性、缓存穿透/击穿、缓存雪崩、热点数据集中失效等问题。</p><p>架构瓶颈：缓存抗住了大部分的访问请求，随着用户数的增长，并发压力主要落在单机的Tomcat上，响应逐渐变慢。</p><h3 id="3-4-第三次演进：引入反向代理实现负载均衡"><a href="#3-4-第三次演进：引入反向代理实现负载均衡" class="headerlink" title="3.4 第三次演进：引入反向代理实现负载均衡"></a>3.4 第三次演进：引入反向代理实现负载均衡</h3><img src="/2020/10/23/framework/framework-alibaba/4.webp" class="" title="引入反向代理实现负载均衡"> <p>在多台服务器上分别部署Tomcat，使用反向代理软件（Nginx）把请求均匀分发到每个Tomcat中。</p><p>此处假设Tomcat最多支持100个并发，Nginx最多支持50000个并发，那么理论上Nginx把请求分发到500个Tomcat上，就能抗住50000个并发。</p><p>其中涉及的技术包括：Nginx、HAProxy，两者都是工作在网络第七层的反向代理软件，主要支持http协议，还会涉及session共享、文件上传下载的问题。</p><p>架构瓶颈：反向代理使应用服务器可支持的并发量大大增加，但并发量的增长也意味着更多请求穿透到数据库，单机的数据库最终成为瓶颈。</p><h3 id="3-5-第四次演进：数据库读写分离"><a href="#3-5-第四次演进：数据库读写分离" class="headerlink" title="3.5 第四次演进：数据库读写分离"></a>3.5 第四次演进：数据库读写分离</h3><img src="/2020/10/23/framework/framework-alibaba/5.webp" class="" title="数据库读写分离"> <p>把数据库划分为读库和写库，读库可以有多个，通过同步机制把写库的数据同步到读库，对于需要查询最新写入数据场景，可通过在缓存中多写一份，通过缓存获得最新数据。</p><p>其中涉及的技术包括：Mycat，它是数据库中间件，可通过它来组织数据库的分离读写和分库分表，客户端通过它来访问下层数据库，还会涉及数据同步，数据一致性的问题。</p><p>架构瓶颈：业务逐渐变多，不同业务之间的访问量差距较大，不同业务直接竞争数据库，相互影响性能。</p><h3 id="3-6-第五次演进：数据库按业务分库"><a href="#3-6-第五次演进：数据库按业务分库" class="headerlink" title="3.6 第五次演进：数据库按业务分库"></a>3.6 第五次演进：数据库按业务分库</h3><img src="/2020/10/23/framework/framework-alibaba/6.webp" class="" title="数据库按业务分库"> <p>把不同业务的数据保存到不同的数据库中，使业务之间的资源竞争降低，对于访问量大的业务，可以部署更多的服务器来支撑。</p><p>这样同时导致跨业务的表无法直接做关联分析，需要通过其他途径来解决，但这不是本文讨论的重点，有兴趣的可以自行搜索解决方案。</p><p>架构瓶颈：随着用户数的增长，单机的写库会逐渐会达到性能瓶颈。</p><h3 id="3-7-第六次演进：把大表拆分为小表"><a href="#3-7-第六次演进：把大表拆分为小表" class="headerlink" title="3.7 第六次演进：把大表拆分为小表"></a>3.7 第六次演进：把大表拆分为小表</h3><img src="/2020/10/23/framework/framework-alibaba/7.webp" class="" title="把大表拆分为小表"> <p>比如针对评论数据，可按照商品ID进行hash，路由到对应的表中存储；</p><p>针对支付记录，可按照小时创建表，每个小时表继续拆分为小表，使用用户ID或记录编号来路由数据。</p><p>只要实时操作的表数据量足够小，请求能够足够均匀的分发到多台服务器上的小表，那数据库就能通过水平扩展的方式来提高性能。其中前面提到的Mycat也支持在大表拆分为小表情况下的访问控制。</p><p>这种做法显著的增加了数据库运维的难度，对DBA的要求较高。数据库设计到这种结构时，已经可以称为分布式数据库</p><p>但这只是一个逻辑的数据库整体，数据库里不同的组成部分是由不同的组件单独来实现的</p><p>如分库分表的管理和请求分发，由Mycat实现，SQL的解析由单机的数据库实现，读写分离可能由网关和消息队列来实现，查询结果的汇总可能由数据库接口层来实现等等</p><p>这种架构其实是MPP（大规模并行处理）架构的一类实现。</p><p>目前开源和商用都已经有不少MPP数据库，开源中比较流行的有Greenplum、TiDB、Postgresql XC、HAWQ等，商用的如南大通用的GBase、睿帆科技的雪球DB、华为的LibrA等等</p><p>不同的MPP数据库的侧重点也不一样，如TiDB更侧重于分布式OLTP场景，Greenplum更侧重于分布式OLAP场景</p><p>这些MPP数据库基本都提供了类似Postgresql、Oracle、MySQL那样的SQL标准支持能力，能把一个查询解析为分布式的执行计划分发到每台机器上并行执行，最终由数据库本身汇总数据进行返回</p><p>也提供了诸如权限管理、分库分表、事务、数据副本等能力，并且大多能够支持100个节点以上的集群，大大降低了数据库运维的成本，并且使数据库也能够实现水平扩展。</p><p>架构瓶颈：数据库和Tomcat都能够水平扩展，可支撑的并发大幅提高，随着用户数的增长，最终单机的Nginx会成为瓶颈。</p><h3 id="3-8-第七次演进：使用LVS或F5来使多个Nginx负载均衡"><a href="#3-8-第七次演进：使用LVS或F5来使多个Nginx负载均衡" class="headerlink" title="3.8 第七次演进：使用LVS或F5来使多个Nginx负载均衡"></a>3.8 第七次演进：使用LVS或F5来使多个Nginx负载均衡</h3><img src="/2020/10/23/framework/framework-alibaba/8.webp" class="" title="使用LVS或F5来使多个Nginx负载均衡"> <p>由于瓶颈在Nginx，因此无法通过两层的Nginx来实现多个Nginx的负载均衡。</p><p>图中的LVS和F5是工作在网络第四层的负载均衡解决方案，其中LVS是软件，运行在操作系统内核态，可对TCP请求或更高层级的网络协议进行转发，因此支持的协议更丰富，并且性能也远高于Nginx，可假设单机的LVS可支持几十万个并发的请求转发；</p><p>F5是一种负载均衡硬件，与LVS提供的能力类似，性能比LVS更高，但价格昂贵。</p><p>由于LVS是单机版的软件，若LVS所在服务器宕机则会导致整个后端系统都无法访问，因此需要有备用节点。</p><p>可使用keepalived软件模拟出虚拟IP，然后把虚拟IP绑定到多台LVS服务器上，浏览器访问虚拟IP时，会被路由器重定向到真实的LVS服务器</p><p>当主LVS服务器宕机时，keepalived软件会自动更新路由器中的路由表，把虚拟IP重定向到另外一台正常的LVS服务器，从而达到LVS服务器高可用的效果。</p><p>此处需要注意的是，上图中从Nginx层到Tomcat层这样画并不代表全部Nginx都转发请求到全部的Tomcat</p><p>在实际使用时，可能会是几个Nginx下面接一部分的Tomcat，这些Nginx之间通过keepalived实现高可用，其他的Nginx接另外的Tomcat，这样可接入的Tomcat数量就能成倍的增加。</p><p>架构瓶颈：由于LVS也是单机的，随着并发数增长到几十万时，LVS服务器最终会达到瓶颈，此时用户数达到千万甚至上亿级别，用户分布在不同的地区，与服务器机房距离不同，导致了访问的延迟会明显不同。</p><h3 id="3-9-第八次演进：通过DNS轮询实现机房间的负载均衡"><a href="#3-9-第八次演进：通过DNS轮询实现机房间的负载均衡" class="headerlink" title="3.9 第八次演进：通过DNS轮询实现机房间的负载均衡"></a>3.9 第八次演进：通过DNS轮询实现机房间的负载均衡</h3><img src="/2020/10/23/framework/framework-alibaba/9.webp" class="" title="通过DNS轮询实现机房间的负载均衡"> <p>在DNS服务器中可配置一个域名对应多个IP地址，每个IP地址对应到不同的机房里的虚拟IP。</p><p>当用户访问www.taobao.com时，DNS服务器会使用轮询策略或其他策略，来选择某个IP供用户访问。此方式能实现机房间的负载均衡</p><p>至此，系统可做到机房级别的水平扩展，千万级到亿级的并发量都可通过增加机房来解决，系统入口处的请求并发量不再是问题。</p><p>架构瓶颈：随着数据的丰富程度和业务的发展，检索、分析等需求越来越丰富，单单依靠数据库无法解决如此丰富的需求。</p><h3 id="3-10-第九次演进：引入NoSQL数据库和搜索引擎等技术"><a href="#3-10-第九次演进：引入NoSQL数据库和搜索引擎等技术" class="headerlink" title="3.10 第九次演进：引入NoSQL数据库和搜索引擎等技术"></a>3.10 第九次演进：引入NoSQL数据库和搜索引擎等技术</h3><img src="/2020/10/23/framework/framework-alibaba/10.webp" class="" title="引入NoSQL数据库和搜索引擎等技术"> <p>当数据库中的数据多到一定规模时，数据库就不适用于复杂的查询了，往往只能满足普通查询的场景。</p><p>对于统计报表场景，在数据量大时不一定能跑出结果，而且在跑复杂查询时会导致其他查询变慢</p><p>对于全文检索、可变数据结构等场景，数据库天生不适用。因此需要针对特定的场景，引入合适的解决方案。</p><p>如对于海量文件存储，可通过分布式文件系统HDFS解决，对于key value类型的数据，可通过HBase和Redis等方案解决</p><p>对于全文检索场景，可通过搜索引擎如ElasticSearch解决，对于多维分析场景，可通过Kylin或Druid等方案解决。</p><p>当然，引入更多组件同时会提高系统的复杂度，不同的组件保存的数据需要同步，需要考虑一致性的问题，需要有更多的运维手段来管理这些组件等。</p><p>架构瓶颈：引入更多组件解决了丰富的需求，业务维度能够极大扩充，随之而来的是一个应用中包含了太多的业务代码，业务的升级迭代变得困难。</p><h3 id="3-11-第十次演进：大应用拆分为小应用"><a href="#3-11-第十次演进：大应用拆分为小应用" class="headerlink" title="3.11 第十次演进：大应用拆分为小应用"></a>3.11 第十次演进：大应用拆分为小应用</h3><img src="/2020/10/23/framework/framework-alibaba/11.webp" class="" title="大应用拆分为小应用"> <p>按照业务板块来划分应用代码，使单个应用的职责更清晰，相互之间可以做到独立升级迭代。这时候应用之间可能会涉及到一些公共配置，可以通过分布式配置中心Zookeeper来解决。</p><p>架构瓶颈：不同应用之间存在共用的模块，由应用单独管理会导致相同代码存在多份，导致公共功能升级时全部应用代码都要跟着升级。</p><h3 id="3-12-第十一次演进：复用的功能抽离成微服务"><a href="#3-12-第十一次演进：复用的功能抽离成微服务" class="headerlink" title="3.12 第十一次演进：复用的功能抽离成微服务"></a>3.12 第十一次演进：复用的功能抽离成微服务</h3><img src="/2020/10/23/framework/framework-alibaba/12.webp" class="" title="复用的功能抽离成微服务"> <p>如用户管理、订单、支付、鉴权等功能在多个应用中都存在，那么可以把这些功能的代码单独抽取出来形成一个单独的服务来管理</p><p>这样的服务就是所谓的微服务，应用和服务之间通过HTTP、TCP或RPC请求等多种方式来访问公共服务，每个单独的服务都可以由单独的团队来管理。</p><p>此外，可以通过Dubbo、SpringCloud等框架实现服务治理、限流、熔断、降级等功能，提高服务的稳定性和可用性。</p><p>架构瓶颈：不同服务的接口访问方式不同，应用代码需要适配多种访问方式才能使用服务，此外，应用访问服务，服务之间也可能相互访问，调用链将会变得非常复杂，逻辑变得混乱。</p><h3 id="3-13-第十二次演进：引入企业服务总线ESB屏蔽服务接口的访问差异"><a href="#3-13-第十二次演进：引入企业服务总线ESB屏蔽服务接口的访问差异" class="headerlink" title="3.13 第十二次演进：引入企业服务总线ESB屏蔽服务接口的访问差异"></a>3.13 第十二次演进：引入企业服务总线ESB屏蔽服务接口的访问差异</h3><img src="/2020/10/23/framework/framework-alibaba/13.webp" class="" title="引入企业服务总线ESB屏蔽服务接口的访问差异"> <p>通过ESB统一进行访问协议转换，应用统一通过ESB来访问后端服务，服务与服务之间也通过ESB来相互调用，以此降低系统的耦合程度。</p><p>这种单个应用拆分为多个应用，公共服务单独抽取出来来管理，并使用企业消息总线来解除服务之间耦合问题的架构，就是所谓的SOA（面向服务）架构，这种架构与微服务架构容易混淆，因为表现形式十分相似。</p><p>个人理解，微服务架构更多是指把系统里的公共服务抽取出来单独运维管理的思想，而SOA架构则是指一种拆分服务并使服务接口访问变得统一的架构思想，SOA架构中包含了微服务的思想。</p><p>架构瓶颈：业务不断发展，应用和服务都会不断变多，应用和服务的部署变得复杂，同一台服务器上部署多个服务还要解决运行环境冲突的问题</p><p>此外，对于如大促这类需要动态扩缩容的场景，需要水平扩展服务的性能，就需要在新增的服务上准备运行环境，部署服务等，运维将变得十分困难。</p><h3 id="3-14-第十三次演进：引入容器化技术实现运行环境隔离与动态服务管理"><a href="#3-14-第十三次演进：引入容器化技术实现运行环境隔离与动态服务管理" class="headerlink" title="3.14 第十三次演进：引入容器化技术实现运行环境隔离与动态服务管理"></a>3.14 第十三次演进：引入容器化技术实现运行环境隔离与动态服务管理</h3><img src="/2020/10/23/framework/framework-alibaba/14.webp" class="" title="引入容器化技术实现运行环境隔离与动态服务管理"> <p>目前最流行的容器化技术是Docker，最流行的容器管理服务是Kubernetes(K8S)，应用/服务可以打包为Docker镜像，通过K8S来动态分发和部署镜像。</p><p>Docker镜像可理解为一个能运行你的应用/服务的最小的操作系统，里面放着应用/服务的运行代码，运行环境根据实际的需要设置好。</p><p>把整个“操作系统”打包为一个镜像后，就可以分发到需要部署相关服务的机器上，直接启动Docker镜像就可以把服务起起来，使服务的部署和运维变得简单。</p><p>在大促的之前，可以在现有的机器集群上划分出服务器来启动Docker镜像，增强服务的性能</p><p>大促过后就可以关闭镜像，对机器上的其他服务不造成影响（在第18节之前，服务运行在新增机器上需要修改系统配置来适配服务，这会导致机器上其他服务需要的运行环境被破坏）。</p><p>架构瓶颈：使用容器化技术后服务动态扩缩容问题得以解决，但是机器还是需要公司自身来管理，在非大促的时候，还是需要闲置着大量的机器资源来应对大促，机器自身成本和运维成本都极高，资源利用率低。</p><h3 id="3-15-第十四次演进：以云平台承载系统"><a href="#3-15-第十四次演进：以云平台承载系统" class="headerlink" title="3.15 第十四次演进：以云平台承载系统"></a>3.15 第十四次演进：以云平台承载系统</h3><img src="/2020/10/23/framework/framework-alibaba/15.webp" class="" title="以云平台承载系统"> <p>系统可部署到公有云上，利用公有云的海量机器资源，解决动态硬件资源的问题</p><p>在大促的时间段里，在云平台中临时申请更多的资源，结合Docker和K8S来快速部署服务，在大促结束后释放资源，真正做到按需付费，资源利用率大大提高，同时大大降低了运维成本。</p><p>所谓的云平台，就是把海量机器资源，通过统一的资源管理，抽象为一个资源整体</p><p>在云平台上可按需动态申请硬件资源（如CPU、内存、网络等），并且之上提供通用的操作系统，提供常用的技术组件（如Hadoop技术栈，MPP数据库等）供用户使用，甚至提供开发好的应用</p><p>用户不需要关心应用内部使用了什么技术，就能够解决需求（如音视频转码服务、邮件服务、个人博客等）。</p><p>在云平台中会涉及如下几个概念：</p><p>IaaS：基础设施即服务。对应于上面所说的机器资源统一为资源整体，可动态申请硬件资源的层面；</p><p>PaaS：平台即服务。对应于上面所说的提供常用的技术组件方便系统的开发和维护；</p><p>SaaS：软件即服务。对应于上面所说的提供开发好的应用或服务，按功能或性能要求付费。</p><p>至此：以上所提到的从高并发访问问题，到服务的架构和系统实施的层面都有了各自的解决方案。</p><p>但同时也应该意识到，在上面的介绍中，其实是有意忽略了诸如跨机房数据同步、分布式事务实现等等的实际问题，这些问题以后有机会再拿出来单独讨论。</p><h2 id="4、架构设计总结"><a href="#4、架构设计总结" class="headerlink" title="4、架构设计总结"></a>4、架构设计总结</h2><h3 id="1）架构的调整是否必须按照上述演变路径进行？"><a href="#1）架构的调整是否必须按照上述演变路径进行？" class="headerlink" title="1）架构的调整是否必须按照上述演变路径进行？"></a>1）架构的调整是否必须按照上述演变路径进行？</h3><p>不是的，以上所说的架构演变顺序只是针对某个侧面进行单独的改进</p><p>在实际场景中，可能同一时间会有几个问题需要解决，或者可能先达到瓶颈的是另外的方面，这时候就应该按照实际问题实际解决。</p><p>如在政府类的并发量可能不大，但业务可能很丰富的场景，高并发就不是重点解决的问题，此时优先需要的可能会是丰富需求的解决方案。</p><h3 id="2）对于将要实施的系统，架构应该设计到什么程度？"><a href="#2）对于将要实施的系统，架构应该设计到什么程度？" class="headerlink" title="2）对于将要实施的系统，架构应该设计到什么程度？"></a>2）对于将要实施的系统，架构应该设计到什么程度？</h3><p>对于单次实施并且性能指标明确的系统，架构设计到能够支持系统的性能指标要求就足够了，但要留有扩展架构的接口以便不备之需。</p><p>对于不断发展的系统，如电商平台，应设计到能满足下一阶段用户量和性能指标要求的程度，并根据业务的增长不断的迭代升级架构，以支持更高的并发和更丰富的业务。</p><h3 id="3）服务端架构和大数据架构有什么区别？"><a href="#3）服务端架构和大数据架构有什么区别？" class="headerlink" title="3）服务端架构和大数据架构有什么区别？"></a>3）服务端架构和大数据架构有什么区别？</h3><p>所谓的“大数据”其实是海量数据采集清洗转换、数据存储、数据分析、数据服务等场景解决方案的一个统称，在每一个场景都包含了多种可选的技术</p><p>如数据采集有Flume、Sqoop、Kettle等，数据存储有分布式文件系统HDFS、FastDFS，NoSQL数据库HBase、MongoDB等，数据分析有Spark技术栈、机器学习算法等。</p><p>总的来说大数据架构就是根据业务的需求，整合各种大数据组件组合而成的架构，一般会提供分布式存储、分布式计算、多维分析、数据仓库、机器学习算法等能力。</p><p>而服务端架构更多指的是应用组织层面的架构，底层能力往往是由大数据架构来提供。</p><h3 id="4）有没有一些架构设计的原则？"><a href="#4）有没有一些架构设计的原则？" class="headerlink" title="4）有没有一些架构设计的原则？"></a>4）有没有一些架构设计的原则？</h3><pre><code>- N+1设计：系统中的每个组件都应做到没有单点故障；- 回滚设计：确保系统可以向前兼容，在系统升级时应能有办法回滚版本；- 禁用设计：应该提供控制具体功能是否可用的配置，在系统出现故障时能够快速下线功能；- 监控设计：在设计阶段就要考虑监控的手段；- 多活数据中心设计：若系统需要极高的高可用，应考虑在多地实施数据中心进行多活，至少在一个机房断电的情况下系统依然可用；- 采用成熟的技术：刚开发的或开源的技术往往存在很多隐藏的bug，出了问题没有商业支持可能会是一个灾难；- 资源隔离设计：应避免单一业务占用全部资源；- 架构应能水平扩展：系统只有做到能水平扩展，才能有效避免瓶颈问题；- 非核心则购买：非核心功能若需要占用大量的研发资源才能解决，则考虑购买成熟的产品；- 使用商用硬件：商用硬件能有效降低硬件故障的机率；- 快速迭代：系统应该快速开发小功能模块，尽快上线进行验证，早日发现问题大大降低系统交付的风险；- 无状态设计：服务接口应该做成无状态的，当前接口的访问不依赖于接口上次访问的状态。</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文以淘宝作为例子，介绍从一百个并发到千万级并发情况下服务端的架构的演进过程&lt;/p&gt;</summary>
    
    
    
    <category term="架构" scheme="http://blog.rcant.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="架构" scheme="http://blog.rcant.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ 控制台操作</title>
    <link href="http://blog.rcant.com/2020/10/23/mq/rabbitmq-base-console/"/>
    <id>http://blog.rcant.com/2020/10/23/mq/rabbitmq-base-console/</id>
    <published>2020-10-23T13:39:17.000Z</published>
    <updated>2020-10-24T10:29:36.272Z</updated>
    
    <content type="html"><![CDATA[<p>RabbitMQ 控制台操作</p><a id="more"></a><p>对应的RabbitMQ操作</p><h5 id="RabbitMQ-控制台操作"><a href="#RabbitMQ-控制台操作" class="headerlink" title="RabbitMQ 控制台操作"></a>RabbitMQ 控制台操作</h5><ol><li>添加guest用户</li></ol><p>guest用户设置密码为 guest</p><img src="/2020/10/23/mq/rabbitmq-base-console/rabbitmq-adduser1.png" class="" title="添加guest"> <img src="/2020/10/23/mq/rabbitmq-base-console/rabbitmq-adduser2.png" class="" title="添加guest2"> <ol><li>添加 vhost -&gt; frexport</li></ol><img src="/2020/10/23/mq/rabbitmq-base-console/rabbitmq-addvhost1.png" class="" title="添加vhost"> <p>设置VHost权限，添加guest用户权限</p><img src="/2020/10/23/mq/rabbitmq-base-console/rabbitmq-setvhost1.png" class="" title="设置权限"> <p>设置后如下</p><img src="/2020/10/23/mq/rabbitmq-base-console/rabbitmq-setvhost2.png" class="" title="添加vhost"> <p>回到User界面</p><img src="/2020/10/23/mq/rabbitmq-base-console/rabbitmq-setvhost3.png" class="" title="添加vhost"> <ol><li>添加Quene 队列 hello</li></ol><p>我们使用 frexport 虚拟主机创建一个队列 hello</p><img src="/2020/10/23/mq/rabbitmq-base-console/rabbitmq-addquene1.png" class="" title="添加队列1"> <p>添加后</p><img src="/2020/10/23/mq/rabbitmq-base-console/rabbitmq-addquene2.png" class="" title="添加队列2"> <h2 id="RabbitMQ-基础知识"><a href="#RabbitMQ-基础知识" class="headerlink" title="RabbitMQ 基础知识"></a>RabbitMQ 基础知识</h2><ul><li><a href="/2020/10/23/mq/rabbitmq-base-use/" title="RabbitMQ 基础知识">RabbitMQ 基础知识</a>  </li><li><a href="/2020/10/23/mq/rabbitmq-base-install/" title="RabbitMQ 安装">RabbitMQ 安装</a>  </li><li><a href="/2020/10/23/mq/rabbitmq-base-exchange/" title="RabbitMQ 交换机">RabbitMQ 交换机</a>  </li><li><a href="/2020/10/23/mq/rabbitmq-base-console/" title="RabbitMQ 控制台">RabbitMQ 控制台</a>  </li><li><a href="/2020/10/23/mq/rabbitmq-base-messagedispatch/" title="RabbitMQ 消息分发">RabbitMQ 消息分发</a>  </li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;RabbitMQ 控制台操作&lt;/p&gt;</summary>
    
    
    
    <category term="MQ" scheme="http://blog.rcant.com/categories/MQ/"/>
    
    
    <category term="rabbitmq" scheme="http://blog.rcant.com/tags/rabbitmq/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ Exchange 概念</title>
    <link href="http://blog.rcant.com/2020/10/23/mq/rabbitmq-base-exchange/"/>
    <id>http://blog.rcant.com/2020/10/23/mq/rabbitmq-base-exchange/</id>
    <published>2020-10-23T13:39:17.000Z</published>
    <updated>2020-10-24T10:29:40.635Z</updated>
    
    <content type="html"><![CDATA[<p>RabbitMQ 交换机概念</p><a id="more"></a><h3 id="Exchange-交换机"><a href="#Exchange-交换机" class="headerlink" title="Exchange 交换机"></a>Exchange 交换机</h3><p>RabbitMQ 中的消息 不是直接发送到Queue中的，中间有一个Exchange 做消息分发。<br>producer甚至都不知道消息发送到哪个队列中去。因此,当Exchange收到message时，必须知道如何准备分发消息。<br>具体是append 到一定规则的queue,还是append到多个queue中，还是被丢弃？这些都是通过 exchange的类型定义的。<br>|type|作用|创建vhost时默认创建的exchange的名称|<br>|-|-|-|<br>|direct|路由模式|(Empty string) and amq.direct|<br>|fanout|发布/订阅模式|amq.fanout|<br>|Topic|主题模式|amq.topic|<br>|headers||amq.match (and amq.headers in RabbitMQ)|</p><img src="/2020/10/23/mq/rabbitmq-base-exchange/exchange-all.png" class="" title="DirectExchange"> <h4 id="一-Direct-Exchange"><a href="#一-Direct-Exchange" class="headerlink" title="一:Direct Exchange"></a>一:Direct Exchange</h4><p>它处理路由键。需要将一个队列绑定到交换机上，要求该消息与一个特定的路由键完全匹配。这是一个完整的匹配。如果一个队列绑定到该交换机上要求路由键 “dog”，则只有被标记为“dog”的消息才被转发，不会转发dog.puppy，也不会转发dog.guard，只会转发dog。 </p><img src="/2020/10/23/mq/rabbitmq-base-exchange/exchange-direct.png" class="" title="DirectExchange"> <img src="/2020/10/23/mq/rabbitmq-base-exchange/exchange-direct1.png" class="" title="DirectExchange"> <p>直接交换通常用于:</p><ul><li>以循环方式在多个 workers（同一应用程序的实例）之间分配任务。当这样做时，消息在消费者之间而不是在队列之间是负载平衡的。</li></ul><h4 id="二、Fanout-Exchange"><a href="#二、Fanout-Exchange" class="headerlink" title="二、Fanout Exchange"></a>二、Fanout Exchange</h4><p>它不处理路由键。你只需要简单的将队列绑定到交换机上。一个发送到交换机的消息都会被转发到与该交换机绑定的所有队列上。很像子网广播，每台子网内的主机都获得了一份复制的消息。Fanout交换机转发消息是最快的。 </p><img src="/2020/10/23/mq/rabbitmq-base-exchange/exchange-fanout.png" class="" title="FanoutExchange"> <img src="/2020/10/23/mq/rabbitmq-base-exchange/exchange-fanout1.png" class="" title="FanoutExchange"> <p>如果N个队列绑定到 Fanout Exchange ，则当向该交换机发布新消息时，将向所有N个队列传递消息的副本。 Fanout Exchange 是广播消息路由的理想选择。</p><p>Fanout Exchange 向每个绑定到它的队列传递消息副本，适用场景如下：</p><ul><li>大型多人在线（MMO）游戏可用于排行榜更新或其他全球性事件。</li><li>体育新闻网站可以使用 Fanout Exchange 来实时更新移动客户端的评分更新。</li><li>分布式系统可以广播各种状态和配置更新</li></ul><h4 id="三、Topic-Exchange"><a href="#三、Topic-Exchange" class="headerlink" title="三、Topic Exchange"></a>三、Topic Exchange</h4><p>它将路由键和某模式进行匹配。此时队列需要绑定要一个模式上。符号“#”匹配一个或多个词，符号“<em>”匹配不多不少一个词。因此“audit.#”能够匹配到 “audit.irs.corporate”，但是“audit.</em>” 只会匹配到“audit.irs”。我在RedHat的朋友做了一张不错的图，来表明topic交换机是如何工作的：</p><img src="/2020/10/23/mq/rabbitmq-base-exchange/exchange-topic.png" class="" title="TopicExchange"> <img src="/2020/10/23/mq/rabbitmq-base-exchange/exchange-topic1.png" class="" title="TopicExchange"> <p>每当问题涉及多个消费者/应用程序，它们有选择地选择它们想要接收哪种类型的消息时，应该考虑使用 Topic Exchange 。</p><p>示例用途：</p><ul><li>分配与特定地理位置相关的数据，例如销售点</li><li>后台任务处理由多个工人完成，每个任务都能够处理特定的任务集。</li><li>股票价格的更新（以及其他类型的金融数据的更新）</li><li>涉及分类或标记的新闻更新（例如，仅针对特定的运动或团队）</li><li>云中不同类型服务的编排</li><li>分布式体系结构/ OS特定的软件构建或打包，其中每个构建器只能处理一个体系结构或操作系统。</li></ul><h4 id="四、Headers-exchange"><a href="#四、Headers-exchange" class="headerlink" title="四、Headers exchange"></a>四、Headers exchange</h4><p>A headers exchange is designed to for routing on multiple attributes that are more easily expressed as message headers than a routing key. Headers exchanges ignore the routing key attribute. Instead, the attributes used for routing are taken from the headers attribute. A message is considered matching if the value of the header equals the value specified upon binding.</p><p>　　It is possible to bind a queue to a headers exchange using more than one header for matching. In this case, the broker needs one more piece of information from the application developer, namely, should it consider messages with any of the headers matching, or all of them? This is what the “x-match” binding argument is for. When the “x-match” argument is set to “any”, just one matching header value is sufficient. Alternatively, setting “x-match” to “all” mandates that all the values must match.</p><p>　　Headers exchanges can be looked upon as “direct exchanges on steroids”. Because they route based on header values, they can be used as direct exchanges where the routing key does not have to be a string; it could be an integer or a hash (dictionary) for example.</p><p>不处理路由键。而是根据发送的消息内容中的headers属性进行匹配。在绑定Queue与Exchange时指定一组键值对；当消息发送到RabbitMQ时会取到该消息的headers与Exchange绑定时指定的键值对进行匹配；如果完全匹配则消息会路由到该队列，否则不会路由到该队列。headers属性是一个键值对，可以是Hashtable，键值对的值可以是任何类型。而fanout，direct，topic 的路由键都需要要字符串形式的。</p><p>匹配规则x-match有下列两种类型：</p><p>x-match = all ：表示所有的键值对都匹配才能接受到消息</p><p>x-match = any ：表示只要有键值对匹配就能接受到消息</p><h4 id="五、Default-Exchange"><a href="#五、Default-Exchange" class="headerlink" title="五、Default Exchange"></a>五、Default Exchange</h4><p>它是一种特别的exchange，当你手动创建一个队列时，后台会自动将这个队列绑定到一个名称为空的Direct 类型交换机上，绑定路由名称与队列名称相同。有了这个默认的交换机和绑定，我们就可以像其他轻量级的队列，如Redis那样，直接操作队列来处理消息。不过只是看起来是，实际上在RabbitMQ里直接操作是不可能的。消息始终都是先发送到交换机，由交换级经过路由传送给队列，消费者再从队列中获取消息的。不过由于这个默认交换机和路由的关系，使我们只关心队列这一层即可，这个比较适合做一些简单的应用，毕竟没有发挥RabbitMQ的最大功能，如果都用这种方式去使用的话就真是杀鸡用宰牛刀了。</p><h2 id="RabbitMQ-基础知识"><a href="#RabbitMQ-基础知识" class="headerlink" title="RabbitMQ 基础知识"></a>RabbitMQ 基础知识</h2><ul><li><a href="/2020/10/23/mq/rabbitmq-base-use/" title="RabbitMQ 基础知识">RabbitMQ 基础知识</a>  </li><li><a href="/2020/10/23/mq/rabbitmq-base-install/" title="RabbitMQ 安装">RabbitMQ 安装</a>  </li><li><a href="/2020/10/23/mq/rabbitmq-base-exchange/" title="RabbitMQ 交换机">RabbitMQ 交换机</a>  </li><li><a href="/2020/10/23/mq/rabbitmq-base-console/" title="RabbitMQ 控制台">RabbitMQ 控制台</a>  </li><li><a href="/2020/10/23/mq/rabbitmq-base-messagedispatch/" title="RabbitMQ 消息分发">RabbitMQ 消息分发</a>  </li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;RabbitMQ 交换机概念&lt;/p&gt;</summary>
    
    
    
    <category term="MQ" scheme="http://blog.rcant.com/categories/MQ/"/>
    
    
    <category term="rabbitmq" scheme="http://blog.rcant.com/tags/rabbitmq/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ 安装</title>
    <link href="http://blog.rcant.com/2020/10/23/mq/rabbitmq-base-install/"/>
    <id>http://blog.rcant.com/2020/10/23/mq/rabbitmq-base-install/</id>
    <published>2020-10-23T13:39:17.000Z</published>
    <updated>2020-10-24T10:29:43.880Z</updated>
    
    <content type="html"><![CDATA[<p>RabbitMQ 安装</p><a id="more"></a><p><a href="http://www.rabbitmq.com/" target="_blank" rel="noopener">RabbitMQ官网</a></p><h2 id="安装-RabbitMQ"><a href="#安装-RabbitMQ" class="headerlink" title="安装 RabbitMQ"></a>安装 RabbitMQ</h2><p>docker需要先装好</p><p>使用 <strong>docker-compose</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# mkdir rabbitmq</span><br><span class="line">[root@localhost ~]# cd rabbitmq&#x2F;</span><br><span class="line">[root@localhost rabbitmq]# mkdir data</span><br><span class="line">[root@localhost rabbitmq]# mkdir log</span><br><span class="line">[root@localhost rabbitmq]# vi docker-compose.yml</span><br></pre></td></tr></table></figure><p>docker-compose.yml 内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">version: &#39;2&#39;</span><br><span class="line">services:</span><br><span class="line">    rabbitmq:</span><br><span class="line">       hostname: rabbitmq</span><br><span class="line">       environment:</span><br><span class="line">         RABBITMQ_DEFAULT_VHOST: &quot;xxx&quot;</span><br><span class="line">         RABBITMQ_DEFAULT_USER: &quot;admin&quot;</span><br><span class="line">         RABBITMQ_DEFAULT_PASS: &quot;admin&quot;</span><br><span class="line">       image: &quot;rabbitmq:3-management&quot;</span><br><span class="line">       restart: always</span><br><span class="line">       volumes:</span><br><span class="line">         - &quot;.&#x2F;data:&#x2F;var&#x2F;lib&#x2F;rabbitmq&quot;</span><br><span class="line">         - &quot;.&#x2F;log:&#x2F;var&#x2F;log&#x2F;rabbitmq&#x2F;log&quot;</span><br><span class="line">       ports:</span><br><span class="line">         - &quot;4369:4369&quot;</span><br><span class="line">         - &quot;5672:5672&quot;</span><br><span class="line">         - &quot;15672:15672&quot;</span><br><span class="line">         - &quot;25672:25672&quot;</span><br></pre></td></tr></table></figure><p>启动 <strong>docker</strong> 容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure></p><ul><li>5672:默认的客户端连接的端口</li><li>15672：默认的web管理界面的端口</li></ul><p>访问15672端口出现下面界面代表RabbitMQ安装成功</p><img src="/2020/10/23/mq/rabbitmq-base-install/rabbit-startup.png" class="" title="RabbitMQ启动"> <p>账号密码为 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RABBITMQ_DEFAULT_USER: &quot;admin&quot;</span><br><span class="line">RABBITMQ_DEFAULT_PASS: &quot;admin&quot;</span><br></pre></td></tr></table></figure><img src="/2020/10/23/mq/rabbitmq-base-install/rabbit-overview.png" class="" title="RabbitMQ概述"> <h2 id="RabbitMQ-基础知识"><a href="#RabbitMQ-基础知识" class="headerlink" title="RabbitMQ 基础知识"></a>RabbitMQ 基础知识</h2><ul><li><a href="/2020/10/23/mq/rabbitmq-base-use/" title="RabbitMQ 基础知识">RabbitMQ 基础知识</a>  </li><li><a href="/2020/10/23/mq/rabbitmq-base-install/" title="RabbitMQ 安装">RabbitMQ 安装</a>  </li><li><a href="/2020/10/23/mq/rabbitmq-base-exchange/" title="RabbitMQ 交换机">RabbitMQ 交换机</a>  </li><li><a href="/2020/10/23/mq/rabbitmq-base-console/" title="RabbitMQ 控制台">RabbitMQ 控制台</a>  </li><li><a href="/2020/10/23/mq/rabbitmq-base-messagedispatch/" title="RabbitMQ 消息分发">RabbitMQ 消息分发</a>  </li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;RabbitMQ 安装&lt;/p&gt;</summary>
    
    
    
    <category term="MQ" scheme="http://blog.rcant.com/categories/MQ/"/>
    
    
    <category term="rabbitmq" scheme="http://blog.rcant.com/tags/rabbitmq/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ 任务分发</title>
    <link href="http://blog.rcant.com/2020/10/23/mq/rabbitmq-base-messagedispatch/"/>
    <id>http://blog.rcant.com/2020/10/23/mq/rabbitmq-base-messagedispatch/</id>
    <published>2020-10-23T13:39:17.000Z</published>
    <updated>2020-10-24T10:29:48.632Z</updated>
    
    <content type="html"><![CDATA[<p>任务分发</p><a id="more"></a><h2 id="任务分发机制"><a href="#任务分发机制" class="headerlink" title="任务分发机制"></a>任务分发机制</h2><p>使用任务队列的优点之一是可以轻易的进行一步工作。</p><p>如果我们现在积压了很多工作，可以通过增加消费者来解决这个问题，使得系统伸缩性更加容易</p><h2 id="Round-robin（轮询分发）"><a href="#Round-robin（轮询分发）" class="headerlink" title="Round-robin（轮询分发）"></a>Round-robin（轮询分发）</h2><p>发布者 RabbitMQ 发送几条消息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">using RabbitMQ.Client;</span><br><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading;</span><br><span class="line"></span><br><span class="line">namespace WorkMQProduct</span><br><span class="line">&#123;</span><br><span class="line">    class NewTask</span><br><span class="line">    &#123;</span><br><span class="line">        static string QueueName &#x3D; &quot;task_queue&quot;;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            var factory &#x3D; new ConnectionFactory()</span><br><span class="line">            &#123;</span><br><span class="line">                HostName &#x3D; &quot;localhost&quot;,</span><br><span class="line">                VirtualHost &#x3D; &quot;frexport&quot;,</span><br><span class="line">                UserName &#x3D; &quot;guest&quot;,</span><br><span class="line">                Password &#x3D; &quot;guest&quot;</span><br><span class="line">            &#125;;</span><br><span class="line">            List&lt;int&gt; taskMessages &#x3D; new List&lt;int&gt; &#123; 2, 7, 2, 6, 5, 2, 2, 3 &#125;;</span><br><span class="line"></span><br><span class="line">            using (var connection &#x3D; factory.CreateConnection())</span><br><span class="line">            using (var channel &#x3D; connection.CreateModel())</span><br><span class="line">            &#123;</span><br><span class="line">                channel.QueueDeclare(queue: QueueName,</span><br><span class="line">                                     durable: true,</span><br><span class="line">                                     exclusive: false,</span><br><span class="line">                                     autoDelete: false,</span><br><span class="line">                                     arguments: null);</span><br><span class="line"></span><br><span class="line">                var properties &#x3D; channel.CreateBasicProperties();</span><br><span class="line">                properties.SetPersistent(true);</span><br><span class="line"></span><br><span class="line">                for (int i &#x3D; 0; i &lt; 8; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    string message &#x3D; taskMessages[i] + &quot;&quot;;</span><br><span class="line">                    var body &#x3D; Encoding.UTF8.GetBytes(message);</span><br><span class="line"></span><br><span class="line">                    properties.CorrelationId &#x3D; i + &quot;&quot;;</span><br><span class="line">                    channel.BasicPublish(exchange: &quot;&quot;,</span><br><span class="line">                                     routingKey: QueueName,</span><br><span class="line">                                     basicProperties: properties,</span><br><span class="line">                                     body: body);</span><br><span class="line">                    Console.WriteLine(&quot; [x] &#123;0&#125; Sent &#123;1&#125;&quot;, properties.CorrelationId, message);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot; Press [enter] to exit.&quot;);</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>消费者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">using RabbitMQ.Client;</span><br><span class="line">using RabbitMQ.Client.Events;</span><br><span class="line">using System;</span><br><span class="line">using System.Threading;</span><br><span class="line"></span><br><span class="line">namespace WorkMQConsumer</span><br><span class="line">&#123;</span><br><span class="line">    class Worker</span><br><span class="line">    &#123;</span><br><span class="line">        static string QueueName &#x3D; &quot;task_queue&quot;;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            var factory &#x3D; new ConnectionFactory() &#123; &#125;;</span><br><span class="line">            factory.HostName &#x3D; &quot;localhost&quot;;</span><br><span class="line">            factory.VirtualHost &#x3D; &quot;frexport&quot;;</span><br><span class="line">            factory.UserName &#x3D; &quot;guest&quot;;</span><br><span class="line">            factory.Password &#x3D; &quot;guest&quot;;</span><br><span class="line"></span><br><span class="line">            using (var connection &#x3D; factory.CreateConnection())</span><br><span class="line">            &#123;</span><br><span class="line">                using (var channel &#x3D; connection.CreateModel())</span><br><span class="line">                &#123;</span><br><span class="line">                    channel.QueueDeclare(queue: QueueName,</span><br><span class="line">                        durable: true,</span><br><span class="line">                        exclusive: false,</span><br><span class="line">                        autoDelete: false,</span><br><span class="line">                        arguments: null);</span><br><span class="line"></span><br><span class="line">                    Console.WriteLine(&quot; [*] Waiting for message.&quot;);</span><br><span class="line"></span><br><span class="line">                    var consumer &#x3D; new EventingBasicConsumer(channel);</span><br><span class="line"></span><br><span class="line">                    consumer.Received +&#x3D; (sender, ea) &#x3D;&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        var body &#x3D; ea.Body;</span><br><span class="line">                        </span><br><span class="line">                        var message &#x3D; System.Text.Encoding.UTF8.GetString(body);</span><br><span class="line">                        int x &#x3D; int.Parse(message);</span><br><span class="line"></span><br><span class="line">                        Console.WriteLine(&quot; [x] Task &#123;0&#125; Receive &#123;1&#125; &#123;2&#125;&quot;, ea.BasicProperties.CorrelationId, message, DateTime.Now);</span><br><span class="line"></span><br><span class="line">                        Thread.Sleep(1000*x);</span><br><span class="line"></span><br><span class="line">                        Console.WriteLine(&quot; [x] Done! at &#123;0&#125;&quot;, DateTime.Now);</span><br><span class="line">                        channel.BasicAck(deliveryTag: ea.DeliveryTag, multiple: false);</span><br><span class="line">                    &#125;;</span><br><span class="line"></span><br><span class="line">                    channel.BasicConsume(queue: QueueName,</span><br><span class="line">                        noAck: false,</span><br><span class="line">                        consumer: consumer);</span><br><span class="line"></span><br><span class="line">                    Console.WriteLine(&quot; Press [enter] to exit.&quot;);</span><br><span class="line">                    Console.ReadLine();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>先启动两个消费者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ MDConsumer&#x2F;bin&#x2F;Debug&#x2F;MDConsumer.exe</span><br><span class="line">$ MDConsumer&#x2F;bin&#x2F;Debug&#x2F;MDConsumer.exe</span><br></pre></td></tr></table></figure><br>再启动一个生产者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ MDProduct&#x2F;bin&#x2F;Debug&#x2F;MDProduct.exe</span><br></pre></td></tr></table></figure></p><p>效果</p><img src="/2020/10/23/mq/rabbitmq-base-messagedispatch/round-robin.png" class="" title="效果1"> <p>这个地方其实,所有消息会很快传给消费者,虽然没有消息应答</p><img src="/2020/10/23/mq/rabbitmq-base-messagedispatch/round-robin2.png" class="" title="效果2"> <p>从上述的结果中，我们可以得知，在默认情况下，RabbitMQ不会顾虑消息者处理消息的能力，即使其中有的消费者闲置有的消费者高负荷。RabbitMQ会逐个发送消息到在序列中的下一个消费者(而不考虑每个任务的时长等等，且是提前一次性分配，并非一个一个分配)。平均每个消费者获得相同数量的消息，这种方式分发消息机制称为Round-Robin（轮询）。</p><h2 id="Fair-dispatch（公平分发）"><a href="#Fair-dispatch（公平分发）" class="headerlink" title="Fair dispatch（公平分发）"></a>Fair dispatch（公平分发）</h2><p>您可能已经注意到，任务分发仍然没有完全按照我们想要的那样。比如：现在有2个消费者，所有的奇数的消息都是繁忙的，而偶数则是轻松的。按照轮询的方式，奇数的任务交给了第一个消费者，所以一直在忙个不停。偶数的任务交给另一个消费者，则立即完成任务，然后闲得不行。而RabbitMQ则是不了解这些的。这是因为当消息进入队列，RabbitMQ就会分派消息。它不看消费者为应答的数目，只是盲目的将第n条消息发给第n个消费者。</p><p>公平分发，则是根据消费者的处理能力来进行分发处理的。这里主要是通过设置prefetchCount 参数来实现的。这样RabbitMQ就会使得每个Consumer在同一个时间点最多处理规定的数量级个数的Message。换句话说，在接收到该Consumer的ack前，它不会将新的Message分发给它。 比如prefetchCount=1，则在同一时间下，每个Consumer在同一个时间点最多处理1个Message，同时在收到Consumer的ack前，它不会将新的Message分发给它。</p><pre class="mermaid">graph LR;    P([Product]);    mq([Message Quene])    C1([Consumer1]);    C2([Consumer2]);    style P fill:#0ff,stroke:#333;    style mq fill:#f00,stroke:#333;    style C1 fill:#3cf,stroke:#333;    style C2 fill:#3cf,stroke:#333;    P-->mq;    mq-->|prefetch=1|C1;    mq-->|prefetch=1|C2;</pre><p>修改工作线程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.BasicQos(prefetchCount: 1, prefetchSize: 0, global: false);</span><br></pre></td></tr></table></figure></p><p>注：如果所有的工作者都处于繁忙状态，你的队列有可能被填充满。你可能会观察队列的使用情况，然后增加工作者，或者使用别的什么策略。<br>还有一点需要注意，使用公平分发，必须关闭自动应答，改为手动应答。</p><p>效果</p><img src="/2020/10/23/mq/rabbitmq-base-messagedispatch/fair-dispatch.png" class="" title="效果1"> <p>消息每次只会发送一条给消费者，只有消费者处理完成后，才会分发新的消息<br><img src="/2020/10/23/mq/rabbitmq-base-messagedispatch/fair-dispatch2.png" class="" title="效果2"> </p><h2 id="RabbitMQ-基础知识"><a href="#RabbitMQ-基础知识" class="headerlink" title="RabbitMQ 基础知识"></a>RabbitMQ 基础知识</h2><ul><li><a href="/2020/10/23/mq/rabbitmq-base-use/" title="RabbitMQ 基础知识">RabbitMQ 基础知识</a>  </li><li><a href="/2020/10/23/mq/rabbitmq-base-install/" title="RabbitMQ 安装">RabbitMQ 安装</a>  </li><li><a href="/2020/10/23/mq/rabbitmq-base-exchange/" title="RabbitMQ 交换机">RabbitMQ 交换机</a>  </li><li><a href="/2020/10/23/mq/rabbitmq-base-console/" title="RabbitMQ 控制台">RabbitMQ 控制台</a>  </li><li><a href="/2020/10/23/mq/rabbitmq-base-messagedispatch/" title="RabbitMQ 消息分发">RabbitMQ 消息分发</a>  </li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;任务分发&lt;/p&gt;</summary>
    
    
    
    <category term="MQ" scheme="http://blog.rcant.com/categories/MQ/"/>
    
    
    <category term="rabbitmq" scheme="http://blog.rcant.com/tags/rabbitmq/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ 消费者确认和发布者确认</title>
    <link href="http://blog.rcant.com/2020/10/23/mq/rabbitmq-confirms/"/>
    <id>http://blog.rcant.com/2020/10/23/mq/rabbitmq-confirms/</id>
    <published>2020-10-23T12:39:17.000Z</published>
    <updated>2020-10-24T10:26:23.072Z</updated>
    
    <content type="html"><![CDATA[<h2 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h2><ul><li>为什么需要确认</li><li>手动和自动确认模式</li><li>确认API[多次确认和重新排队]</li><li>连接丢失或通道关闭时自动重新排队</li><li>通道预取及其对吞吐量的影响</li><li>最常见的客户错误</li><li>发布者确认和相关发布者数据安全主题</li></ul><a id="more"></a><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>按照定义，使用消息传递代理(RabbitMQ)的系统是分布式的。由于不能保证发送的消息可以到达对方或者被其成功处理，因此发布者和消费者都需要一种机制来进行传递和处理确认。</p><p>从消费者到RabbitMQ的消息确认被称为消息传递协议的确认<br>对发布者的去人称为发布者确认。两种功能都基于相同的思想，启发于TCP.</p><p>这对于 发布者到RabbitMQ,RabbitMQ到消费者的可靠交付都是必不可少的。 他们对于数据安全至关重要。</p><h2 id="消费者确认"><a href="#消费者确认" class="headerlink" title="消费者确认"></a>消费者确认</h2><p>RabbitMQ 将消息传递给使用者的时候，需要知道何时消息被处理成功。具体逻辑取决于系统。因此这个是应用程序的决策.</p><h2 id="确认标识"><a href="#确认标识" class="headerlink" title="确认标识"></a>确认标识</h2><p>确认消息，重要的是如何识别确认的消息。</p><p>注册 消费者后（订阅），RabbitMQ使用 basic.deliver 方法推送消息。该方法带有传递标签，该标签唯一标识通道上的传递。因此交付标签按通道划分范围</p><p>交付标签是单调的正整数，并有客户端库标识，确认交付的客户端库方法将交付标签作为参数</p><p>由于传递</p><ul><li>basic.ack 用于确认</li><li>basic.nack 用于否定确认</li><li>basic.reject 用于否定确认，但与basic.nack 相比有一个限制</li></ul><p>自动确认模式：</p><p>消息视为发送后立即成功传递。这种模式需要权衡更高的吞吐量(只要消费者可以跟上),以降低交付和消费者处理的安全性。此模式通常称为“一劳永逸”。和手动确认模式不同，如果在成功传递前关闭了TCP连接或者通道，则服务器发送的消息将丢失。因此，自动消息确认应该被认为是不安全的，并且不适合所有有负载的工作。</p><h3 id="一次确认多个"><a href="#一次确认多个" class="headerlink" title="一次确认多个"></a>一次确认多个</h3><p>处理网络流量考虑</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;总览&quot;&gt;&lt;a href=&quot;#总览&quot; class=&quot;headerlink&quot; title=&quot;总览&quot;&gt;&lt;/a&gt;总览&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;为什么需要确认&lt;/li&gt;
&lt;li&gt;手动和自动确认模式&lt;/li&gt;
&lt;li&gt;确认API[多次确认和重新排队]&lt;/li&gt;
&lt;li&gt;连接丢失或通道关闭时自动重新排队&lt;/li&gt;
&lt;li&gt;通道预取及其对吞吐量的影响&lt;/li&gt;
&lt;li&gt;最常见的客户错误&lt;/li&gt;
&lt;li&gt;发布者确认和相关发布者数据安全主题&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="MQ" scheme="http://blog.rcant.com/categories/MQ/"/>
    
    
    <category term="rabbitmq" scheme="http://blog.rcant.com/tags/rabbitmq/"/>
    
  </entry>
  
</feed>
